; Author: Dave Keenan, 27-Feb-2018
; This 12-bit CRC was chosen from Philip Koopman's CRC catalog. In Koopman's notation it is 0xb41.
; https://users.ece.cmu.edu/~koopman/crc/index.html
; It is 12 bits so it can be represented in two bytes that contain only printable ASCII characters.
; It detects:
; Up to 5 bit-errors in messages of 1 to 3 bytes
; Up to 3 bit-errors in messages of 4 to 221 bytes
; All errors in an odd number of bits
; All burst errors of up to 12 bits
; We implement a right-shift version (so the polynomial is bit-reversed) because UARTs send LSBit first.
; The CRC is also sent LSByte first, for the same reason.

; This online CRC calculator can be used to check our implementation:
; http://www.ghsi.de/pages/subpages/Online%20CRC%20Calculation/index.php?Polynom=1011010000011&Message=5D80%0D%0A
; However it only does left-shifts, so you have to bit-reverse our polynomial
; (so it becomes 1011010000011), and you have to bit-reverse our data,
; and you have to bit-reverse the CRC it gives you.
; It doesn't allow an initial value for the CRC other than zero.
; But you can get the same effect by feeding it initial data of $5D80
; (to the left of the bit-reversed version of our data).
; And it doesn't allow a final inversion of the CRC.
; But you can invert the bits of the CRC it gives you (as well as bit-reversing it).

; Here's a Javascript version of our CRC12 algorithm, for use with node-red.
/*
var crc = 0xFFF; // Initialise the CRC12 to all ones
var index, virtualTableLookup;
for (var i = 0, len = msg.payload.length; i < len; i++) {
    index = (crc & 0xFF) ^ msg.payload.charCodeAt(i);
    virtualTableLookup =
        ((index & 0x80) ? 0xC16 : 0) ^
        ((index & 0x40) ? 0x60B : 0) ^
        ((index & 0x20) ? 0xF13 : 0) ^
        ((index & 0x10) ? 0xB9F : 0) ^
        ((index & 0x08) ? 0x9D9 : 0) ^
        ((index & 0x04) ? 0x8FA : 0) ^
        ((index & 0x02) ? 0x47D : 0) ^
        ((index & 0x01) ? 0xE28 : 0);
    crc = (crc >> 8) ^ virtualTableLookup;
}
crc ^= 0xFFF;   // Invert the final CRC12
var crc1 = crc & 0x3F;  // Split the CRC12 into two 6 bit values.
var crc2 = crc >> 6;
if (crc1 != 0x3F) { // Make them printable ASCII
    crc1 |= 0x40;
}
if (crc2 != 0x3F) {
    crc2 |= 0x40;
}
msg.payload += String.fromCharCode(crc1)+String.fromCharCode(crc2)+"\r";
return msg;
*/

InitialCrc12	EQU		$0FFF	; This ensures that nulls added to the start will break the CRC.
								; Inverting the final CRC ensures nulls added to the end will break it.

UpdateCrc12:
; Input: Data byte in R8, 12-bit CRC in R9. Output: Updated CRC in R9. Destroys R10. Preserves R8 byte.
; crc = (crc >> 8) ^ lookup[data ^ (crc & $FF)]
	xor.b	R9, R8				; XOR the low byte of the CRC-so-far with the data byte
	call	#VirtualCrc12Lookup	; R10 = CRC of one-byte message in R8. Preserves R8.
	xor.b	R9, R8				; Restore R8 (low byte only)
	swpb_b_R 9					; Shift CRC 8 bits right
	xor		R10, R9				; XOR the looked-up value with the shifted CRC-so-far
	ret


VirtualCrc12Lookup:
; Return the CRC of a one-byte message.
; Virtual 256 word CRC table lookup.
; Input: 8 bit index in R8. Output: 12-bit CRC in R10. Preserves R8.
	clr     R10
	rlc.b   R8    ; shift ms bit of index to carry
	_IF     C
		xor     #$C16, R10    ; Constant is table value for $80 = polynomial
	_ENDIF
	rlc.b   R8    ; Shift bit 6 of index to carry
	_IF     C
		xor     #$60B, R10    ; Constant is table value for $40
	_ENDIF
	rlc.b   R8    ; Shift bit 5 of index to carry
	_IF     C
		xor     #$F13, R10    ; Constant is table value for $20
	_ENDIF
	rlc.b   R8    ; Shift bit 4 of index to carry
	_IF     C
		xor     #$B9F, R10    ; Constant is table value for $10
	_ENDIF
	rlc.b   R8    ; Shift bit 3 of index to carry
	_IF     C
		xor     #$9D9, R10    ; Constant is table value for $08
	_ENDIF
	rlc.b   R8    ; Shift bit 2 of index to carry
	_IF     C
		xor     #$8FA, R10    ; Constant is table value for $04
	_ENDIF
	rlc.b   R8    ; Shift bit 1 of index to carry
	_IF     C
		xor     #$47D, R10    ; Constant is table value for $02
	_ENDIF
	rlc.b   R8    ; Shift ls bit of index to carry
	_IF     C
		xor     #$E28, R10    ; Constant is table value for $01
	_ENDIF
	rlc.b   R8    ; Restore the original contents of R8
	ret


MakeCrc12Printable:
; Input: 12-bit CRC in R8. Output: The CRC as two printable-ASCII bytes in R8. Destroys R9.
	mov    R8, R9		; Make a copy of the CRC in R10
	and    #$3F, R8		; Mask off the low 6 bits
	cmp    #$3F, R8		; Ensure it's not a control character (nor will it be a decimal digit)
	_IF    NE
		or_w     #$40, R8
	_ENDIF
	rla2   R9			; Get the high 6 bits into the high byte
	and    #$3F00, R9	; Mask off the high 6 bits
	cmp    #$3F00, R9	; Ensure it's not a control character (nor will it be a decimal digit)
	_IF    NE
		or_w     #$4000, R9
	_ENDIF
	or_w	R9, R8		; Put both bytes into R8
	ret
