; Contains both an outer (packet) interpreter with backspace editing
; and an inner (command character) interpreter.

;-------------------------------------------------------------------------------
;
; Status flag usage
;
; Bit 15 = literal in progress
; Bit 14 = hex literal (otherwise decimal)

#define		Rip		R5		// Interpreter instruction pointer
#define		Rop		R6		// Holds partial operands (literals) or partial operators (multichar cmnds)
#define		Rw		R8		// Working register - temporary - anyone can use

; Macros for 3-register interpreter data stack
	#define 	Rtos	R7		// Top element of data stack
	#define 	Rsec	R4		// Second element from top
	#define 	Rthd	R13		// Third element from top

DPUSH		MACRO	arg
			mov		Rsec,Rthd
			mov		Rtos,Rsec
			mov		arg,Rtos
			ENDM

DPUSHb		MACRO	arg
			mov		Rsec,Rthd
			mov		Rtos,Rsec
			mov.b	arg,Rtos
			ENDM

DPOP		MACRO	arg
			mov		Rtos,arg
			mov		Rsec,Rtos
			mov		Rthd,Rsec
			ENDM

DPOPb		MACRO	arg
			mov.b	Rtos,arg
			mov		Rsec,Rtos
			mov		Rthd,Rsec
			ENDM

DROP		MACRO
			mov		Rsec,Rtos
			mov		Rthd,Rsec
			ENDM

TwoDROP		MACRO
			mov		Rthd,Rtos
			ENDM

SWAP		MACRO
			xor		Rtos,Rsec
			xor		Rsec,Rtos
			xor		Rtos,Rsec
			ENDM

DUP			MACRO
			mov		Rsec,Rthd
			mov		Rtos,Rsec
			ENDM

OVER		MACRO
			mov		Rsec,Rthd
			mov		Rtop,Rsec
			mov		Rthd,Rtop
			ENDM

NIP			MACRO
			mov		Rthd,Rsec
			ENDM

TUCK		MACRO
			mov		Rtos,Rthd
			ENDM

ROT			MACRO
			xor		Rsec,Rthd
			xor		Rthd,Rsec
			xor		Rsec,Rthd
			xor		Rtos,Rsec
			xor		Rsec,Rtos
			xor		Rtos,Rsec
			ENDM

MinusROT	MACRO
			xor		Rtos,Rsec
			xor		Rsec,Rtos
			xor		Rtos,Rsec
			xor		Rsec,Rthd
			xor		Rthd,Rsec
			xor		Rsec,Rthd
			ENDM

;-------------------------------------------------------------------------------
; Command-character-table Macros

; The command-character lookup table is in high memory.
; It contains one word per command character from $21 to $FF.
; That word is the address of the code that implements the command.

_LO_CMDCHR	EQU	' '+1						; Lowest definable cmd-character is char after space, "!"
_HI_CMDCHR	EQU	$FF							; Highest definable cmd-character. Og Oo Ow O? Wg Wo Ww W?
; Characters from $80 to $FF may be obtained as the hash values of two-character commands.

_CMDCHRTBL	EQU	CMDCHRTBLEND-(2*(_HI_CMDCHR+1-_LO_CMDCHR))	; Table ends immediately below lowest
											; main-program entry point

; The "x" at the start of the following macro name stands for "cross-compiling"
; to distinguish it from a possible native version on the MSP430 in future.
; The name "CODE" is from Forth.

; Assemble a command-character-table entry that has a machine-code definition.
;
; The first argument, CMDCHRS, is the command being defined.
; It can be either a single character e.g. 'x', or two characters in the form 'X'|'x'<<8.
; Unfortunately the assembler doesn't allow strings of more than 1 character to be treated as integers.
; Nor does it allow indexing of a string at assembly time, so 'Xx' doesn't work.
;
; The second and third arguments are two labels which will be assigned the command character
; and the code address respectively. In the case of a two-character command, the command character
; assigned will be a single character in the range $80-$FF hashed from the command's two characters.
;
; If a character is defined as a single-character command, then no two-character commands beginning
; with that character can be used. The convention is to reserve uppercase letters for beginning
; two-character commands.

xCODE	MACRO	CMDCHRS,CMDCHRNAM,_ADDRLBL
						LSTOUT-
		EVEN								; Force to word boundary
_ADDRLBL:									; Define the machine-code address label
		IF		HIGH(CMDCHRS) == 0			; If it's a single character command
						LSTOUT+
CMDCHRNAM	EQU		CMDCHRS						; Use the character directly as the index
						LSTOUT-
		ELSE								; Else it's a two character command
			; Apply a simple hash function that minimises collisions for the first letter of
			; English words, while reducing it to 4 bits.
_char1		SET		LOW(CMDCHRS) & $1F			; Treat upper and lower case the same
			IF		_char1 >= 'Q' & $1F			; If it's a 'Q' or greater
_char1			SET		_char1-'Q'+'I'				; Map it to the letters beginning with 'I'
			ENDIF								; Endif
_char1		SET		_char1 & $F					; Take the low 4 bits
			; Apply a simple hash function that minimises collisions for the second letter of
			; English words, while reducing it to 3 bits.
_char2		SET		HIGH(CMDCHRS) & $1F			; Treat upper and lower case the same
			IF		_char2 == 'a' & $1F			; If it's an 'a' change it to a 'c'
_char2			SET		'c'
			ENDIF								; Endif
_char2		SET		_char2 & 7					; Take the low 3 bits
						LSTOUT+
CMDCHRNAM	EQU		$80|_char1<<3|_char2		; Combine the hashed characters and set the high bit
						LSTOUT-
		ENDIF								; Endif single character command
		ORG		_CMDCHRTBL-(_LO_CMDCHR*2)+(CMDCHRNAM)*2 ; Go to indexed command-char-table entry
						LSTOUT+
		DW		_ADDRLBL					; Assemble the address
						LSTOUT-
		ORG		_ADDRLBL					; Go back to where the machine code will be assembled
						LSTOUT+
						ENDM

;-------------------------------------------------------------------------------
; The inner (command character) interpreter

; Interpreter for 8 bit command characters.
; Partly inspired by the transputer instruction set with its PFIX and OPR instructions,
; and partly inspired by Forth, but with a maximum of two letters per command. Twoth?
; This could be extended to more letters per command, without requiring spaces as separators,
; by adopting the convention that a command word is terminated by a lower case character.
; So valid words would be x, Xx, XXx, XXXx etc.
;
; But presently, if a character is not defined as a single-character command, and it cannot be
; interpreted as a digit in the present input number base, then it will be treated as the first
; character of a two-character command.
; By convention, we reserve most of the uppercase letters (in particular those that most commonly
; begin English words) for beginning two-character commands.
; The two characters of these commands are hashed to a single non-ASCII character in the range
; $80 to $FF for the purpose of looking up the command-character table.
;
; The hash function keeps these 16 common first letters distinct: "PABCDEFGHIRSTMNO".
; Possible collisions are:
;                   Should only be used as last or only letter (to allow for future expansion)
; P   X @			p x `   0 8 <space>
; A   Y				a y     ! 9
; B   Z				b z     " :		Note: The uppercase letters A thru F will be treated
; C   [				c {     # ;		as hex digits only when following a dollar sign,
; D   \				d |     $ <		and with nothing intervening except other hex digits.
; E   ]				e }     % =
; F   ^				f ~     & >
; G   _				g <del> ' ?
; H					h       (
; I   Q				i q     ) 1
; R   J				r j     * 2
; S   K				s k     + 3
; T   L				t l     , 4
; M   U				m u     - 5
; N   V				n v     . 6
; O   W				o w     / 7
;
; The hash function keeps these 8 common second letters distinct: "hiralefo".
; Possible collisions are:
;										Should not be used as last or only letter (allows expansion)
; h   p x `		( 0 8 <space>			H P X @
; i   q y		) 1 9					I Q Y
; r   b j z		" * 2 :					B J R Z
; a   c k s {	! # + 3 ;				A C K S [
; l   d t |		$ , 4 <					D L T \
; e   m u }		% - 5 =					E M U ]
; f   n v ~		& . 6 >					F N V ^
; o   g w <del>	' / 7 ?					G O W _
;
; The main source of letter frequencies I used was:
; http://wordcraft.infopop.cc/eve/forums/a/tpc/f/932607094/m/3991045064
; But the following was also of interest, although it only gives the frequency in a typical
; _text_ (with many repeated words) whereas I need the frequency in a _vocabulary_ as above
; (no words repeated): http://norvig.com/mayzner.html
; In promoting 'f' over 'u' in the list of favoured second-letters, I had in mind
; the control flow words If and Of. -- Dave Keenan

_ENTER
_NEXT
		ClearWatchdog		; Clear and restart Watchdog Timer before each command character is interpreted
		mov.b	@Rip+,Rw	; Fetch the next character
_RUN
		; Treat all undefinable characters, including space, as literal-separator no-ops
		_COND
#if _HI_CMDCHR != $FF	; The following test is redundant when _HI_CMDCHR = $FF
			cmp.b	#_HI_CMDCHR+1,Rw
		_OR_ELSE	HS		; If it's higher than the highest valid command character
#endif
			cmp.b	#_LO_CMDCHR,Rw
		_OR_IFS		LO		; Or if it's lower than the lowest valid command character
			mov		#_Space,Rw	; Treat it as a literal-separator no-op
			jmp		FncLIT
		_ENDIF

		; Check for operator-in-progress (2nd char of 2-char command)
		bit		#1<<13,SR
		_IF		NZ
			; Apply a simple hash function that minimises collisions for the second letter of
			; English words, while reducing it to 3 bits.
			and.b	#$1F,Rw		; Treat upper and lower case the same
			cmp.b	#'a'&$1F,Rw
			_IF		EQ			; If it's an 'a' replace it with 'c'
				mov.b	#'c',Rw
			_ENDIF
			and.b	#7,Rw		; Take the low 3 bits
			; Combine these 3 bits with the 4 bits of the hashed first character and set the high bit.
			rla3	Rop
			bis.b	Rop,Rw
			bis.b	#$80,Rw
		_ENDIF

		; Look up the code address by using the command character as an index into the command table
		rla		Rw			; Multiply the character code by 2 and use it to
		mov _CMDCHRTBL-(_LO_CMDCHR*2)(Rw),Rw ; index the command-character-table to get the code address

		; Check for undefined commands
		cmp		#$FFFF,Rw	; Both $FFFF or $0000 mean undefined. Note: This simple version of the test
		jge		DoUNDEF		; will fail on processors with > 32K of flash and code below $8000
		bic		#1<<13,SR	; Clear the operator-in-progress flag

FncLIT ; Check for an implied push-literal
		tst		SR
		_IF		L			; If there's an operand-in-progress
			DPUSH	Rop			; Push the operand now, before doing the operation
			bic		#(1<<15)+(1<<14),SR	; Clear the operand-in-progress flag and the hex flag
		_ENDIF

		call	Rw			; Call the machine-code implementation of the command character
							; It must end with an RET
		jmp		_NEXT

DoUNDEF
		bit		#1<<13,SR
		_IF		NZ			; If this is the second character of a two-character command
			bic		#1<<13,SR	; Clear the operator-in-progress flag
			jmp		_NEXT
		_ENDIF
		; Try to interpret undefined command characters as digits in the present input number base.
		; Otherwise treat undefined characters as the first character of a two-character command.
        dec		Rip			; Decrement the instruction pointer to
		mov.b	@Rip+,Rw	;  re-fetch the character
		_COND
			cmp.b	#'0',Rw
		_AND_IF	HS			; If the character is between '0'
			cmp.b	#'9'+1,Rw
		_AND_IF	LO			; and '9'
			sub.b	#'0',Rw		; Convert '0'-'9' to 0-9
FncPFX4		tst		SR			; Test the operand-in-progress flag (sign bit of status reg)
			_IF		NN			; If there wasn't already an operand in progress
				mov		Rw,Rop		; Move the 4 bits of data to the partial-operand register
				bis		#1<<15,SR	; Set the operand-in-progress flag
			_ELSE				; Else operand-in-progress
				rla		Rop			; Multiply the partial operand by 16 or 10
				mov		Rop,R9		; Save 2*Rop in R9
				rla		Rop			; 4*Rop
				rla		Rop			; 8*Rop
				bit		#1<<14,SR	; Test the hex input flag
				_IF		Z			; If decimal
					add		R9,Rop		; 10*Rop
				_ELSE				; Else hex (due to a preceding '$')
					rla		Rop			; 16*Rop
				_ENDIF				; Endif decimal
				add		Rw,Rop		; Add the 4 bits of data to the partial-operand register
			_ENDIF				; Endif no operand in progress
		_ELSES				; Else not '0' to '9'
			_COND
				bit		#1<<14,SR	; Test the hex input flag
			_AND_IF	NZ			; If we're in hexadecimal input mode (due to a preceding '$')
				cmp.b	#'A',Rw
			_AND_IF	HS			; And the character is between 'A'
				cmp.b	#'F'+1,Rw
			_AND_IF	LO			; and 'F'
				sub.b	#'A'-$A,Rw	; Convert 'A'-'F' to $A-$F
				jmp		FncPFX4		; Update the partial operand register
			_ELSES				; Else treat it as the first character of a two-character command
				; Check for an implied push-literal
				tst		SR
				_IF		L			; If there's an operand-in-progress
					DPUSH	Rop			; Push the operand now, to free up Rop for partial operator
					bic		#(1<<15)+(1<<14),SR	; Clear the operand-in-progress flag and the hex flag
				_ENDIF
				; Apply a simple hash function that minimises collisions for the first letter of
				; English words, while reducing it to 4 bits.
				and.b	#$1F,Rw		; Treat upper and lower case the same
				cmp.b	#'Q'&$1F,Rw
				_IF		HS			; If it's a 'Q' or greater
					sub.b	#'Q'-'I',Rw	; Map it to the letters begining with 'I'
				_ENDIF
				and.b	#$F,Rw		; Take the low 4 bits
				; Save the hashed first character in Rop
				mov		Rw,Rop
				bis		#1<<13,SR	; Set the operator-in-progress flag (1st char of 2-char command)
			_ENDIF				; Endif hex mode and 'A' to 'F'
		_ENDIF				; Endif '0' to '9'
		jmp		_NEXT


;-------------------------------------------------------------------------------
; The outer (packet) interpreter
; ACCEPT	( char -- )	; Accept the character in R8 into the line buffer.
; Trashes R8, R9, R10, and more if carriage return is processed.
; Implements backspace editing, Xon/Xoff and Escape, and calls the inner interpreter
; to interpret the line when a valid CRC12 and a carriage return are received.
; Outputs go to the default port (usually CMU, but SCU for the case of a BMU running wmonolith)
ACCEPT:
		mov		&ToIN,R9
		_CASE

		_OF_EQ_B	#$0A,R8			; Throw away any line feeds (after carriage returns from modbus)
		_ENDOF

		_OF_EQ_B	#$0D,R8			; Carriage return = end of packet
			cmp		#TIBEnd-1,R9	; Leave space for 2 EXIT commands
			_IF		LO				; If packet buffer not full
				mov.b	R8,0(R9)		; Store CR in the buffer; simplifies later logic
				bit.b	#bEchoResponses,&interpFlags
				; This is e.g. to allow SCU to see Twoth or Modbus responses from CMUs
				_IF		NZ				; If echoing responses
					mov.b	&TIB,R8				; Get first char of text input buffer
					xor.b	#'\\',R8			; R8 is 0 iff it was a slosh, starting a Twoth resp.
					_IF		NZ					; Otherwise,
						cmp.b	#':',&TIB			; Does it start with a colon? (modBus resp or cmd)
						_IF		EQ
							cmp		#TIB+13,R9			; Is the CR  at position 13?
							_IF		EQ					; If so, it's a Modbus response
								clr		R8					; Clear boolean R8 if so
							_ENDIF
						_ENDIF
					_ENDIF
					tst		R8						; Test our condition flag
					_IF		Z						; Zero indicates a response to be echoed
						; Echo the response
						push	R9
						push	R10
						push	R11
						mov		#TIB,R10			; Start of TIB to R10
						mov		R9,R11				; R11 has position of CR
						sub		#TIB-1,R11			; R11 has length including CR
						call	#TxBytes			; Send the response packet (ptr R10 length R11)
						cmp.b	#':',&TIB			; If it started with a colon (modbus)
						_IF		EQ
							mov.b	#$0A,R8				; Send a line-feed
							call	#TxByte
						_ENDIF
						pop		R11
						pop		R10
						pop		R9
					_ENDIF					; Endif copying this response
				_ENDIF					; Endif bEchoResponses
				bit.b	#bErrorChecking,&interpFlags
				_IF		NZ				; If error checking
					cmp.b	#':',&TIB
					_IF		NE				; And if not a modbus packet (starts with colon)
						mov.b	-2(R9),R10		; Get the two CRC12 bytes from the packet into R10. LSB
						mov.b	-1(R9),R8		; MSB
						swpb	R8
						or_w	R8,R10
						mov		&priorRxCksum,R8 ; Get the calculated CRC12 from 2 bytes back
						inv		R8				; Invert it
						push	R9				; Save the command buffer pointer
							call	#MakeCrc12Printable	; Convert to two printable-ASCII in R8. Trash R9
							cmp		R8,R10			; Compare calculated CRC12 with received CRC12
							push	SR				; Save the Z flag
							mov		&errorRatio,R9
							mov		&errorRatio+2,R10
							call	#UpdErrorRatio	; Update the error ratio. Trashes R8.
							mov		R9,&errorRatio
							mov		R10,&errorRatio+2
							pop		SR				; Restore the Z flag
						pop		R9				; Restore the command buffer pointer
						_IF		EQ				; And if CRC12 is correct
							decd	R9				; Prepare to overwrite CRC12 with EXIT commands
							cmp		#TIB,R9			; Handle case of empty packet with no CRC12
							_IF		LO
								mov		#TIB,R9
							_ENDIF
					_END_PRIOR_IF			; End if not modbus
				_END_PRIOR_IF			; End if error checking
							; We get here when not-error checking or a modbus packet or a correct CRC12
							mov.b	#EXIT,0(R9) 	; Overwrite CRC12 LSB or CR with EXIT command
							mov.b	#EXIT,1(R9) 	; Overwrite CRC12 MSB or char after CR with EXIT cmd
							; The second EXIT is in case the first gets treated as the second char
							; of a two char command, in a badly formed packet. e.g. if last char is R.
							bit.b	#bDontInterpret,&interpFlags
							_IF		Z				; If the dont-interpret flag is clear
								mov		#TIB,Rip		; Interpret the packet as command characters
								call	#_ENTER
								bic.b	#bModbusOutput,&interpFlags	; Clear the modbus output mode flag
							_ENDIF					; End if dont-interpret flag is clear
						_ENDIF					; End if good CRC12
			_ENDIF					; End if packet buffer not full
			mov		#TIB,&ToIN		; Initialise packet buffer pointer
			mov		#InitialCrc12,&rxCksum	; Initialise the CRC12
		_ENDOF					; End of carriage return

		_OF_EQ_B	#$08,R8		; Backspace editing
			cmp		#TIBEnd-1,R9
			_IF		LO				; If packet buffer not full
				dec		R9				; Decrement the pointer, but
				cmp		#TIB,R9
				_IF		LO				; If that takes us back before the start of the packet
					inc		R9				; Undo the decrement
				_ELSE					; Else Wind the CRC12 back to its previous value
					mov	&prevRxCksum,&rxCksum ; Note: This only works for a maximum of two backspaces
					mov	&priorRxCksum,&prevRxCksum ; and only if they are followed by the same
					mov	#InitialCrc12,&priorRxCksum ; number of printable ASCII characters.
				_ENDIF
				mov		R9,&ToIN
			_ENDIF					; Endif packet buffer not full
		_ENDOF					; EndOf backspace

		_OF_EQ_B	#$11,R8		; XON (ctrl-Q) to exit no-echo mode
			cmp.b	#255,&ID					; If we're not a BMU
			_IF		NE
				bic.b	#bDontEcho,&interpFlags ; Clear the don't-echo flag
			_ENDIF
		_ENDOF					; EndOf XON

		_OF_EQ_B	#$13,R8		; XOFF (ctrl-S) to enter no-echo mode
			bit.b	#bDontInterpret,&interpFlags
			_IF		Z				; If the dont-interpret flag is clear
				bis.b	#bDontEcho,&interpFlags ; Set the don't-echo flag
			_ENDIF
		_ENDOF					; EndOf XOFF

		_OF_EQ_B	#$1B,R8		; Escape to exit eXclusive mode (single CMU interaction)
			bic.b	#bDontInterpret,&interpFlags ; Clear the don't-interpret flag
		_ENDOF					; EndOf escape

		; Default case, if not CR, BS, XON, XOFF or ESC
			cmp		#TIBEnd-1,R9
			_IF		LO				; If packet buffer not full
				mov.b	R8,0(R9)		; Write the byte to the buffer
				inc		&ToIN			; Increment the pointer
				mov		&prevRxCksum,&priorRxCksum ; Keep CRC12 from 2 bytes back, for when we hit a CR.
				mov		&rxCksum,R9		; Get the CRC12
				mov		R9,&prevRxCksum	; Keep the CRC12 from 1 byte back
				call	#UpdateCrc12	; Update the CRC12 in R9 with the data in R8. Trashes R8, R10
				mov		R9,&rxCksum		; Save the updated CRC12
			_ENDIF					; Endif packet buffer not full

		_ENDCASE				; End Case char

		ret


