;
; Miscellaneous common functions
;

;
; Transmit the present checksum if checksumming is on. Clear checksum.
;
; This is not in InterruptComms.s43 because it is used by both the Monitor and TestICal
; But the TestICal does not use serialio. It has its own version of TxByteCk.
;
TxCksum:
			bit.b		#bChecksumming,&interpFlags
			_IF		_NZ
				mov.b	&txCksum,R8
				cmp.b	#$20,R8				; If the checksum would be a control character and therefore
				_IF		_LO					; possibly confused with CR, BS, ESC, or BSL-password chars
					mov.b	#' ',R8				; then send a space character (no-op), which
					call 	#TxByteCk			; also updates the checksum to a non-control character.
					mov.b	&txCksum,R8 		; Reload the altered checksum.
				_ENDIF
				call 	#TxByteCk			; Send the checksum. Also updates TXCksum to 0
			_ENDIF
			clr.b	&txCksum			; Needed for when checksumming is off
			ret


TxEndOfPacket:
			call	#TxCksum				; Transmit checksum if required, then clear checksum.
			mov		#'\r',R8				; Transmit a carriage return.
			br		#TxByte					; Tail-call TxByte and return
;			ret

;-------------------------------------------------------------------------------
; TxString	; Transmit counted string pointed to by R10 while not accumulating checksum.
			; Warning: A zero length string will be treated as 256 bytes long.
			; If necessary, wait until the queue is not full.
			; Trashes R8 thru R11.
;-------------------------------------------------------------------------------

TxString: _DOb	@R10+,R11
TxBytes:								; Alternative entry point with length in R11
				mov.b	@R10+,R8
				call	#TxByte
			_LOOPb	R11
			ret

;-------------------------------------------------------------------------------
; TxStringCk ; Transmit counted string pointed to by R10 while accumulating checksum.
			; Warning: A zero length string will be treated as 256 bytes long.
			; If necessary, wait until the queue is not full.
			; Trashes R8 thru R11.
;-------------------------------------------------------------------------------

TxStringCk: _DOb	@R10+,R11
				mov.b	@R10+,R8
				call	#TxByteCk
			_LOOPb	R11
			ret

			EVEN



