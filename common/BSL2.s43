; ----------------------------------------------------------------------------
; The bootstrap loader (BSL2)
; ----------------------------------------------------------------------------
; This file is included by monitor.s43 and TestICal.s43 and other main-flash programs.
; This code will be assembled into the last main-flash segment which starts at $FC00.
; It is called directly on reset.
; It contains the reset and interrupt vectors which point to fixed locations at the end of the
; second-last main-flash segment.
; It is defined as a macro because TestICal needs to include it _twice_.
; Once at $FC00-$FFFF as expected, for when TestICal is JTAG-loaded,
; and elsewhere in main-flash for when TestICal is bootstrap-loaded,
; so that it can then be copied to $FC00-$FFFF by a 'b' command (updateBSL2).
; It's called "BSL2" because there was an earlier version BSL that we miraculously fitted in
; the 256 bytes of info-flash, along with the calibration data. The two BSLs coexisted for a time.

ScuBaudRate	EQU		9600			; SCU serial comms rate in bits per second
ScuBitCycles EQU	(MClock+BaudRate/2)/BaudRate	; CPU clock cycles per SCU bit
ScuBitCyc1_5 EQU	(MClock*3+BaudRate)/(BaudRate*2) ; CPU clock cycles per SCU 1.5 bits
MckPerFTGck	EQU		(MClock+165000)/330000	; MCLK cycles per Flash Timing Generator cycle

#define		Rcksum	R14				// Register holding the 8-bit XOR checksum during bootstrap-loading

; Fixed entry points to BSL2
jBSL: 		br		#BSL-jBSL+BSL2_START		; Addresses of branches or calls within the BSL must be
jBSLErase:	br		#BSLErase-jBSL+BSL2_START	; adjusted so that, in both active and inactive copies,
jReadByte:	br		#ReadByte-jBSL+BSL2_START	; they are correct for the active copy, since a 'b'
jWriteByte:	br		#WriteByte-jBSL+BSL2_START	; command will copy the inactive to become the active.
jBslRevision: br	#BslRevision-jBSL+BSL2_START ; Return the BSL2 revision
jWriteBreak: br		#WriteBreak-jBSL+BSL2_START	; Send a break via the UART. Used by the 'Br' command
jErrorFlash	br		#ErrorFlash-jBSL+BSL2_START	; Flash error LED in pattern given in R8, infinite loop

BSL:		; Initialisation
	mov.w	#WDTPW+WDTHOLD,&WDTCTL		; Stop the Watchdog Timer
	mov		#InitSP,SP		; Initialise the stack pointer ($300 or $400)
	; XCAP = 11, Choose 12.5 pF
	; LFXT1Sx = 00, Watch crystal (32768 kHz)
	mov.b	#XCAP1 | XCAP0, &BCSCTL3
	; SELM = 0, DCO for MCLK
	; DIVM = 0, Divide by 1 for MCLK
	; SELS = 0, DCO for SMCLK
	; DIVS = 0, Divide by 1 for SMCLK
	mov.b	#0, &BCSCTL2
	; XT2OFF = 1, Turn off non-existent oscillator. Defaults to 1 on reset
	; XTS = 0, Low frequency mode
	; DIVAx = 11, for ACLK = XIN div by 8
	; RSEL = $A, Range select guess for 3.6864 MHz
	mov.b	#XT2OFF | DIVA_3 | $A, &BCSCTL1
	; DCO = 0, Frequency select guess for 3.6864 MHz
	; MOD = 4, Modulation select guess for 3.6864 MHz
	mov.b	#$80,&DCOCTL	; Initial guess DCO step + modulation for 3.6864 MHz
	; TASSSEL = 10, Use SMCLK for timer A source
	; ID = 0, Divide by 1
	; MC = 10, Continuous count mode
	; TAIE = 0, No overflow interrupt
	mov		#TASSEL_2 + LOG2(SMckPerTAck)*ID_1 + MC_2, &TA0CTL ; Used for FLL as well as comms
	; CM = 01, Capture on rising edge
	; CCIS = 01, Capture input = CCI0B
	; SCS = 1, synchronous capture
	; CAP = 1, Capture mode
	; CCIE = 1, enable interrupts
	mov		#CM0 | CCIS0 | SCS | CAP | CCIE, &TA0CCTL0

	; For CMUs only, initialise timer A1 to generate the 57.6 kHz carrier for infrared transmission.
	; BMUs don't have IR, and use TA1 for measurement and for comms on the charger port.
	; Initialised in the main program.
	cmp.b	#255,&infoID
	_IF		NE				; If we're not a BMU
		; Use TA1 and TA1CCR0/TA1CCR1 to generate the 57.6 kHz clock on P2.1 and P2.2 (TA1.1)
		; TASSSEL = 10, Use SMCLK for timer A source
		; ID = 0, Divide by 1
		; MC = 01, Up mode, the counter counts to TACCR0
		; TAIE = 0, No overflow interrupt
		mov		#TASSEL_2 + ID_0 + MC_1, &TA1CTL
		; Output mode 3 = set/reset: set on EQU1, reset on EQU0
		mov		#OUTMOD_3, &TA1CCTL1
		mov		#(3686400/57600)-1, &TA1CCR0 ; Sets period: want /64 (3,686,400/57,600)
		mov		#32, &TA1CCR1				; Sets duty cycle (here 50%)
		bis.b	#TxMiChg_57k6B|TxMiChg2_RlyP_57k6A,&P2SEL	; Set P2.1 and P2.2 as TA1.1
		bis.b	#TxMiChg_57k6B|TxMiChg2_RlyP_57k6A,&P2DIR	; and as an output
	_ENDIF

	; Initialise the UART
	bis.b	#UCSWRST,&UCA0CTL1			; Need while initialising other USCI registers
;	mov.b	#0,&UCA0CTL0			 	; UART mode, 8 bits, 1 stop bit, no parity
	; Above not needed since UCA0CTL0 defaults to 0
	mov.b	#UCSWRST | UCSSEL_2 ,&UCA0CTL1 ; Use SMCLK
	mov.b	#(MClock/9600/16)&$FF,&UCA0BR0 		; Set for 9600 b/s
	mov.b	#(MClock/9600/16)/256,&UCA0BR1
	mov.b	#UCOS16, &UCA0MCTL			; 16x oversampling mode
	bis.b	#TxPl|Rx,&P1SEL				; Select the UART functions
	bis.b	#TxPl|Rx,&P1SEL2
	bic.b	#UCSWRST,&UCA0CTL1			; No longer resetting UCSI, clear to run
;	bic.b	#UCA0RXIE, &IE2				; Disable UART RX interrupts

	; Stabilise ACLK, enable interrupts, stabilise the FLL and hence the DCO and MCLK
	_FOR		#0,R8						; Allow time for the XTAL oscillator and hence ACLK to stabilise
	_NEXT_DEC	R8							;	before enabling FLL interrupts
	clr		&measureCount				; Initialise MeasureCount which is incremented by FLL
	clr		&oldMeasureCount			; Ensure oldMeasureCount is initially the same as measureCount
	clr		&oldRtcMeasCnt				; Ensure RtcMeasCount has low 12 bits zero and high 4 bits
										;	initially the same as those of measureCount
	eint								; Enable general interrupts so the FLL can do its job
	_FOR		#0,R8						; Allow time for FFL interrupts to tune the DCO and hence MCLK
	_NEXT_DEC	R8							;	before interrupts get disabled in ReadByte

	; Initialise port 1
	mov.b	#TxPl,&P1OUT				; Set Txs to idle state, Vref output off
	bis.b	#Piezo|TxPl|VrefP,&P1DIR 	; Set Piezo, TxPl and VrefP as outputs
	; Don't change the contactor port (port 3 of a BMU) or you might cut off your own power.

	; Initialise the interpreter flags
	clr.b	&interpFlags				; The bDontEcho bit is read by the BSL in some modes

	; We've been reset, so if we're not a BMU, send a break to reset the next guy
	; This doesn't result in the BMU being reset, because a BMU is only reset by
	; a break on its SCU input, not its CMU input.
	; We no longer reset the CMUs on every BMU reset, to preserve the backed-up SoC in CMU 1.
	; See the 'Z' and 'G' commands.
	; If you need to reset the CMUs, send a 'Br' command to the BMU.
	cmp.b	#255,&infoID
	_IF		NE				; If we're not a BMU
		call	#WriteBreak-jBSL+BSL2_START	; Send a 27 ms break
	_ENDIF

	ClearWatchdog			; Clear and restart the Watchdog Timer (32k)

	_REPEAT					; Main loop
		; Log the reason for the reset, as the contents of IFG1.
		; $08 = RST pin (break), $04 = power on, $02 = osc fault (not a reset), $01 = watchdog,
		; $00 = bad flash key, SFR instruction fetch or JTAG reset.
		; Some MSP430 devices also have $80 = USART TX interrupt flag, $40 = USART RX interrupt flag,
		; but not the G2553. Also $10 is NMIIFG, but we don't enable NMI.
		; We want to use some bit, or combination of bits, in this register, to represent
		; a "BSL reset". We tried using the apparently-unused bit with mask $20, but strange things
		; happened. We also tried using the combination of RST-pin and Vcc-power-on, but this now
		; happens since we added a capacitor (C3) on the RST pin. So now we use the combination of
		; the RST pin bit and the watchdog bit.
BSLFG	EQU		WDTIFG|RSTIFG		; Use these two bits in IFG1 to indicate a bootstrap-load "reset".

		mov		&resetCounter,R8
		and		#$0F,R8
		mov.b	&IFG1,resetBuffer(R8)
		inc		&resetCounter

		; If this was a successful bootstrap-load then clear the watchdog flag
		mov.b	&IFG1,R8
		and.b	#BSLFG,R8
		cmp.b	#BSLFG,R8
		_IF 	EQ
			bic.b	#WDTIFG,&IFG1
		_ENDIF

		; Unfortunately there's no way to tell a JTAG reset from a non-watchdog abnormal reset, namely
		; a flash key violation or an instruction fetch in the range $0 to $1FF (special function regs).
		; So when JTAG debuging we need to fake a normal reset here.
#if 1	// Set to 1 only when JTAG debugging
#message "Warning: BSL2 is set to ignore non-watchdog abnormal resets."
		bit.b	#WDTIFG|PORIFG|RSTIFG|BSLFG,&IFG1	; Test for watchdog or normal reset or bootstrap-load
		_IF		Z				; If it's a non-watchdog abnormal reset (may only be a JTAG reset)
			bis.b	#RSTIFG,&IFG1	; Fake a /RST pin reset for the code below
		_ENDIF
#endif
		; Check for abnormal reset (watchdog, bad flash key, SFR instr fetch or JTAG reset)
		; or main program not present.
		_COND					; Begin a short-circuit conditional
			bit.b	#PORIFG|RSTIFG|BSLFG,&IFG1 ; Test for Vcc power-up or /RST pin pulsed low or BSL
			clr.b	&IFG1			; Clear those bits ready for next time
		_OR_ELSE	Z			; If not Vcc power-up and not /RST pin pulsed low and not BSL, or
			cmp.b	#$AA,&ProgPresence ; Test for presence of main program.
		_OR_IFS		NE			; Or If no main program
			mov.b	#WDTIFG,&IFG1	; Set watchdog int flag so we won't call jInterpretInit
		_ENDIF					; End short circuit conditional

		; Initialise main program, if allowed
		bit.b	#WDTIFG, &IFG1
		_IF		Z
			call	#jInterpretInit
		_ENDIF

		; Password checking loop
		mov		#4,&bsl2state	; Initialise FSM: waiting for first password character
		_REPEAT
			call	#ReadByte-jBSL+BSL2_START	; Wait for a byte from the appropriate port
			; Pass byte in R8 on to main program, if allowed
			call	#TestNoInterp2-jBSL+BSL2_START	; Adjusted for relocation

			; Password-checking finite-state-machine (FSM)
			; After decrementing bsl2state below, 3 = waiting for 1st pwd char,
			; 2 = waiting for 2nd pwd char, 1 = waiting for 3rd pwd char,
			; 0 = waiting for last pwd char and erase if received,
			;
			dec		&bsl2state
			; Check for a continuing password match
			_IF		NZ					; If not the final password character
				mov		&bsl2state,R9		; Passwords are $05 $04 $03 $01-or-$02
				add		#2,R9				; Expected password char is &bsl2state plus 2
				cmp.b	R9,R8				; Check for a match
				_IF		NE					; If not a match
					mov		#4,&bsl2state		; Go back to waiting for first password character
				_ENDIF
				clrz						; Clear the Z flag so we don't leave the pwd checking loop
			_ELSE						; Else the final character
				; No matter what happens now, we want to begin a new password match after we return
				mov		#4,&bsl2state		; Go back to waiting for first password character
				_CASE
				_OF_EQ_B	#2,R8				; If matched 05 04 03 already, now 02 (rev61 password)
					; Start a fake download, reading and discarding a complete download worth of bytes
					_FOR		#REV61_BSL2_ST-REV61_PROG_ST,R12 ; Set count of bytes to ignore
						call	#ReadByte-jBSL+BSL2_START	; Wait for a byte from the appropriate port
						call	#WriteByte-jBSL+BSL2_START	; Echo it to the CMU port
					_NEXT_DEC 	R12
					; The last byte read could look like a command char. Ensure it doesn't.
					mov.b	#2,R8				; Restore last password character, ignored by ACCEPT
					clrz						; Clear Z flag so we don't leave password checking loop
				_ENDOF						; End of fake download case
				_OF_EQ_B	#1,R8				; If matched complete real download pwd 05 04 03 01
BSLErase:			; Erase segments of main flash used for the main program, not the BSL.
					; Reflash tool will need to delay at least number_of_segments * 16 ms
					; = number_of_KiB * 32 ms before sending the first byte to program.

					; Don't need to disable interrupts generally during flash operations,
					; because the flash controller does it as needed. So we can have FLL interrupts.
					; But we must disable all other interrupts (timer and UART) because we are about
					; to erase their service routines.
					bic.b 	#UCA0TXIE|UCA0RXIE,&IE2	; Disable UART transmit and receive interrupts
					bic		#TAIE,&TA0CTL			; Disable Timer A0 overflow interrupts
					; bic.b	#CCIE,&TA0CCTL0 		; Don't disable FLL interrupts
					bic		#CCIE,&TA0CCTL1			; Disable Timer A0 CCR1 interrupts
					bic		#CCIE,&TA0CCTL2			; Disable Timer A0 CCR2 interrupts
					bic		#TAIE,&TA1CTL			; Disable Timer A1 overflow interrupts
					bic		#CCIE,&TA1CCTL0			; Disable Timer A1 CCR0 interrupts
					bic		#CCIE,&TA1CCTL1			; Disable Timer A1 CCR1 interrupts
					bic		#CCIE,&TA1CCTL2			; Disable Timer A1 CCR2 interrupts

					mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Stop Watchdog Timer
					mov		#FWKEY+FSSEL_1+FN0*(MckPerFTGck-1),&FCTL2 ; Divides MCLK by FN+1
					mov		#FWKEY,&FCTL3	; Clear LOCK, but keep segment A safe (no change)
					mov		#PROG_START_FOR_BSL,R12	; Start of program image in main flash

					; Erase flash
					mov		R12,R11			; R12 contains start of program image in main flash
					_REPEAT
						mov		#FWKEY+ERASE,&FCTL1	; Enable single segment erase
						rra		@R11			; Dummy write to erase segment. Takes 16 milliseconds.
						add		#$200,R11		; Increment to next segment
						cmp		#BSL2_START,R11
					_UNTIL	HS				; Stop when we get to the start of the BSL

					mov		#FWKEY+WRT,&FCTL1 ; Enable write (can leave enabled)
					clr.b	Rcksum			; Initialise the checksum to 0
					bis.b	#WDTIFG,&IFG1	; Assume a bad checksum, clear on good checksum.

					; Program flash using received bytes
					_REPEAT					; Programming loop
						call	#ReadByte-jBSL+BSL2_START	; Wait for a byte from the appropriate port
						call	#WriteByte-jBSL+BSL2_START	; Echo it to the CMU port
						mov.b	R8,0(R12)		; Program it. Takes 90 microseconds. No problem for FLL
						xor.b	R8,Rcksum		; Include in check-XOR
						inc		R12
						cmp		#BSL2_START,R12
					_UNTIL	HS				; Repeat until we get to the start of the BSL

					mov		#FWKEY,&FCTL1	; Done. Clear WRT
					mov		#FWKEY+LOCK,&FCTL3 ; Set LOCK; don't change LOCKA
					tst.b	Rcksum			; Check the checksum
					_IF		Z		; If good checksum
						mov.b	#BSLFG,&IFG1	; Indicate a successful BSL "reset"
						; so InterpretInit and InterpretByte will be called, and so the contactor port
						; will not be cleared.
						; And Z-flag set will cause us to leave the password checking loop below
					_ENDIF
					; Else bad checksum, so leave the no-interpret flag (watchdog flag) set,
					; and we won't leave the password checking loop.
				_ENDOF
					; Otherwise the last password byte didn't match either trunk or rev61
					clrz					; Clear Z flag so we don't leave the password checking loop
				_ENDCASE				; End of final character cases
			_ENDIF					; End else the final password character
		_UNTIL	Z				; Until successfully programmed
	_FOREVER					; Go back to normal operation as if reset (main loop)
	; end FSM code


; Call jInterpretByte, if it's safe to do so.
TestNoInterp2:
	bit.b	#WDTIFG,&IFG1	; Test no-interpret bit, due to watchdog, cksum error or programming
	_IF		Z				; If we're interpreting
		tst.b	R8
		_IF		L				; If data is a status byte (bit 7 set)
			mov.b	#$C1,R8			; Send status with comms error bit and bad check bit
									; $C1 to identify TestICal here, $C0 for BSL2 below
		_ENDIF

		; Echo the character if required
		_COND							; Begin short circuit conditional
			cmp.b		#$11,R8
		_OR_ELSE	EQ					; If it's an XON (ctrl-Q) character Or Else
			bit.b	#bDontEcho,&interpFlags
		_OR_IFS		Z					; Or If the dont-echo flag is clear
			call	#WriteByte-jBSL+BSL2_START	; Echo. Call address adjusted for relocation
		_ENDIF

		; We are about to jump to jInterpretByte. In case the flash is corrupted by a
		; partial download, set the watchdog timer to the shortest interval, 64 cycles
		; InterpretByte should set it back to the longest interval, 32k cycles
		mov.w	#WDTPW+WDTCNTCL+WDTIS0+WDTIS1,&WDTCTL ; Clear and enable Watchdog Timer

		; Tail-call InterpretByte in main flash. If you change this to a proper call, you also
		; need to change InterpretByte in TestICal to look one level deeper on the stack
		; when checking if this is an init call.
		; It must preserve at least R8 and bsl2state.
		; We get there via the PROG_START-independent vector "jInterpretByte".
		br		#jInterpretByte	; Tail call jInterpretByte
		; ret					; Effective ret to BSL2 init or main loop due to tail-call above
	_ELSE					; Else not interpreting (and not programming)
		; Toggle the error LED, and set the comms error bit and a bad check bit on any passing
		; status bytes, since we are not calling the main program.
		ErrLedToggle
		tst.b	R8				; Test the character
		_IF		L				; If the character is a status byte (bit 7 set)
			mov.b	#$C0,R8			; Send status with comms error and bad check bit, $C0
									; $C0 to identify BSL2 here, $C1 for TestICal above
		_ENDIF
		call	#WriteByte-jBSL+BSL2_START	; Echo. Call address adjusted for relocation
	_ENDIF					; End if interpreting
	ret						; Return to BSL2 init or main loop


; ReadByte ( regs: -- R8 R9 R10 R11 )
; Reads a byte from the CMU port if we're a CMU, or the SCU port if we're a BMU, to R8.
; Trashes R9 R10 R11.
;
ReadByte:
	cmp.b	#255,&infoID		; Check our ID
	_IF		NE					; If we're a CMU
		; Wait for a byte from the CMU port -- Uses a UART, but without interrupts
		mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
		_REPEAT						; Loop
			bit.b	#UCA0RXIFG,&IFG2
		_UNTIL	NZ					; Until byte received
		mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and enable the Watchdog Timer
		mov.b	&UCA0RXBUF,R8		; Return the received byte
	_ELSE						; Else we're a BMU
		; Wait for a byte from the SCU port -- Uses bit sniffing with timed busy-wait loops
		push	SR				; Save the interrupt state
		dint					; Disable interrupts (FLL and comms) to guarantee timings below
		mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
		_REPEAT						; Numbers in parentheses are numbers of cycles (timed waits)
			bit.b	#UCA0RXIFG,&IFG2	; (4 CG)
			_IF		NZ					; (2) If there's a byte from the CMU port
				bit		#WRT,&FCTL1
				_IF		Z					; And if we're not writing to flash
					mov.b	&UCA0RXBUF,R8
					call 	#WriteScuByte-jBSL+BSL2_START ; Send the byte to the SCU port
				_ENDIF
			_ENDIF
			bit.b	#RxScu,&ScuPortIN ; (4 CG) Start bit on SCU port?
		_UNTIL	Z					; (2) Loop until 0 (start bit)
		; The loop above takes 12 cycles so on average we will have missed the start bit by
									; (6) cycles
		mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; (5) Clear and enable the Watchdog Timer

		; Pad out the average delay between starting edge of start bit
		; and sampling of first bit below to ~ 1.5 bittimes
		mov.b	#(ScuBitCyc1_5-20+1)/3,R11 ; (2) Loop count for waitMid delay loop
		_REPEAT
			dec		R11				; (1) Delay loop
		_UNTIL	Z					; (2)

		mov		#8,R10			; (1) Bit count
		_REPEAT
			bit.b	#RxScu,&ScuPortIN ; (4 CG) Sampled bit to carry
			rrc.b	R8				; (1) Store received bit

			mov.b	#(ScuBitCycles-10+1)/3,R11 ; (2) Pad RX bit loop out to one bit time
			_REPEAT
				dec		R11				; (1) Delay loop
			_UNTIL	Z					; (2)
			dec		R10				; (1) All bits RXed?
		_UNTIL	Z					; (2) Sample next bit

		pop		SR					; (2) Restore the interrupt state
	_ENDIF						; End else we're a BMU
	ret							; (2) Return from ReadByte

; WriteBreak ( R9 R10 -- R9 R10 R11 )
; Send a 27 ms break on the CMU serial output. R9 must be zero and R10 must be $FF.
; Trashes R9 R10 R11.
WriteBreak:
	mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
	mov.b	#(MClock/9600/16*256/9+1)&$FF,&UCA0BR0 ; Slow baud rate to generate a 27 ms break,
	mov.b	#(MClock/9600/16*256/9+1)/256,&UCA0BR1 ; simulating the old 256 bits of 9600 b/s
	; Sending 26 consecutive UART breaks at 9600 b/s didn't work. It put an idle bit between them!
	mov.b	#0,&UCA0TXBUF		; Send all zero data bits
	_REPEAT						; Wait until finished sending
		bit.b	#UCBUSY,&UCA0STAT
	_UNTIL	Z
	mov.b	#(MClock/9600/16)&$FF,&UCA0BR0 ; Restore to 9600 b/s
	mov.b	#(MClock/9600/16)/256,&UCA0BR1
	mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and enable the Watchdog Timer
	ret

; WriteByte ( R8 -- R9 R11 )
; Write the low byte of R8 to CMU serial output.
; Trashes R9 R11. Preserves R8 R10.
WriteByte:
	mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
	mov.b	R8,&UCA0TXBUF		; Send byte
	_REPEAT						; Loop
		cmp.b	#255,&infoID		; Check our ID
		_IF		EQ					; If we're a BMU
			bit.b	#UCA0RXIFG,&IFG2
			_IF		NZ					; If there's a byte from the CMU port
				bit		#WRT,&FCTL1
				_IF		Z					; And if we're not writing to flash
					push	R8					; Preserve R8
					mov.b	&UCA0RXBUF,R8		; Get CMU byte
					call 	#WriteScuByte-jBSL+BSL2_START ; Send the byte to the SCU port
					pop		R8					; Restore R8
				_ENDIF
			_ENDIF
		_ENDIF
		bit.b	#UCA0TXIFG,&IFG2
	_UNTIL	NZ					; Until byte sent
	mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and enable the Watchdog Timer
	ret					; Return from WriteByte


; WriteScuByte ( R8 -- R9 R11 )
; Write the low byte of R8 to the SCU output (BMU only) -- Uses bit banging with timed busy-wait loops
; Trashes R9 R11. Preserves R8 R10.
WriteScuByte:
			push	R10
			clr		R11
			mov		R8,R9			; Allow R8 to be preserved for password compare

			mov.b	#9,R10			; Loop counter, 1 start + 8 data (decrements to -1)
			rla		R9				; Add the start bit
			bis		#1<<9,R9		; Add the stop bit
			push	SR
			dint

			_REPEAT					; (Number of cycles)
				rra		R9				; (1) Next bit to C.
				_IF		C				; (2) If carry is set
					bic.b	#TxMiScu,&ScuPortOUT ; (5) Clear TxMiScu
				_ELSE							(2)
					bis.b	#TxMiScu,&ScuPortOUT ; (alt 5) Set TxMiScu
					jmp		$+2					 ; (alt 2)
				_ENDIF
				mov.b	#(ScuBitCycles-15+1)/3,R11 ; (2) Set delay counter to pad out to one bit time
				_REPEAT
					dec		R11				; [1n]
				_UNTIL	Z					; [2n]

				dec		R10				; (1) Decrement the bit counter
			_UNTIL	NC				; (2) Loop until -1
			; To ensure the stop bit has sufficient duration we rely in the fact that
			; calls to WriteScuByte must be at least 2 byte-times apart
			; to allow any preceding CMU's BSL time to both read and echo the byte.

			pop		SR
			pop		R10
			ret


BslRevision:
	mov		#BSL_REV,R8			; Return the SVN revision for this file
	ret


; ----------------------------------------------------------------------------
; ErrorFlash
; Takes a 16 bit pattern in R8 and repeatedly flashes the error LED in that pattern, MSbit first,
; preceded by an ON start bit -- a 17 bit cycle, at 0.2 seconds per bit.
; It never returns -- infinite loop.
ErrorFlash:
		mov.w	#WDTPW+WDTHOLD,&WDTCTL		; Hold the Watchdog Timer (ReadByte may have reset it)
		; We could end up here after the DCO calibration has been set to $FFFF,
		;	so the processor could be running very fast.
		mov.b	#XT2OFF | DIVA_3 | $A, &BCSCTL1 ; Keep watch crystal ACLK working and guess DCO range and
		mov.b	#$80,&DCOCTL					; approximate DCO step and modulation for 3.6864 MHz
		bis.b	#ErrLed,&P2DIR					; Ensure ErrLed is set as an output
		_REPEAT
			mov		#16,R10						; Set bit loop counter to 16
			_REPEAT
				tst		R8
				_IF		NN							; If high bit is clear
					ErrLedOff
				_ELSE
					ErrLedOn
				_ENDIF
				_FOR		#4,R11					; 4 * 53 = 212 ms delay
					_FOR		#0,R12				; 65536 * 3 / 3.6864 MHz = 53 ms delay
					_NEXT_DEC	R12
				_NEXT_DEC	R11
				rla		R8						; Rotate left by shifting MSB left into carry
				adc		R8						; and then copying carry to the LSB
				dec		R10
			_UNTIL	Z						; Until R8 is back how it was
			; ErrLedOff						; Uncomment for caveman debugging
			; mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Uncomment for caveman debugging
			; ret							; Uncomment for caveman debugging
		_FOREVER					; Infinite loop


; Frequency locked loop interrupt service routine.
; Timer A0 is clocked at the DCO frequency. Its CCR0 captures the timer value on every rising edge of
; ACLK = watch_xtal / 8 = 4096 Hz, and generates this interrupt.
TA0FllIsr:
	push	R8				; (3)
	mov		&TA0CCR0,R8		; (3) Get the timer value captured at the latest ACLK rising edge.
							; 	We read this just before checking for a capture overflow.
							; 	We must not read it again, as another capture may happen in between.
	bit		#COV,&TA0CCTL0	; (4) Check for a capture overflow i.e. second capture before first was read
	_IF		NZ				; (2) If a capture overflow has occurred
		bic		#COV,&TA0CCTL0	; (4) Clear the capture overflow flag, but don't change the DCO setting
		mov		R8,&oldFllTime	; (4) Update the old captured timer value
	_ELSE					; (2) Else no overflow
		sub		&oldFllTime,R8	; (3) Subtract the timer value captured at prior ACLK rising edge from
								;  latest captured timer value to get MCLKs since prior ACLK rising edge
		; I don't understand why, but after interrupts have been disabled for a while, e.g. in the
		; bit-sniffing version of ReadByte used by the BSL or TestICal on a BMU, this routine
		; occasionally gets called twice with the same value in TACCR0. So we test for this below.
		_IF		Z				; (2) If the difference between new and old timer values is zero
			add		R8,&oldFllTime	; (4) Update the old captured timer value, but don't change the DCO
		_ELSE					; (2) Else a nonzero difference between old and new
			add		R8,&oldFllTime	; (4) Update the old captured timer value
			sub		#MClock/(32768/8),R8 ; (2) Expect 900. Calculate the error.
			rra		R8				; (1) Halve the error
			sub.b	R8,&DCOCTL		; (4) Fine adjust the DCO frequency using half the error
		_ENDIF
	_ENDIF
	inc		&measureCount	; (4) Increment counter used to initiate measurement
	pop		R8				; (2)
	reti					; (11 for call and return) Max total 45 cycles (5.0% of CPU))
	; Note: Using more registers to reduce RAM accesses won't save any cycles
	; unless a reg is dedicated to oldFllTime, because the push/pop of the reg costs 5 cycles
	; and changing a RAM access to a reg access only saves 2 cycles.
	; The two existing users of R15 (DoMeasurement and insulationTest)
	; could replace it with R13 (= Rthd), and push and pop R13.
	; It might be possible to move the "inc &measureCount" instruction out of the above and into
	; a timer overflow interrupt routine, which would only be called every 65,536 cycles,
	; instead of every 900 cycles like the above.


; Any free last-segment space is between here and the UART interrupt vectors
;freeSpaceBSL2	EQU		jBSL+$1EC - $		; Number of bytes spare in the BSL
freeSpaceBSL2	EQU		jBSL+($FFEC-BSL2_START) - $ ; Number of bytes spare in the BSL

; The end of the bootstrap loader (BSL2)
; -----------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Interrupt Vectors at the end of the last flash segment
;-------------------------------------------------------------------------------
		ORG		jBSL+($FFEC-BSL2_START)		; $FFEC, UART Vectors
		DW		jUCA0TxIsr		; UART transmit
		DW		jUCA0RxIsr		; UART receive

								; $FFF0, Timer A0 Vectors
		DW		jTA0TxRxIsr		; Combined CC1,2IFG (transmit/receive capture/compare) & TAIFG (oveflow)
		DW		TA0FllIsr-jBSL+BSL2_START; Timer A CC0IFG (freq lock loop). In BSL, not main prg
		DW		$FFFF, $FFFF	; FFF4, FFF6 unused.
								; $FFF8, Timer A1 Vectors
		DW		jTA1TxRxIsr		; Combined Timer A1 CC1,2IFG (transmit/receive capture/compare) & TAIFG (overflow)
		DW		jTA1MeasureIsr	; Timer A1 CC0IFG (BMU measurement compare)

								; $FFFC, Unused NMI vector location
BSL2presence	DB		$08				; No longer used. BSL1 used to check this before calling BSL2.
BSL2checksum	DB		$FF				; Placeholder for checksum added by LyteFlash or SendProg
		; The reset vector (at $FFFE) is set by the main program, but could be done here.

