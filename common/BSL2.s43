; ----------------------------------------------------------------------------
; The second bootstrap loader (BSL2)
;
; This file is included by monitor.s43 and TestICal.s43.
; This code will assemble into the last main-flash segment which starts at $FE00.
; It is called by BSL1 in info-flash.
; It contains the reset and interrupt vectors which point to fixed locations at the end of the
; second-last flash segment.

MClock2		EQU		4000000			; MCLK (CPU clock) frequency in hertz (=DCOCLK/2)
MckPerFTGck2	EQU		(MClock2+165000)/330000	; MCLK cycles per Flash Timing Generator cycle

#define		Rcksum	R14				// Register holding the 8-bit XOR checksum during bootstrap-loading

			ORG		$FE00			; Start of the last 512 byte flash segment
BSL2:
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart Watchdog Timer (32k)
			; Check to see if this is an init call (from BSL1)
			cmp		#infoInitRetAddr,0(SP)	; Is the call merely for initialisation?
			_IF		_EQ				; If for initialisation, initialise, and return
				call	#initBSL2
				ret						; Return to BSL1
			_ENDIF					; Endif call is for initialisation
			jmp		processByte2	; Skip over the init routine below


initBSL2:	; Initialisation
			; Log the reason for the reset, as the contents of IFG1.
			; $A = RST pin (break), $6 = power on, $3 = watchdog, $2 = other bad stuff or JTAG.
			; It's a shame there's no way to tell a JTAG reset from a non-watchdog abnormal reset, namely
			; a flash key violation or an instruction fetch in range $0 to $1FF (special function regs).

			mov			&resetCounter,R8
			and			#$0F,R8
			mov.b		&IFG1,resetBuffer(R8)
			inc			&resetCounter

mainLoop2:
			; Check for abnormal reset (watchdog, bad flash key, SFR instr fetch or JTAG reset)
			; or main program not present.
			; When JTAG debuging you need to write 4 or more to IFG1 ($0002) here, to fake a normal reset.
			cmp.b	#PORIFG,&IFG1	; Test for Vcc power-up or /RST pin pulsed low
			clr.b	&IFG1			; Clear those bits ready for next time
			_IF		_GE				; If Vcc power-up or /RST pin pulsed low
				cmp.b	#$AA,&ProgPresence ; Test for presence of main program.
				_IF		_NE				; If no main program
			_END_PRIOR_IF			; Endif Vcc power-up or /RST pin pulsed low
				mov.b	#WDTIFG,&IFG1	; Set watchdog int flag to indicate not to call jInterpretByte
				_ENDIF					; Endif no main program

			; Pass initialisation on to main program, if allowed
			clr.b	R8				; A null to pass to interpretByte (if allowed)
			call	#testNoInterp2
initRetAddr2:	; Used by the monitor or TestICal or other main-flash code
			; to tell if the interpretByte call is for initialisation
			; and hence if the byte in R8 should be echoed
			mov		#4,&bsl2state	; Initialise FSM: waiting for first password character

			ret						; Return
			; End of initBSL2


resetFSM2:	mov		#4,&bsl2state	; Initialise FSM: waiting for first password character
FSMloop2:
			ret
processByte2
			; Pass byte in R8 on to main program, if allowed
			call	#testNoInterp2

			; Password-checking finite-state-machine (FSM)
			; After decrementing bsl2state below, 3 = waiting for 1st pwd char,
			; 2 = waiting for 2nd pwd char, 1 = waiting for 3rd pwd char,
			; 0 = waiting for last pwd char and erase if received,
			; any negative value = program, no interpret
			;
			dec		&bsl2state
			jn		progByte2		; If state is negative, program, don't test for password etc.

			; Check for a continuing password match $07 $06 $05 $04
			mov		&bsl2state,R9
			bis.b	#4,R9			; Expected password character is equal to &bsl2state with bit 2 set
			cmp.b	R9,R8
			jne		resetFSM2
			tst		&bsl2state
			jnz		FSMloop2

			; Erase only those segments of main flash memory used for the main program, not the last.
			; Master will need to delay at least 7*16 ms = 112 ms before sending first byte to program.
			;
BSLErase2:
			dint					; The main-flash program has probably turned on interrupts
									; Can't risk an interrupt while the vectors are erased
			mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Stop Watchdog Timer
			mov		#FWKEY+FSSEL_1+FN0*(MckPerFTGck2-1),&FCTL2 ; Divides MCLK by FN+1
			mov		#FWKEY,&FCTL3	; Clear LOCK, but keep segment A safe (no change)

			mov		#PROG_START_FOR_BSL+$200,R12	; Start of program image in main flash + $200.
												; The +$200 saves a 2-word compare at the end
			; Erase
			mov		R12,R11			; R12 contains start of program image in main flash + $200
eraseLoop	mov		#FWKEY+ERASE,&FCTL1	; Enable single segment erase
			rra		-$200(R11)		; Dummy write: erase segment
			add		#$200,R11		; Increment to next segment
			jn		eraseLoop		; Stop when we wrap around to $0000

			mov		#FWKEY+WRT,&FCTL1 ; Enable write (can leave enabled; only write-block that can't be)
			clr.b	Rcksum			; Initialise the checksum to 0

			; Assume a bad checksum, clear on good checksum.
			; Also prevents interpreting till the end of flash programming
			bis.b	#WDTIFG,&IFG1 ; FIXME: MOVE ME EARLIER?
			jmp		FSMloop2		; Read first byte to program

			; Program (flash write) byte in R8
			;
progByte2	mov.b	R8,-$200(R12)	; Program it (takes 90 microseconds)
			xor.b	R8,Rcksum		; Include in check-XOR
			inc		R12
			jnz		FSMloop2		; Repeat until R12 wraps to zero

			mov		#FWKEY,&FCTL1	; Done. Clear WRT
			mov		#FWKEY+LOCK,&FCTL3 ; Set LOCK; don't change LOCKA
			tst.b	Rcksum			; Check the checksum
			jnz		resetFSM2		; If bad checksum, leave the no interpret flag set

			mov.b	#RSTIFG,&IFG1	; Good checksum, reset no interpret flag,
									;	set RST so BSL2 will call interpretByte
		; FIXME: need to call interpretByte with 00 for initialisation. Dave says may not want above
			jmp		mainLoop2		; Back to looking for password,
									; but first make init call to jInterpretByte

			; end FSM code

testNoInterp2:
			; FIXME! When we transition away from BSL1, we'll have to change the below test
			cmp		#waitingIDAddr,2(SP); Is the call to ReadByte from the waitingID call to ReadByte?
			jeq		retToBSL1			; If so, no echo, no interpret

			bit.b	#WDTIFG,&IFG1	; Test no-interpret bit, due to watchdog, cksum error or programming
			_IF		_Z
			call	#infoWriteByte	; Echo; interpretByte no longer does
				bis.b	#ACTLED,&P1OUT	; Turn off the (inverted) activity LED set in writeByte
			; We are about to jump to $FFF8 to interpretByte. In case the flash is corrupted by a
			; partial download, set the watchdog timer to the shortest interval, 64 cycles
			; InterpretByte should set it back to the longest interval, 32k cycles
			mov.w	#WDTPW+WDTCNTCL+WDTIS0+WDTIS1,&WDTCTL ; Clear and enable Watchdog Timer
			br		#jInterpretByte	; tail-call interpretByte in main flash
									; It must preserve at least R8 and bsl2state
									; Get there via the PROG_START independent vector
			; ret					; Effective ret to BSL1 due to tail-call above
			_ELSE
				; If we're not programming (bootstrap loading), set comms error bit and a bad check bit
				; on any passing status bytes, since we are not calling the main program
			tst		&bsl2state
				_IF		_NN				; If we're not programming (state not negative)
			tst.b	R8
					_IF		_L				; If data is a status byte (bit 7 set)
						mov.b	#$C0,R8			; Send status with comms error bit and bad check bit
					_ENDIF
				_ENDIF
				call	#infoWriteByte	; Echo; interpretByte no longer does
				bis.b	#ACTLED,&P1OUT	; Turn off the (inverted) activity LED set in writeByte
			_ENDIF
retToBSL1	ret						; Return to BSL1

			; Any free last segment space is between here and the timer-A interrupt vectors
freeSpaceBSL2	EQU		$FFF0 - $		; Number of bytes spare in the second BSL

; The end of the second bootstrap loader (BSL2)
; -----------------------------------------------------------------------------

;-------------------------------------------------------------------------------
; Interrupt Vectors at the end of the last flash segment
;-------------------------------------------------------------------------------

				ORG		$FFF0			; Timer A Vectors
				DW		jRX_TIOV_ISR	; Combined CC1IFG (receive capture/compare) & TAIFG (overflow)
				DW		jTX_ISR			; Timer A CC0IFG (transmit compare)

				ORG		$FFF8
				br		#BSL2			; Temporary so it still works with old BSL1

				ORG		$FFFC			; Unused NMI vector location
BSL2presence	DB		$08				; For BSL1 to check before calling BSL2
BSL2checksum	DB		$FF				; Placeholder for checksum added by BMUsend or SendProg
				; The reset vector (at $FFFE) is set differently by monitor and TestICal.
