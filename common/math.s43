;
; Mathematical functions used by all CMU software
; Use #include "../common/math.s43"
;

; UMStar -- Unsigned mixed multiply
; R8 * R9 -> R10:R9. Clears R11
;
; In ANS Forth: UM* ( u1 u2 -- ud )
; Multiply u1 by u2, giving the unsigned double-word product ud. All values and arithmetic are unsigned.
;
; Starts with 16 bit multiplicand in R8, multiplier in R9 and
; ends with 32 bit product in R10 (hi) and R9 (lo).
; Algorithm described in http://cs.hiram.edu/~walkerel/cs252/multiply.ppt
; 138 to 154 cycles
;
; UMStarPlus -- Unsigned mixed multiply and add. (Alternative entry point)
; R8 * R9 + R10 -> R10:R9. Clears R11
; This is the exact inverse of UMSlashMod below

UMStar:							; (4) Cycles required for Call
			clr		R10			; (1) Clear hi word of product-so-far
UMStarPlus:
			_FOR	#16,R11		; (2) Repeat 16 times
				bit		#1,R9		; (1) Test low bit of multiplier
				_IF		NZ			; (2) If low bit of multiplier is a 1
					add		R8,R10		; (1) Add multiplicand to product-hi
				_ENDIF				; (0) Endif
				rrc		R10			; (1) Shift product-hi (including carry) right
				rrc		R9			; (1) into product-lo and simultaneously shift multiplier right
			_NEXT_DEC R11		; (3) Decrement loop counter. Repeat until zero
			ret					; (3) Return from subroutine


; Mixed sign Mixed size multiply: signed R8 * unsigned R9 -> signed R10:R9
MMStar:
			tst		R8			; Check for negative operand
			_IF		NN
				call	#UMStar		; Two positive operands, just call UMStar
			_ELSE
				neg		R8			; Make operand positive
				call	#UMStar		; Do unsigned multiply
				inv		R9			; Invert 32-bit result
				inv		R10
				inc		R9			; Increment 32-bit result
				adc		R10
			_ENDIF
			ret

;
; Multiply two unsigned FixedPoint numbers, at least one of them in fixed 1.15 format, passed in
; R8 and R9. The product is returned as another fixed point number in R8, with the same fixed point
; format as the other operand.
; Examples: 1.15 x 1.15 -> 1.15, 1.15 x 16.0 -> 16.0, 12.2 x 1.15 -> 12.2
; Trashes R9, R10
Fx1_15UMul:
				call	#UMStar						; R10:R9 = R8 * R9
				; We have 2^15 times a real number times 2^n times a real number, resulting in
				; 2^(15+n) times a real product. We want the result to be 2^n times the real product,
				; so we need to shift the result 15 places to the right, equivalent to dividing by
				; 2^15, so we need rounding.
				add		#$4000,R9					; Add half the divisor for rounding
				adc		R10
				; Instead of shifting 15 bits right we shift 1 bit left and keep the high word only
				rla		R9							; Get MSB to carry (actually a shift or add to self)
				rlc		R10							; Double R10:R9, carry to LSB
				mov		R10,R8						; Return in R8
				ret


; UMSlashMod -- Unsigned mixed divide and modulo
; R10:R9 / R8 -> R9, remainder R10. Clears R11
;
; In ANS Forth: UM/MOD ( ud u1 -- u2 u3 )
; Divide ud by u1, giving the remainder u2 and the quotient u3.
; All values and arithmetic are unsigned. An ambiguous condition exists
; if u1 is zero or if the quotient lies outside the range of a single-word
; unsigned integer.
;
; In cases of overflow or div by zero we return a saturated $FFFF for the quotient
; and a remainder of $FFFF which cannot occur otherwise.
; Algorithm is from eForth by Bill Muench.
; It is essentially the reverse of the multiplication algorithm above.
; 172 to 204 cycles (excluding overflow or divide by zero)

UMSlashMod:						; (4) Cycles required for Call
			cmp		R8,R10		; (1) Test for overflow, including divide by zero
			_IF		LO			; (2) If no overflow, i.e. if dividend-hi less than divisor
				_FOR	#16,R11		; (2) Repeat 16 times
					_COND				; (0) Start a short-circuit conditional
						rla		R9			; (1) Shift quotient left, and simultaneously shift
						rlc		R10			; (1) dividend-lo into dividend-hi
					_OR_ELSE C			; (2) If carry, or else
						cmp		R8,R10		; (1) Test for remainder-so-far >= divisor
					_OR_IFS	HS			; (2) if no carry, but remainder-so-far >= divisor
						sub		R8,R10		; (1) Subtract divisor from remainder-so-far
						bis		#1,R9		; (1) Set low bit of quotient-so-far
					_ENDIF				; (0) End of short-circuit conditional
				_NEXT_DEC R11		; (3) Decrement loop counter. Repeat until zero
				ret					; (3) Return from subroutine
			_ENDIF				; (0) End If no overflow
			mov		#$FFFF,R9	; (1) Error exit if overflow or divide by zero
			mov		#$FFFF,R10	; (1) Return $FFFF for both quotient and remainder
			ret					; (3) Return from subroutine


#ifdef	MONOLITH
; Not the right place for these
; Update the RTC if necessary. Call at least every 15 seconds.
; Trashes R8, R9
UpdateRtc:
			mov		&measureCount,R8			; Get new count that is incremented 4096 times per sec
			and		#$F000,R8					; Keep only upper 4 bits
			mov		&oldRtcMeasCnt,R9			; Get old value of same
			mov		R8,&oldRtcMeasCnt			; Save new as old
			sub		R9,R8						; R8 = new - old
			_IF		Z							; If no difference
				ret									; then nothing to do; return
			_ENDIF
			; R8 has the difference between old and new counts in the upper nibble.
			; Need to shift R8 right logical 12 bits, to get the mumber of seconds to advance the
			; RTC by. Shift as 8 then 4. The and instruction above guarantees that the other 12 bits
			; of R8 were zero.
			swpb	R8							; Move top byte to lower byte
			rra4	R8							; Move second lowest nibble to lowest nibble
			; Fall through to BumpRtc

; Do not insert code here
; Bump the "real time clock" by R8 seconds. Callable as a function, but not currently used that way.
; Changes no registers
BumpRtc
			add		R8,&rtcSec		; Add to the seconds
			cmp		#60,&rtcSec		; Is it now >=60 seconds?
			_IF		GE
				sub		#60,&rtcSec	; Wrap seconds
				inc		&rtcMin		; Bump minutes
				cmp		#60,&rtcMin	; Now 60?
				_IF		EQ
					clr		&rtcMin		; Clear minutes
					inc		&rtcHour	; Bump hour
					cmp		#24,rtcHour	; Now 24?
					_IF		EQ
						clr		&rtcHour
						inc		&rtcDay		; Bump day of week
						cmp		#7,&rtcDay	; Now 7?
						_IF		EQ
							clr		&rtcDay		; Clear day of week
							; Allow to wrap around
						_ENDIF
					_ENDIF
				_ENDIF
			_ENDIF
			ret
#endif