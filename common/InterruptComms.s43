;*******************************************************************************
;	MSP430F20xx Software UART - Timer_A
;
;	Description: Use Timer_A CCR0 hardware output modes and SCCI data latch
;	to implement UART function @ 9600 baud. Software does not directly read and
;	write to Rx and Tx pins, instead proper use of output modes and SCCI data
;	latch are demonstrated. Use of these hardware features eliminates ISR
;	latency effects as hardware insures that output and input bit latching and
;	timing are perfectly synchronised with Timer_A regardless of other
;	software activity.
;	TACLK = SMCLK/4 = DCOCLK/8/4 = 250 kHz, MCLK = DCOCLK/2 = 4.00 MHz
;
;	September 2010
;	Based on code by:
;	M. Buccini / L. Westlund
;	Texas Instruments Inc.
;	October 2005
;*******************************************************************************

#define		ALL_TO_ALL 0	// 1 to take input from any port and send output to all - for testing
							// NOTE: does not work with TestiCal (no interrupt routines)

DELAY_IF_NEEDED MACRO
			; No delay needed
			ENDM
			LSTOUT+

; Timer A capture/compare regs are used for the interrupt-driven software UART
;
;	Conditions for 9600 Baud SW UART
#ifdef MONOLITH
StatusFreq	EQU		2					; Status frequency in hertz (allowed 2, 4, 8 or 16)
#else
StatusFreq	EQU		16					; Status frequency in hertz (allowed 2, 4, 8 or 16)
#endif
TAfreq		EQU		DCOfreq/(DCOckPerSMck*SMckPerTAck)	; Timer frequency in Hertz
BitTime96	EQU		(TAfreq+4800)/9600	; 104.17 us bit length in timer clock periods for 9600 baud
BitTime24	EQU		(TAfreq+1200)/2400	; 416.68 us bit length in timer clock periods for 2400 baud


; Timer register definitions
	; CMU comms uses UART
	; Note that the CMU constants have no prefix while the others have "Scu" and "Chg".
	; If you swap these, don't forget to swap the nterrupt vectors too.
	; System Control Unit comms and Frequency locked loop
ScuTAR		EQU			TA0R		; SCU timer register
ScuTAIV		EQU			TA0IV		; SCU timer interrupt subvector
ScuCCR0		EQU			TA0CCR0		; Capture/compare register zero on the same timer as Scu Rx and Tx
;FllCCTLp	EQU			TA0CCTL0	; FLL capture/compare control register. Handled by BSL
;FllCCRp	EQU			TA0CCR0		; FLL capture/compare register. Handled by BSL
ScuCCTLt	EQU			TA0CCTL1	; SCU Transmit capture/compare control register
ScuCCRt		EQU			TA0CCR1		; SCU Transmit compare register
ScuCCTLr	EQU			TA0CCTL2	; SCU Receive capture/compare control register
ScuCCRr		EQU			TA0CCR2		; SCU Receive capture/compare register
	; Charger/inverter comms and SoC meter PWM
ChgTAR		EQU			TA1R		; Charger/inverter timer register
ChgTAIV		EQU			TA1IV		; Charger/inverter timer interrupt subvector
ChgCCR0		EQU			TA1CCR0		; Capture/compare register zero on the same timer as Chg Rx and Tx
SocCCTLp	EQU			TA1CCTL0	; SoC meter PWM capture/compare control register
SocCCRp		EQU			TA1CCR0		; SoC meter PWM capture/compare register
ChgCCTLt	EQU			TA1CCTL1	; Charger/inverter Transmit capture/compare control register
ChgCCRt		EQU			TA1CCR1		; Charger/inverter Transmit compare register
ChgCCTLr	EQU			TA1CCTL2	; Charger/inverter Receive capture/compare control register
ChgCCRr		EQU			TA1CCR2		; Charger/inverter Receive capture/compare register



;
; Attempt to put the character from R8 into the transmit queue.
; If the queue is full, return immediately with the Z status bit set.
; Preserves R8, trashes R9.
TxByteNWUartMacro	MACRO	TxSz, txBuf, txRd, txWr
			mov.b	&txWr,R9				; Get the write index (not changed by TxIsr)
			mov.b 	R8,txBuf(R9)			; Tentatively write the character to the transmit queue
											;	there's always at least one free space,
											;	but don't increment the write index yet.
			inc.b	R9						; Increment a copy of the write index
			and.b	#TxSz-1,R9				;	modulo the queue size
			cmp.b	&txRd,R9				; If wr+1 mod sz = rd then it's full
			_IF		_NE
				mov.b	R9,&txWr			; Increment write index so char is officially in tx queue
				bis.b	#UCA0TXIE,&IE2		; Enable transmit interrupts
				clrz						; Indicate char was accepted
			_ENDIF
			ret
			ENDM

;
; Attempt to put the character from R8 into the transmit queue.
; If the queue is full, return immediately with the Z status bit set.
; Preserves R8, trashes R9.
TxByteNWTimerMacro	MACRO	TAR, CCRt, CCTLt, bitCntTx, TxSz, txBuf, txRd, txWr
			mov.b	&txWr,R9				; Get the write index (not changed by TxIsr)
			mov.b 	R8,txBuf(R9)			; Tentatively write the character to the transmit queue
											;	there's always at least one free space,
											;	but don't increment the write index yet.
			inc.b	R9						; Increment a copy of the write index
			and.b	#TxSz-1,R9				;	modulo the queue size
			cmp.b	&txRd,R9				; If wr+1 mod sz = rd then it's full
			_IF		_NE
				mov.b	R9,&txWr			; Increment write index so char is officially in tx queue

				; If transmit interrupts are disabled, set up the timer for a new start bit
				; and enable transmit compare interrupts.
				bit		#CCIE,&CCTLt		; Test transmit interrupts enabled bit
				_IF		_Z					; If transmit interrupts disabled
					mov.b	#10,&bitCntTx		; Load bit transition counter: 10 bits
					; Ensure a predictable delay between reading timer and setting
					; compare time and output mode for a start bit.
					dint						; Disable interrupts
					; Calculate max number of timer clocks till CCRt & CCTLt will be correctly set up.
					; First number is sum of cycles in paren below. The +MckPerTAck-1 is for rounding up.
					; Half of the +2 is in case the TAR increments just after we read it.
					; Don't understand why other half needed, but otherwise it fails when StatusFreq = 2
					; and MckPerTAck = 32.
					; If we get it wrong, the timer wraps around in just 16 ms anyway.
					mov		#((27+MckPerTAck-1)/MckPerTAck)+2,R9 ; R9 := setup time. Not protected by dint
					add		&TAR,R9				; (4) R9 := timer value + setup time
					_COND						; Start short circuit conditional
						bit		#CCIFG,&CCTLt		; (5) Test transmit compare interrupt flag
					_OR_ELSE	_NZ				; (2) If previous stop bit has not completed Or Else
						cmp		&CCRt,R9			; (4) Test (TAR+setup) - CCRt
					_OR_IFS		_NN				; (2) Or If existing CCRt AFTER TAR+setup, keep CCRt
						mov		R9,&CCRt			; (4) Set the new compare value for the start-bit
					_ENDIF						; Endif existing CCRt is AFTER TAR+setup
					eint						; (1) Enable interrupts. Next instruction still protected
					mov		#OUTMOD_1+CCIE,&CCTLt;(5) Set out mode for start bit, enable compare ints

				_ENDIF 						; Endif transmit interrupts disabled

				clrz						; Indicate char was accepted
			_ENDIF
			ret
			ENDM

	; Note that the CMU routines have no prefix while the others have "Scu" and "Chg".
TxByteNoWait: 		TxByteNWUartMacro	TxSz, txBuf, txRd, txWr
ScuTxByteNoWait:	TxByteNWTimerMacro	ScuTAR, ScuCCRt, ScuCCTLt, scuBitCntTx, ScuTxSz, scuTxBuf, scuTxRd, scuTxWr
ChgTxByteNoWait:	TxByteNWTimerMacro	ChgTAR, ChgCCRt, ChgCCTLt, chgBitCntTx, ChgTxSz, chgTxBuf, chgTxRd, chgTxWr

;-------------------------------------------------------------------------------
; TxByteCk	; Transmit the character in R8 while accumulating checksum.
			; If necessary, wait until the queue is not full.
			; Trashes R9. Preserves R8.
;-------------------------------------------------------------------------------

TxByteMacro	MACRO	dest
			_BEGIN
				ClearWatchdog
#if ALL_TO_ALL
				call	#ScuTxByteNoWait
				call	#ChgTxByteNoWait
				call	#TxByteNoWait
#else
				call	#dest
#endif
			_UNTIL	_NZ
			ret
			ENDM

TxByteCk: 	xor.b	R8,&txCksum
TxByte:		; Alternative entry which does not accumulate checksum
			; If a BMU (ID-255), send all output to SCU port
			br		&TxBytePtr					; Branch to handler at *TxBytePtr


CmuTxByte:										; Alternative entry point that always goes to CMU port,
			TxByteMacro	TxByteNoWait			;	and doesn't update the Wunth checksum

ScuTxByteCk: xor.b	R8,&txCksum
ScuTxByte:	TxByteMacro ScuTxByteNoWait			; Alternative entry which does not accumulate checksum

ChgTxByteCk: xor.b	R8,&txCksum
ChgTxByte:	TxByteMacro	ChgTxByteNoWait			; Alternative entry which does not accumulate checksum



;
; Wait for the CMU transmit queue to empty and last byte to be sent.
; Called by DoPassword in monitor and monolith before disabling interrupts and branching to BSLErase.
; Called before changing baud rate in monolith.
;
WaitTxComplete:
		_BEGIN						; Begin loop
			ClearWatchdog
			mov.b	&ScuCCTLt,R8
			bis.b	&ChgCCTLt,R8	; or.b
			and.b	#CCIE,R8		; Test the transmit interrupts enabled bits
		_UNTIL	_Z					; Until it is cleared
		ret

;-------------------------------------------------------------------------------
SocPwmIsr:
; PWM (timerA1 capture/compare 0) interrupt service routine
;-------------------------------------------------------------------------------
	; These interrupts should only be enabled on BMUs
#ifdef MONOLITH
		push	R9						; (?) Save R9
		xor.b	#SocMeter,&SocPortOUT	; (4) Toggle SoC output. We assume it stays in step with R9!
		bit.b	#SocMeter,&SocPortOUT	; (3) Test the bit
		_IF		_Z						; (2) If now set,
			mov		&socPwmAdv,R9			; (3) then just get advance value to R9
		_ELSE							; (2) But if now zero, need to calculate low time
			mov		#1000,R9				; (2)
			sub		&socPwmAdv,R9			; (3) = 1000 (PWM period) - pwmAdv
		_ENDIF
		add		R9,&SocCCRp				; (4) Advance TACCR2 by this amount
		; Note: no clear of the CPUOFF bit here, to save time. Not needed anyway.
		pop		R9						; (2) Restore R9
#endif // MONOLITH
		reti							; (5) Return from interrupt

;-------------------------------------------------------------------------------
TxIsrUartMacro	MACRO	txBuf, txRd, txWr, TxSz
; Macro for Transmit (UART) interrupt service routines
;-------------------------------------------------------------------------------
			; Must avoid the problem of the TX interrupt "sucking air"
			;   and needing to be re-primed.
			; If the queue will be empty after sending next char
			;   disable TX interrupt

			push	R8
			push	R9
			mov.b 	&txRd,R9				; Get read index in R9
			mov.b	txBuf(R9),R8			; Get next char from queue into R8
											;   but mustn't write it to UART TX register
			inc.b 	R9						; Increment the read index
			and.b 	#TxSz-1,R9				;	modulo the queue size.
			mov.b 	R9,&txRd				; Update the read index
			cmp.b 	&txWr,&txRd				; Test if TX queue is empty
			_IF		_EQ						; If TX queue is empty
				bic.b	#UCA0TXIE,&IE2		; Disable Tx interrupts
				nop							; Wait because the above doesn't take effect immediately
			_ENDIF							; Endif TX queue is not empty
			mov.b	R8,&UCA0TXBUF			; Send the character (safe to do so now)
			pop		R9
			pop		R8
			reti
			ENDM

;-------------------------------------------------------------------------------
RxIsrUartMacro	MACRO	rxBuf, rxRd, rxWr, RxSz
;-------------------------------------------------------------------------------
		push		R9
		; Put received data into the queue if there's space, otherwise it's lost
		mov.b	&rxWr,R9				; Get the write index
		mov.b	&UCA0RXBUF,rxBuf(R9)	; Tentatively write the character to the receive queue
										;  there's always at least one free space,
										;  but don't increment the write index yet.
		inc.b	R9						; Increment a copy of the write index
		and.b	#RxSz-1,R9				;  modulo the queue size
		cmp.b	&rxRd,R9				; If wr+1 mod sz = rd then it's full
		_IF		_NE						; If queue not full
			mov.b	R9,&rxWr				; Update write index so char is properly in queue
			bic		#CPUOFF,2(SP)			; When return, wake CPU. 2(SP) due to saved R9
		_ENDIF							; Endif queue not full
		pop		R9						; Restore R9
		reti							; Return from interrupt
		ENDM

;-------------------------------------------------------------------------------
TxRxIsrTimerMacro	MACRO TAIV, CCR0, CCRt, CCTLt, txData, bitCntTx, txBuf, txRd, txWr, TxSz, bitTime, CCRr, CCTLr, rxData, bitCntRx, rxBuf, rxRd, rxWr, RxSz
				LOCAL	TiovSubIsr, RxSubIsr, TxSubIsr, WakeExit
; Combined Transmit (CCR1) & Receive (CCR2) & timer overflow interrupt service routine
;-------------------------------------------------------------------------------
			; Warning: Do not be tempted to replace the two instructions below: mov &TAIV,R9 ; cmp #2,R9
			; with the single instruction cmp #2,&TAIV. This caused rare dropped bits on receive and
			; it took a lot of effort to trace the problem to this instruction.
			; It appears that despite only reading and not writing to its "destination" operand, the
			; compare instruction is still treated as making _two_ accesses to TAIV, in the sense that
			; it clears not only the interrupt flag being serviced but also any other TAIV interrupt
			; that might be pending, causing it to never be serviced.

											; (6) cycles for interrupt accepted
			push	R9						; (3) Save R9 (needed for queue use on last data bit anyway)
			mov		&TAIV,R9				; (3) Read the Timer-A interrupt sub-vector (one access only!)
			cmp		#CCRt-CCR0,R9			; (1) Was it a transmit interrupt
			jeq		TxSubIsr
			cmp		#CCRr-CCR0,R9			; (1) Was it a receive interrupt
			jeq		RxSubIsr				; (2) Yes, jump to receive interrupt service routine
			; Otherwise fall thru to timer overflow interrupt service routine
;
;	Regular timer overflow interrupt: Used to cause the mainline code to measure voltages etc
;
TiovSubIsr: ; FIX ME or REPLACE ME with a pop R9; reti
 		;	bic.b	#bNotMeasureTime,&monFlags ; Notify mainline that it's time to measure
		;	inc.b	&ticks					; Increment this counter; allowed to wrap
			jmp		WakeExit				; Arrange to wake CPU, restore R9 and return from interrupt

;
;	Receive interrupt: Handle start-bit timer-capture or data-bit timer-compare
;
RxSubIsr:	add		&bitTime,&CCRr			; (6) Time to next bit
			bit		#CAP,&CCTLr				; (5) Capture mode = start bit edge
			_IF		_NZ						; (2) If start bit edge
				bic		#CAP,&CCTLr				; (5) Switch to compare mode
				mov		&bitTime,R9				; (3)
				rra		R9						; (1) Half bit time
				add		R9,&CCRr				; (4) First databit 1.5 bits from edge
			_ELSE							; (2) Else data bit sampled
				bit		#SCCI,&CCTLr			; (4) Sampled bit to carry
				rrc.b	&rxData					; (4) Store received bit
				dec.b	&bitCntRx				; (4) All bits RXed?
				_IF		_Z						; (2) If this is the last data bit
					mov.b	#8,&bitCntRx			; Setup bit counter for next byte
					bis		#CAP,&CCTLr				; Set back to capture mode

					; Put received data into the queue if there's space, otherwise it's lost
					mov.b	&rxWr,R9				; Get the write index
					mov.b	&rxData,rxBuf(R9)		; Tentatively write the character to the receive queue
													;  there's always at least one free space,
													;  but don't increment the write index yet.
					inc.b	R9						; Increment a copy of the write index
					and.b	#RxSz-1,R9				;  modulo the queue size
					cmp.b	&rxRd,R9				; If wr+1 mod sz = rd then it's full
					_IF		_NE						; If queue not full
						mov.b	R9,&rxWr				; Update write index so char is properly in queue
WakeExit				bic		#CPUOFF,2(SP)			; When return, wake CPU. 2(SP) due to saved R9
					_ENDIF							; Endif queue not full
				_ENDIF							; Endif last data bit
			_ENDIF							; Endif data bit sampled
			pop		R9						; (2) Restore R9
			reti							; (5) Return from interrupt

TxSubIsr:	; Compare match for Tx
; 1st interrupt BitCntTx is 10 (dec to 9), falling edge of start-bit just sent, need to set up for LSB
; 8th interrupt, BitCntTx is 3, just transitioned to data bit 6, need to set up for transition to MSB
; 9th interrupt, BitCntTx is 2, just transitioned to MSB, need to set up for transition to stop bit (1)
; 10th interrupt, BitCntTx is 1 (dec to 0), just transitioned to stop bit,
; need to set up for transition to next start bit if there is another byte in the tx queue
; or disable Tx interrupts if there are no more characters.

											; (6) cycles for interrupt accepted
			add.w	&bitTime,&CCRt			; (6) Set timer compare reg for when next transition is due
			dec.b	&bitCntTx				; (4) Decrement bit counter
			_IF		_NZ						; (2) If not Stop bit initiated

				cmp.b	#9,&bitCntTx			; (5) Test if start bit just started
				_IF		_EQ						; (2) If start bit just started
					push	R9
					mov.b 	&txRd,R9				; Get read index in R9
					mov.b	txBuf(R9),&txData		; Get next char from queue into txData
					inc.b 	R9						; Increment the read index
					and.b 	#TxSz-1,R9				;	modulo the queue size.
					mov.b 	R9,&txRd				; Update the read index
					pop		R9
					; The below would just waste time and space. We don't need to wake up to do anything
					; in the mainline after taking a byte from the TX queue. -- DK
					; bic		#CPUOFF,0(SP)			; When return, wake CPU if needed
				_ENDIF							; Endif start bit just started
				rra.w	&txData					; (1) Next bit to C. NOTE: upper byte remains $FF always
												; so stop and idle bits are always treated like data 1s
				_IF		_NC						; (2) If bit is 0
					mov		#OUTMOD_1+CCIE,&CCTLt ; (5) then set TxMi = TAx.0 output high
				_ELSE							; (2) Else bit is 1
					mov		#OUTMOD_5+CCIE,&CCTLt	; (5) Else clear TxMi = TAx.0 output low
				_ENDIF							; Endif bit is 1
			_ELSE							; Else Stop bit initiated
				cmp.b 	&txWr,&txRd				; Test if Tx queue is empty
				_IF		_EQ						; If Tx queue is empty
					bic.w	#CCIE,&CCTLt			; (5) Disable Tx interrupts
				_ELSE							; Else Tx queue is not empty
					mov.b	#10,&bitCntTx			; Load bit transition counter: 10 bits
					mov.w	#OUTMOD_1+CCIE,&CCTLt	; (5) Set output mode for start bit

				_ENDIF							; Endif TX queue is not empty
			_ENDIF							; Endif Stop bit initiated
			pop		R9						; (2) Restore R9
			reti
		ENDM

	; Note that the CMU routines have no prefix while the others have "Scu" and "Chg".
TxIsr:		TxIsrUartMacro		txBuf, txRd, txWr, TxSz
RxIsr:		RxIsrUartMacro		rxBuf, rxRd, rxWr, RxSz
ChgTxRxIsr:	TxRxIsrTimerMacro	ChgTAIV, ChgCCR0, ChgCCRt, ChgCCTLt, chgTxData, chgBitCntTx, chgTxBuf, chgTxRd, chgTxWr, ChgTxSz, chgBitTime, ChgCCRr, ChgCCTLr, chgRxData, chgBitCntRx, chgRxBuf, chgRxRd, chgRxWr, ChgRxSz
ScuTxRxIsr:	TxRxIsrTimerMacro	ScuTAIV, ScuCCR0, ScuCCRt, ScuCCTLt, scuTxData, scuBitCntTx, scuTxBuf, scuTxRd, scuTxWr, ScuTxSz, scuBitTime, ScuCCRr, ScuCCTLr, scuRxData, scuBitCntRx, scuRxBuf, scuRxRd, scuRxWr, ScuRxSz


;
; Attempt to get a character from the receive queue into R8.
; If the queue is empty, return immediately with the Z status bit set.
; Trashes R9
;
RxByteNWMacro	MACRO	RxSz, rxBuf, rxRd, rxWr
			mov.b 	&rxRd,R9			; Get the read index into R9
			cmp.b 	&rxWr,R9			; Equal if queue empty
			_IF		_NE
				mov.b	rxBuf(R9),R8	; Read char from queue
				inc.b 	R9				; Increment the read index
				and.b 	#RxSz-1,R9		;	modulo the queue size
				mov.b 	R9,&rxRd		; Update the read index
				clrz					; Indicate char available
			_ENDIF
			ENDM

	; Note that the CMU routines have no prefix while the others have "Scu" and "Chg".
RxByteNoWait:	RxByteNWMacro	RxSz, rxBuf, rxRd, rxWr
	#if ALL_TO_ALL
				_IF		_NZ
					ret			; Return if CMU  byte received, else *fall through*,
								; so we can return NZ if other comms received
				_ENDIF
	#else
		ret
	#endif
ScuRxByteNW:	RxByteNWMacro	ScuRxSz, scuRxBuf, scuRxRd, scuRxWr
	#if ALL_TO_ALL
				_IF		_NZ
					ret			; Return if SCU byte received, else fall through again
				_ENDIF
	#else
				ret
	#endif
ChgRxByteNW:	RxByteNWMacro	ChgRxSz, chgRxBuf, chgRxRd, chgRxWr
				ret


; Wait for a byte to be received from the CMU port
; Trashes R9
RxByte:
				mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
				_BEGIN
					call	#RxByteNoWait		; Check for a received byte
				_UNTIL	_NZ					; Repeat until received
				mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and enable the Watchdog Timer
				ret

; Wait for a byte to be received from the SCU port
; Trashes R9
ScuRxByte:
				mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
				_BEGIN
					call	#ScuRxByteNW		; Check for a received byte
				_UNTIL	_NZ					; Repeat until received
				mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and enable the Watchdog Timer
				ret


DoEcho:		_COND							; Begin short circuit conditional
				cmp.b	#$11,R8
			_OR_ELSE	_EQ					; If it's an XON (ctrl-Q) character OR Else
				bit.b	#bDontEcho,&interpFlags
			_OR_IFS		_Z					; Or If the dont-echo flag is clear
				call	#TxByte					; Echo the character
			_ENDIF
			ret
; End of DoEcho


DoPassword:
;
; Check for a bootstrap-loading password character in R8. Trunk password sequence is $05 $04 $03 $01.
; If the rev61 password sequence is received ($05 $04 $03 $02) then we do a "fake rev61 download"
; so we don't attempt to interpret it as commands. This allows a system with mixed hardware revisions.
; After decrementing passWordState below, 3 = waiting for 1st pwd byte, 2 = waiting for 2nd pwd byte,
; 1 = waiting for 3rd pwd byte, 0 = waiting for last pwd byte and erase if received.
; Trashes R9, R12. Preserves R8.
;
			dec.b	&passWordState
			; Check for a continuing password match
			_IF		_NZ					; If not the final password character
				mov.b	&passWordState,R9	; Passwords are $05 $04 $03 $01-or-$02
				add.b	#2,R9				; Expected password char is &passWordState plus 2
				cmp.b	R9,R8				; Check for a match
				_IF		_NE					; If not a match
					mov.b	#4,&passWordState	; Go back to waiting for first password character
				_ENDIF
			_ELSE						; Else the final character
				; No matter what happens now, we want to begin a new password match after we return
				mov.b	#4,&passWordState	; Go back to waiting for first password character
				_CASE
				_OFb	#2,R8				; If matched 05 04 03 already, now 02 (rev61 password)
					; Start a fake download, reading and discarding a complete download worth of bytes
					_DO		#REV61_BSL2_ST-REV61_PROG_ST,R12 ; Set count of bytes to ignore
						cmp.b	#255,&ID			; Check my ID
						_IF		_EQ					; If I'm a BMU
							call	#ScuRxByte			; Wait for a byte from the SCU port
						_ELSE
							call	#RxByte				; Wait for a byte from the CMU port
						_ENDIF
						call	#CmuTxByte				; Echo it to the CMU port
					_LOOP 	R12
					; The last byte read could look like a command char.  Ensure it doesn't.
					mov.b	#2,R8				; Restore last password character, ignored by ACCEPT
				_ENDOF						; End of fake download case
				_OFb	#1,R8				; If matched complete real download pwd 05 04 03 01
					; Start a real download
					; Jump to the code in the BSL which will erase main flash memory and wait for bytes
					;	to flash program without using interrupts.
					; May be important: it could be bad to have receive interrupts sending stress bytes
					;	after this last password byte goes out; it could be interpreted as a byte to
					;	flash program!
					bic.b	#UCA0RXIE | UCA0TXIE,&IE2	; Disable UART interrupts
					clr		&ScuCCTLr			; Clear at least the CCIE RX interrupt enable bit
					clr		&ChgCCTLr			; Clear at least the CCIE RX interrupt enable bit

					; Important: wait for last password byte to be echoed before interrupts get disabled
					call	#WaitTxComplete		; Wait for all transmission on all ports to complete

					bic.b	#Bypass,&BypPortOUT	; Set Bypass off
					mov.b	#0,Rtos				; Set Error Led and Piezo off
					call	#ErrorLed
					clr		&bsl2state			; Set BSL2's state variable as if it has just found pwd
					mov		#InitSP,SP			; Give the BSL maximum stack
					br		#jBSLErase			; Jump into BSL2 to flash erase and continue the download

				_ENDOF					; End of real download case
				; Otherwise, it's a bad password char or the last one was missed. Just fall through to
				;	 the ret, where ACCEPT will ignore it if < $08, or process it as a real command char
				_ENDCASE				; End of final character cases
			_ENDIF					; End else the final password character

			ret
; End of DoPassword


Halt:
		; We need an endless loop at various times, but still want to check for the BSL password.
		; A BMU may still be powered up by the inverter capacitors, or some charge source.
		; So getting out of this loop may require the red button to be pushed to remove power from the
		; BMU to reset it. After which, releasing the red button may be sufficient to restart,
		; or you may also have to push the green button.
		; Sending a break to a BMU's SCU port will also reset it.
		_BEGIN							; Begin loop
			cmp.b	#255,&ID			; Check my ID
			_IF		_EQ					; If I'm a BMU
				call	#ScuRxByte			; Wait for a byte from the SCU port
			_ELSE
				call	#RxByte				; Wait for a byte from the CMU port
			_ENDIF
			call	#CmuTxByte				; Echo it to the CMU port
			call	#DoPassword			; Check for a BSL password
		_AGAIN							; Loop forever
