;
; Branch: rev58
; For the MSP430G2452 microcontroller only.
; As used in the CMUs and IMUs in Mexy the electric MX-5,
; and in the modified IMU of the Helidon Monolith.
; Helidon CMUs are in the rev61 branch.
;
;*******************************************************************************
;	MSP430F20xx Software UART - Timer_A
;
;	Description: Use Timer_A CCR0 hardware output modes and SCCI data latch
;	to implement UART function @ 9600 baud. Software does not directly read and
;	write to Rx and Tx pins, instead proper use of output modes and SCCI data
;	latch are demonstrated. Use of these hardware features eliminates ISR
;	latency effects as hardware insures that output and input bit latching and
;	timing are perfectly synchronised with Timer_A regardless of other
;	software activity.
;	TACLK = SMCLK/4 = DCOCLK/8/4 = 250 kHz, MCLK = DCOCLK/2 = 4.00 MHz
;
;	September 2010
;	Based on code by:
;	M. Buccini / L. Westlund
;	Texas Instruments Inc.
;	October 2005
;*******************************************************************************

; Timer A overflow is used for the regular processing "tick" or status frequency
; while its capture/compare regs are used for the interrupt-driven software UART
;
;	Conditions for 9600 Baud SW UART
DCOfreq		EQU		8000000				; DCO clock in Hz
DCOckPerMck	EQU		2					; Number of DCO clocks per MCK (CPU, ADC) (allowed values 1,2,4,8)
DCOckPerSMck EQU	8					; Number of DCO clocks per SMCK (Timer) (allowed values 1,2,4,8)
#ifdef MONOLITH
StatusFreq	EQU		2					; Status frequency in hertz (allowed 2, 4, 8 or 16)
#else
StatusFreq	EQU		16					; Status frequency in hertz (allowed 2, 4, 8 or 16)
#endif
SMckPerTAck	EQU		(DCOfreq/DCOckPerSMck/StatusFreq+(1<<15))/(1<<16)
										; Number of SMCK clocks per timer clock (allowed 1,2,4,8)
MckPerTAck	EQU		SMckPerTAck*DCOckPerSMck/DCOckPerMck
TAfreq		EQU		DCOfreq/(DCOckPerSMck*SMckPerTAck)	; Timer frequency in Hertz
BitTime96	EQU		(TAfreq+4800)/9600	; 104.17 us bit length in timer clock periods for 9600 baud
BitTime24	EQU		(TAfreq+1200)/2400	; 416.68 us bit length in timer clock periods for 2400 baud


; Timer register definitions
	; CMU comms and SoC meter PWM
CCTLt		EQU			TACCTL0		; CMU Transmit capture/compare control register
CCRt		EQU			TACCR0		; CMU Transmit capture/compare register
CCTLr		EQU			TACCTL1		; CMU Receive capture/compare control register
CCRr		EQU			TACCR1		; CMU Receive capture/compare register
SocCCTLp	EQU			TACCTL2		; SoC meter PWM capture/compare control register (IMU only)
SocCCR0		EQU			TACCR0		; Capture/compare register zero on the same timer as SoC meter
SocCCRp		EQU			TACCR2		; SoC meter PWM capture/compare register (IMU only)


;
; Attempt to put the character from R8 into the transmit queue.
; If the queue is full, return immediately with the Z status bit set.
; Preserves R8, trashes R9.
TxByteNWUartMacro	MACRO	TxSz, txBuf, txRd, txWr
			mov.b	&txWr,R9				; Get the write index (not changed by TxIsr)
			mov.b 	R8,txBuf(R9)			; Tentatively write the character to the transmit queue
											;	there's always at least one free space,
											;	but don't increment the write index yet.
			inc.b	R9						; Increment a copy of the write index
			and.b	#TxSz-1,R9				;	modulo the queue size
			cmp.b	&txRd,R9				; If wr+1 mod sz = rd then it's full
			_IF		_NE
				mov.b	R9,&txWr			; Increment write index so char is officially in tx queue
				bis.b	#UCA0TXIE,&IE2		; Enable transmit interrupts
				clrz						; Indicate char was accepted
			_ENDIF
			ret
			ENDM

;
; Attempt to put the character from R8 into the transmit queue.
; If the queue is full, return immediately with the Z status bit set.
; Preserves R8, trashes R9.
TxByteNWTimerMacro	MACRO	TAR, CCRt, CCTLt, bitCntTx, TxSz, txBuf, txRd, txWr
			mov.b	&txWr,R9				; Get the write index (not changed by TxIsr)
			mov.b 	R8,txBuf(R9)			; Tentatively write the character to the transmit queue
											;	there's always at least one free space,
											;	but don't increment the write index yet.
			inc.b	R9						; Increment a copy of the write index
			and.b	#TxSz-1,R9				;	modulo the queue size
			cmp.b	&txRd,R9				; If wr+1 mod sz = rd then it's full
			_IF		_NE
				mov.b	R9,&txWr			; Increment write index so char is officially in tx queue

				; If transmit interrupts are disabled, set up the timer for a new start bit
				; and enable transmit compare interrupts.
				bit		#CCIE,&CCTLt		; Test transmit interrupts enabled bit
				_IF		_Z					; If transmit interrupts disabled
					mov.b	#8,&USICNT			; Load USI counter to keep USIIFG clear so TxPl (SCLK)
												;   will continue to be an inversion of TxMi (TAx.0).
					mov.b	#10,&bitCntTx		; Load bit transition counter: 10 bits
					; Ensure a predictable delay between reading timer and setting
					; compare time and output mode for a start bit.
					dint
					; Calculate max number of timer clocks till CCRt & CCTLt will be correctly set up.
					; First number is sum of cycles in paren below. The +MckPerTAck-1 is for rounding up.
					; Half of the +2 is in case the TAR increments just after we read it.
					; Don't understand why other half needed, but otherwise it fails when StatusFreq = 2
					; and hence MckPerTAck = 32.
					mov		#((23+MckPerTAck-1)/MckPerTAck)+2,R9 ; R9 := setup time. Not protected by dint
					add		&TAR,R9				; R9 := timer value + setup time
					_COND						; Start short circuit conditional
						bit		#CCIFG,&CCTLt	; (5) Test transmit compare interrupt flag
					_OR_ELSE	_NZ				; (2) If previous stop bit has not completed Or Else
						cmp		&CCRt,R9		; (4) Test (TAR+setup) - CCRt
					_OR_IFS		_NN				; (2) Or If existing CCRt AFTER TAR+setup, keep CCRt
						mov		R9,&CCRt			; (4) Set the new compare value for the start-bit
					_ENDIF						; Endif existing CCRt is AFTER TAR+setup
					eint						; (1) Next instruction still protected
					mov		#OUTMOD_1+CCIE,&CCTLt ; (5) Set out mode for start bit, enable compare ints

					ActLedOn					; Turn on the (inverted) activity LED for visual feedback
				_ENDIF 						; Endif transmit interrupts disabled

				clrz						; Indicate char was accepted
			_ENDIF
			ret
			ENDM

TxByteNoWait:		TxByteNWTimerMacro	TAR, CCRt, CCTLt, bitCntTx, TxSz, txBuf, txRd, txWr

;-------------------------------------------------------------------------------
; TxByteCk	; Transmit the character in R8 while accumulating checksum.
			; If necessary, wait until the queue is not full.
			; Trashes R9.
;-------------------------------------------------------------------------------

TxByteMacro	MACRO	TxByteNoWait
			_BEGIN

				ClearWatchdog

				call	#TxByteNoWait
			_UNTIL	_NZ
			ret
			ENDM


TxByteCk: 	xor.b	R8,&txCksum
TxByte:		TxByteMacro	TxByteNoWait			; Alternative entry which does not accumulate checksum



;
; Wait for the CMU transmit queue to empty and last byte to be sent.
; Called by DoPassword in monitor and monolith before disabling interrupts and branching to BSLErase.
; Called before changing baud rate in monolith.
;
WaitTxComplete:
			_BEGIN						; Begin loop
				ClearWatchdog
				bit		#CCIE,&CCTLt		; Test the transmit interrupts enabled bit
			_UNTIL	_Z					; Until it is cleared
			ret

;-------------------------------------------------------------------------------
TxIsrUartMacro	MACRO	TxSz, txBuf, txRd, txWr
; Macro for Transmit (UART) interrupt service routines
;-------------------------------------------------------------------------------
			; Must avoid the problem of the TX interrupt "sucking air"
			;   and needing to be re-primed.
			; If the queue will be empty after sending next char
			;   disable TX interrupt

			push	R8
			push	R9
			mov.b 	&txRd,R9				; Get read index in R9
			mov.b	txBuf(R9),R8			; Get next char from queue into R8
											;   but mustn't write it to UART TX register
			inc.b 	R9						; Increment the read index
			and.b 	#TxSz-1,R9				;	modulo the queue size.
			mov.b 	R9,&txRd				; Update the read index
			cmp.b 	&txWr,&txRd				; Test if TX queue is empty
			_IF		_EQ						; If TX queue is empty
				bic.b	#UCA0TXIE,&IE2		; Disable Tx interrupts
				nop							; Wait because the above doesn't take effect immediately
			_ENDIF							; Endif TX queue is not empty
			mov.b	R8,&UCA0TXBUF			; Send the character (safe to do so now)
			pop		R9
			pop		R8
			reti
			ENDM

;-------------------------------------------------------------------------------
TxIsrTimerMacro	MACRO	CCRt, CCTLt, txData, bitCntTx, txBitTime, TxSz, txBuf, txRd, txWr
; Macro for Transmit (timer capture/compare 0) interrupt service routines
;-------------------------------------------------------------------------------
; 1st interrupt BitCntTx is 10 (dec to 9), falling edge of start-bit just sent, need to set up for LSB
; 8th interrupt, BitCntTx is 3, just transitioned to data bit 6, need to set up for transition to MSB
; 9th interrupt, BitCntTx is 2, just transitioned to MSB, need to set up for transition to stop bit (1)
; 10th interrupt, BitCntTx is 1 (dec to 0), just transitioned to stop bit,
; need to set up for transition to next start bit if there is another byte in the tx queue
; or disable Tx interrupts if there are no more characters.

; But perhaps we should instead setup for a transition to idle state (same as stop bit)
; if there are no more characters.
; Then we would have an 11th interrupt where stop bit is complete and we disable Tx interrupts.
; But TxByteNoWait would still have to deal specially with the case where the queue becomes non-empty
; before the stop bit has finished. The question is whether it would be less messy than it is now,
; use less code, or not need to disable interrupts for so long. -- DK


											; (6) cycles for interrupt accepted
			add.w	&txBitTime,&CCRt		; (6) Set timer compare reg for when next transition is due
			dec.b	&bitCntTx				; (4) Decrement bit counter
			_IF		_NZ						; (2) If not Stop bit initiated

				cmp.b	#9,&bitCntTx			; (5) Test if start bit just started
				_IF		_EQ						; (2) If start bit just started
					push	R9
					mov.b 	&txRd,R9				; Get read index in R9
					mov.b	txBuf(R9),&txData		; Get next char from queue into txData
					inc.b 	R9						; Increment the read index
					and.b 	#TxSz-1,R9				;	modulo the queue size.
					mov.b 	R9,&txRd				; Update the read index
					pop		R9
					; The below would just waste time and space. We don't need to wake up to do anything
					; in the mainline after taking a byte from the TX queue. -- DK
					; bic		#CPUOFF,0(SP)			; When return, wake CPU if needed
				_ENDIF							; Endif start bit just started
				rra.w	&txData					; (1) Next bit to C. NOTE: upper byte remains $FF always
												; so stop and idle bits are always treated like data 1s
				_IF		_NC						; (2) If bit is 0
					mov		#OUTMOD_1+CCIE,&CCTLt ; (5) then set TxMi = TAx.0 output high
				_ELSE							; (2) Else bit is 1
					mov		#OUTMOD_5+CCIE,&CCTLt	; (5) Else clear TxMi = TAx.0 output low
				_ENDIF							; Endif bit is 1
			_ELSE							; Else Stop bit initiated
				cmp.b 	&txWr,&txRd				; Test if Tx queue is empty
				_IF		_EQ						; If Tx queue is empty
					bic.w	#CCIE,&CCTLt			; (5) Disable Tx interrupts
					ActLedOff						; (5) Turn off activity LED at end of the transmit
				_ELSE							; Else Tx queue is not empty
					mov.b	#8,&USICNT				; Load USI ctr to keep USIIFG clear so TxPl (SCLK)
													;   will continue to be an inversion of TxMi (TAx.0)
					mov.b	#10,&bitCntTx			; Load bit transition counter: 10 bits
					mov.w	#OUTMOD_1+CCIE,&CCTLt	; (5) Set output mode for start bit

					ActLedOn						; Turn on the activity LED for visual feedback.
				_ENDIF							; Endif TX queue is not empty
			_ENDIF							; Endif Stop bit initiated
			reti
			ENDM

TxIsr:		TxIsrTimerMacro	CCRt, CCTLt, txData, bitCntTx, txBitTime, TxSz, txBuf, txRd, txWr

;-------------------------------------------------------------------------------
RxTiovIsrTimerMacro	MACRO	TAIV, CCRt, CCRr, CCTLr, CCR0, CCRp, rxData, bitCntRx, rxBuf, rxRd, rxWr, RxSz
				LOCAL	TiovSubIsr, RxSubIsr, PwmSubIsr, WakeExit
; Combined Receive (timer capture/compare 1) & timer overflow interrupt service routine
;-------------------------------------------------------------------------------
			; Warning: Do not be tempted to replace the two instructions below: mov &TAIV,R9 ; cmp #2,R9
			; with the single instruction cmp #2,&TAIV. This caused rare dropped bits on receive and
			; it took a lot of effort to trace the problem to this instruction.
			; It appears that despite only reading and not writing to its "destination" operand, the
			; compare instruction is still treated as making _two_ accesses to TAIV, in the sense that
			; it clears not only the interrupt flag being serviced but also any other TAIV interrupt
			; that might be pending, causing it to never be serviced.

											; (6) cycles for interrupt accepted
			push	R9						; (3) Save R9 (needed for queue use on last data bit anyway)
			mov		&TAIV,R9				; (3) Read the Timer-A interrupt sub-vector (one access only!)
			cmp		#CCRp-CCR0,R9			; (1) Was it a PWM interrupt
			jeq		PwmSubIsr
			cmp		#CCRr-CCR0,R9			; (1) Was it a receive interrupt
			jeq		RxSubIsr				; (2) Yes, jump to receive interrupt service routine
			; Otherwise fall thru to timer overflow interrupt service routine
;
;	Regular timer overflow interrupt: Cause the mainline code to measure voltages etc
;
TiovSubIsr:
 			bic.b	#bNotMeasureTime,&monFlags ; Notify mainline that it's time to measure
			inc.b	&ticks					; Increment this counter; allowed to wrap
			jmp		WakeExit				; Arrange to wake CPU, restore R9 and return from interrupt

;
;	Receive interrupt: Handle start-bit timer-capture or data-bit timer-compare
;
RxSubIsr:		add		#BitTime96,&CCRr		; (5) Time to next bit
			bit		#CAP,&CCTLr				; (5) Capture mode = start bit edge
			_IF		_NZ						; (2) If start bit edge
				bic		#CAP,&CCTLr				; (5) Switch to compare mode
				add		#BitTime96/2,&CCRr		; (5) First databit 1.5 bits from edge
			_ELSE							; (2) Else data bit sampled
				bit		#SCCI,&CCTLr			; (4) Sampled bit to carry
				rrc.b	&rxData					; (4) Store received bit
				dec.b	&bitCntRx				; (4) All bits RXed?
				_IF		_Z						; (2) If this is the last data bit
					mov.b	#8,&bitCntRx			; Setup bit counter for next byte
					bis		#CAP,&CCTLr				; Set back to capture mode

					; Put received data into the queue if there's space, otherwise it's lost
					mov.b	&rxWr,R9				; Get the write index
					mov.b	&rxData,rxBuf(R9)		; Tentatively write the character to the receive queue
													;  there's always at least one free space,
													;  but don't increment the write index yet.
					inc.b	R9						; Increment a copy of the write index
					and.b	#RxSz-1,R9				;  modulo the queue size
					cmp.b	&rxRd,R9				; If wr+1 mod sz = rd then it's full
					_IF		_NE						; If queue not full
						mov.b	R9,&rxWr				; Update write index so char is properly in queue
WakeExit				bic		#CPUOFF,2(SP)			; When return, wake CPU. 2(SP) due to saved R9
					_ENDIF							; Endif queue not full
				_ENDIF							; Endif last data bit
			_ENDIF							; Endif data bit sampled
			pop		R9						; (2) Restore R9
			reti							; (5) Return from interrupt

PwmSubIsr:	; Compare match for PWM
	; These interrupts should only be enabled on BMUs or IMUs with ID 255 running monolith, not monitor
	#ifdef MONOLITH
			xor.b	#SocMeter,&SocPortOUT	; (4) Toggle SoC output. We assume it stays in step with R9!
			bit.b	#SocMeter,&SocPortOUT	; (3) Test the bit
			_IF		_Z						; (2) If now set,
				mov		&socPwmAdv,R9			; (3) then just get advance value to R9
			_ELSE							; (2) But if now zero, need to calculate low time
				mov		#1000,R9				; (2)
				sub		&socPwmAdv,R9			; (3) = 1000 (PWM period) - pwmAdv
			_ENDIF
			add		R9,&SocCCRp				; (4) Advance TACCR2 by this amount
			; Note: no clear of the CPUOFF bit here, to save time. Not needed anyway.
	#endif // MONOLITH
			pop		R9						; (2) Restore R9
			reti							; (5) Return from interrupt
			ENDM

RxTiovIsr:		RxTiovIsrTimerMacro	TAIV, CCRt, CCRr, CCTLr, SocCCR0, SocCCRp, rxData, bitCntRx, rxBuf, rxRd, rxWr, RxSz


;
; Attempt to get a character from the receive queue into R8.
; If the queue is empty, return immediately with the Z status bit set.
; Trashes R9
;
RxByteNWMacro	MACRO	RxSz, rxBuf, rxRd, rxWr
			mov.b 	&rxRd,R9			; Get the read index into R9
			cmp.b 	&rxWr,R9			; Equal if queue empty
			_IF		_NE
				mov.b	rxBuf(R9),R8	; Read char from queue
				inc.b 	R9				; Increment the read index
				and.b 	#RxSz-1,R9		;	modulo the queue size
				mov.b 	R9,&rxRd		; Update the read index
				clrz					; Indicate char available
			_ENDIF
			ENDM

RxByteNoWait:	RxByteNWMacro	RxSz, rxBuf, rxRd, rxWr
				ret


; Wait for a byte to be received
; Trashes R9
RxByte:
				mov.w	#WDTPW+WDTHOLD,&WDTCTL ; Hold the Watchdog Timer
				_BEGIN
					call	#RxByteNoWait		; Check for a received byte
				_UNTIL	_NZ					; Repeat until received
				mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and enable the Watchdog Timer
				ret


DoPassword:
;
; Check for a password character in R8
; After decrementing passWordState below, 3 = waiting for ^G, 2 = waiting for ^F, 1 = waiting for ^E,
; 0 = waiting for ^D and erase if received. We should not receive any negative value
; Trashes R9
;
			dec.b	&passWordState
			jn		resetFSM			; This should never happen! Just reset FSM and
										; process as an ordinary command

			; Check for a continuing password match
			mov.b	&passWordState,R9	; Password is $05 $04 $03 $02
			add.b	#2,R9				; Expected password char is equal to &passWordState with 2 added
			cmp.b	R9,R8				; Check for a match
			jne		resetFSM			; If mismatch, jump and reset FSM
			tst.b	&passWordState		; Are we now at state 0?
			jnz		exitOnRx			; If not, this was a valid password byte, but not the last.
										;	Just exit this callback and wait for more
			; Jump to the code in the BSL which will erase main flash memory and wait for more bytes
			;	without using interrupts.
			; May be important: it could be bad to have receive interrupts sending stress bytes after
			;	this last password byte goes out; it could be interpreted as a byte to flash program!
			clr		&CCTLr				; Clear at least the CCIE RX interrupt enable bit
			; Important: wait for the last password byte to be echoed before disabling interrupts!
			call	#WaitTxComplete		; Wait for all transmission on all ports to complete

			dint
			clr		&TACTL				; Disable the timer completely; may use less power
			mov.b	#TxPl+ActLed,&P1OUT	; Set Tx to idle, (inverted) activity LED off
			clr.b	&P2OUT				; Set bypass and error LED off (relays off if IMU)
			clr.b	&P1SEL				; Make Piezo (P1.1) ordinary I/O now
			bic.b	#USIPE5,&USICTL0	; Make TxPl (P1.5) ordinary I/O also
			clr		&bsl2state			; Set BSL2's state variable as if it has just recognised password
			mov		#InitSP,SP			; Give the BSL maximum stack
			br		#jBSLErase			; Jump into BSL2 to flash erase and continue the download

resetFSM	mov.b	#4,&passWordState	; No password match; reset state machine

exitOnRx	ret
; End of DoPassword


Halt:
		; We need an endless loop at various times, but still want to check for the BSL password.
		; An IMU may still be powered up by the inverter capacitors, or some charge source.
		; So getting out of this loop may require the red button to be pushed to remove power from the
		; IMU to reset it. After which, releasing the red button may be sufficient to restart,
		; or you may also have to push the green button.
		; Sending a break will also reset it.
		_BEGIN							; Begin loop
			call	#RxByte					; Wait for a byte
			call	#TxByte					; Echo it
			call	#DoPassword				; Check for a BSL password
		_AGAIN							; Loop forever
