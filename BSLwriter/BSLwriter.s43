; Ensure you set the FET Debugger download options to erase main memory _only_,
; _not_ information memory. This is to preserve the Bootstrap Loader and calibration data.
			COL		132				; Nice wide listings
; This is a Bootstrap-loader writer (BSL-writer) for an MSP430F2012 microcontroller.
;
; It was developed by Mike Van Emmerik and Dave Keenan for their
; lithium battery monitoring system for high voltage electric vehicles.
;
; This BSL-writer should be the first program written to the 2kB of main-flash
; on the MSP430F2012.
; This must be done using a flash programmer connected to the chip's JTAG port.
; The BSL-writer contains a copy of a bootstrap loader (BSL).
; It writes this BSL to the 256 bytes of info-flash, while preserving some of the
; digitally controlled oscillator (DCO) calibration bytes that are stored there
; by the chip manufacturer.
; It may also be configured to perform voltage and temperature calibrations
; and store this calibration data in info-flash as well.
; It then passes control to the BSL.

; The BSL consists of a software UART providing RS422-style serial communications,
; and a password-recognising state-machine.
; The state-machine normally passes incoming serial data to a command interpreter
; in main-flash.
; But when the password is recognised, the state-machine instead writes incoming serial data
; to main-flash.
; This allows it to overwrite the BSL-writer with the initial command interpreter, sent
; via the serial input.
; And because the BSL transmits all data received on its serial input, to its serial output,
; a cascaded series of these MSP boards can all be updated simultaneously.
; You only need to send a new version of the command interpreter to the first board
; in the chain.
;
; But what if you want to update the BSL itself?
; In that case, instead of sending a new interpreter, you send this BSL-writer
; carrying the new version of the BSL.
; This time you send the BSL-writer via the serial input not the JTAG port.
; That way you will update the BSLs of all the MSP boards in the chain simultaneously.
;
; The existing BSL will dutifully load the BSL-writer into main flash,
; completely unaware that it has just loaded the instrument of its own demise.
; When the old BSL calls the BSL-writer, thinking it is initialising a new interpreter,
; the BSL-writer will write the new BSL to info-flash and pass control to it.
; Then the interpreter must be sent again, to replace the BSL-writer.
; The BSL-writer still preserves the calibration data, which may now include
; voltage and temperature calibration data in addition to the DCO calibration data
; from the manufacturer.
;
; The BSL code is made to fit in the tiny 256 bytes of info-flash because
; this segment can be protected when the rest of the flash is erased,
; and all other flash segments are 512 bytes and contiguous with each other,
; but not with info-flash.
;
; For this reason, the BSL code is highly hand-optimised for space and
; uses some tricks that may make it hard to follow and hard to modify.
;
; The following is true of this BSL-writer, and the BSL itself
;	They use no interrupts, since the interrupt vectors will be reprogrammed.
;	They use no timer; too many 6-byte instructions!
; The BSL serial input code does not check for false start bits or do majority voting on data bits.

; Conditional assembly parameters which may be changed for special purposes

MClock4		EQU		1				; Non zero if MCLK is 4MHz
LEDWITHTX	EQU		1				; Set to 1 for LED flashing with each TX byte
CALIBRATE	EQU		0				; Set to 1 to perform volts and temperature calibration
									;	(all BMUs) in addition to BSL-programming
CALONLYONE	EQU		0				; Set to 1 to calibrate volts and temp on only 1 BMU
									;	(NOTE: IDs must be set)
									; CALIBRATE and CALONLYONE are mutually exclusive
CALTHIS		EQU		4				; The cell with this ID is used when CALONLYONE is on
CALVOLTS	EQU		3600			; Put the exact test voltage (in millivolts) here
CALTEMP		EQU		19				; Ambient temperature in degrees Celsius
DEBUG		EQU		0				; 1 for debug, e.g. copy voltage reading to $FFF0
RESETIDS	EQU		0				; 1 to generate new IDs starting from byte read serially
FORCEFCAL1	EQU		0				; 1 to force 1 MHz calibration frequency
FREQCAL1	EQU		$86C0			; Value to force 1 MHz frequency calibration to
FORCEFCAL4	EQU		1				; 1 to force 4 MHz calibration frequency
FREQCAL4	EQU		$8AE0			; Value to force 4 MHz frequency calibration to
FD4MHz		EQU		1				; Use 4 MHz clock for $FD00 frequency check, otherwise use 1 MHz


; ADC channel numbers
CellVChan	EQU		$7				; ADC channel number for cell voltage
TempChan	EQU		$A				; ADC channel number for temperature
LinkVChan	EQU		$3				; ADC channel number for link voltage
NumSamples	EQU		16				; Number of ADC over-samples (typ. 4 or 16)
NOBUF		EQU		1				; 1 for no buffer; 0 for buffer

; To get n more bits of resolution, add up 4^n samples and shift the result right by n bits.
; i.e. By adding up 4^n samples you get 2n more bits in the result,
; but half of them are noise and should be thrown away,
; leaving us with n bits of additional information.

; Address imported from the interpreter

interpretByte EQU	$F800			; Where to call the main flash code

; Locations in info-flash, of routines and calibration data
; These addresses must be manually exported to the interpreter.
; Assemble this file with listing-generation enabled, then look at the listing file
; to determine the absolute addresses to put into the interpreter.

infoInitRetAddr	EQU		mainInitRetAddr-for1000+$1000	; Return address when interpretByte
														; is called for initialisation
infoReadByte	EQU		ReadByte	-for1000+$1000		; Where to call ReadByte
infoWriteByte	EQU		WriteByte	-for1000+$1000		; Where to call WriteByte
infoBSLErase	EQU		mainBSLErase-for1000+$1000		; Where to jump in to erase main flash
infoID			EQU		mainID		-for1000+$1000		; Address of BMU ID byte
info1MHzCalD	EQU		main1MHzCalD-for1000+$1000		; Address of 1 MHz DCO frequency calibration
info1MHzCalB	EQU		main1MHzCalB-for1000+$1000		; Address of 1 MHz DCO range calibration
info4MHzCalD	EQU		main4MHzCalD-for1000+$1000		; Address of 4 MHz DCO frequency calibration
info4MHzCalB	EQU		main4MHzCalB-for1000+$1000		; Address of 4 MHz DCO range calibration
infoVoltCalL	EQU		mainVoltCalL-for1000+$1000		; Address of voltage scale calibration lo byte
infoVoltCalH	EQU		mainVoltCalH-for1000+$1000		; Address of voltage scale calibration hi byte
infoTempCal		EQU		mainTempCal	-for1000+$1000		; Address of temperature offset calibration byte
infoLinkCal		EQU		mainLinkCal	-for1000+$1000		; Address of link voltage offset cal byte
infoPWtable		EQU		mainPWtable	-for1000+$1000		; Address of BSL password in reverse-order
infoDataVers	EQU		mainDataVers-for1000+$1000		; Address of Data Version byte
DATAVERS		EQU		5						; This is version 5 of the BMU info-flash data structure

; Locations in info-flash, of calibration data in previous versions of the BSL
; to allow us to update them to the current version without losing their calibration data.

; Version 4 (has $04 at infoDataVers ($10FF))
inf41MHzCalB	EQU		$1002		; Address of 1 MHz DCO range calibration
inf4ID			EQU		$1003		; Address of BMU ID byte
inf41MHzCalD	EQU		$1008		; Address of 1 MHz DCO frequency calibration
inf4VoltCalL	EQU		$1009		; Address of voltage scale calibration lo byte
inf4VoltCalH	EQU		$100F		; Address of voltage scale calibration hi byte
inf4TempCal		EQU		$10A1		; Address of temperature offset calibration byte
inf4LinkCal		EQU		$10BF		; Address of link voltage offset calibration byte
inf44MHzCal		EQU		$10D7		; Address of compressed 4 MHz DCO calibration
inf4PWtable		EQU		$10FC		; Address of BSL password in reverse-order

; New chip (has $FFFF at $10C4)
infN4MHzCalD	EQU		$10F6		; Address of 4 MHz DCO frequency calibration
									; (presumed to be for 4 MHz, not documented by manufacturer)
infN4MHzCalB	EQU		$10F7		; Address of 4 MHz DCO range calibration
									; (presumed to be for 4 MHz, not documented by manufacturer)
infN1MHzCalD	EQU		$10FE		; Address of 1 MHz DCO frequency calibration
infN1MHzCalB	EQU		$10FF		; Address of 1 MHz DCO range calibration

; Interpreter Register Usage
;	Registers 0 thru 3 are dedicated machine registers (PC SP SR CG).
#define 	Rip		R5				// Virtual machine instruction pointer
#define 	Rlit	R6				// Holds partial literals
#define 	Rw		R8				// Working register - temporary - anyone can use

			LSTOUT-
#include "msp430.h"
#include "../common/ControlFlowMacros.h"	// Provides structured control-flow for assembly language
			LSTOUT+

; Error register. 0 means no error
#define		rERR	r4

; The LOCKA bit in FCTL3 was made a *toggle*, for backwards compatibility.
; Use these macros to safely clear and set it.
CLRLOCKA	macro
			BIT		#LOCKA,&FCTL3		; Test LOCKA
			_IF		_NZ					; Currently locked?
				MOV		#FWKEY+LOCKA,&FCTL3 ; Yes, unlock
			_ENDIF
			endm

SETLOCKA	macro
			BIT		#LOCKA,&FCTL3		; Test LOCKA
			_IF		_Z					; Currently unlocked?
				MOV		#FWKEY+LOCKA,&FCTL3 ; Yes, lock
			_ENDIF
			endm


			ORG		$200			; Start of RAM
#if !NOBUF
sampleBuf	ds		NumSamples*2	; Room for 4 or 16, 10-bit samples
#endif
; ByteCodeInterpreter2 variables

base			DS	1				; Number base, 10 or 16
CHKSUM			DS	1				; Packet xor checksum
Checksumming 	DS	1				; Boolean
dontInterpret	DS	1				; Boolean; for 'x' command
TXCksum			DS	1				; Transmit checksum
passWordState	DS	1				; State of the password detection logic; 3 = start

			ALIGNRAM 1
ToIN		DS		2				; Pointer to current character being stored in Text Input Buffer
TIB			DS		1				; Start of Text Input Buffer, grows towards stack


			ORG		$FFFE			; The reset vector
;			dw		$1000			; If this BSL-writer is bootstrap-loaded
									; the reset vector will remain pointing to the BSL
									; and it will be called via interpretByte.
			dw		BSLwriter		; If this BSL-writer is JTAGged
									; the reset vector will point to it directly.
;
; BSL-writer code in main-flash.
; This code copies any existing calibration data from info-flash to the image of the new BSL
; in main-flash, then erases info-flash and copies the new BSL there from its main-flash image.
			ORG		$F800
;
; We need a dummy interpret-byte here; the BSL will call this when
; any bytes are received by the serial port, including "password" bytes.
; The BSL will also call this with a null that was not received by the serial port
; but is intended to initialise the interpreter or BSL-writer.
; It will do this on any reset and after successfully bootstrap-loading
; a new interpreter or BSL-writer.
dummyInterpretByte:
			cmp		#infoInitRetAddr,0(SP)	; Is the call merely for initialisation?
			jeq		anInit					; Yes, don't echo the byte
#if RESETIDS
			cmp		#waitingIDAddr,0(SP)	; Is the call from the waitingID call to ReadByte?
			jnz		noWaitID				; If not, echo as usual
			ret								; Yes, so return to ReadByte's caller (BSL below),
											;	without calling WriteByte (don't echo wrong ID)
noWaitID
#endif
			call	#WriteByte				; No, not initialise call, echo the byte, as the BSL has not
			bic.b	#LED,&P1OUT				; Turn off the error LED
			ret								; Return to the BSL

anInit:		cmp		#$55AA,R15				; Does R15 have the code for "just finished writing"?
			jnz		main					; No, start the BSLwriter (e.g. after downloading)
			ret								; Yes, don't infinitely loop
;
; Start of the actual BSL-writer
;
main:										; For debugger
BSLwriter:	mov		#$280,SP
StopWDT		mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer
#if MClock4
			; Temporary fix for vers 4 data
	; !!! Needs to handle the new-chip case as well. And the case of an unknown version. !!!
	#if FORCEFCAL4
			mov.b	#FREQCAL4 >> 8,&BCSCTL1
			mov.b	#FREQCAL4 & $FF,&DCOCTL
	#else
			cmp.b	#4,&infoDataVers
			_IF		_EQ
				mov.b	&inf44MHzCal,R8				; Load compressed 4 MHz calibration
				rla		R8							; Shift left
				bis		#$8A00,R8					; OR in assumed MSbs
				swpb	R8
				mov.b	R8,&BCSCTL1					; Store uncompressed 4 MHz calibration
				swpb	R8							; Least significant bit was lost by compression
				mov.b	R8,&DCOCTL					;	and may need checking
			_ELSE
				mov.b	&info4MHzCalB,&BCSCTL1	; 4MHz
				mov.b	&info4MHzCalD,&DCOCTL
			_ENDIF
	#endif
#else										; Else frequency is 1 MHz
			cmp.b	#4,&infoDataVers
			_IF		_EQ
				mov.b	&inf41MHzCalB,&BCSCTL1	; Set range for 0.54 to 1.06 MHz
				mov.b	&inf41MHzCalD,&DCOCTL	; Set DCO step + modulation for 1.00 MHz
			_ELSE
				mov.b	&info1MHzCalB,&BCSCTL1	; Set range for 0.54 to 1.06 MHz
				mov.b	&info1MHzCalD,&DCOCTL	; Set DCO step + modulation for 1.00 MHz
			_ENDIF
#endif

			; Set P1.4 as an output as well as the LED. This will put 0V at the bottom of the link
			; voltage divider, so we can test with paralleled boards, and not have > Vcc on any
			; analogue input (trust me, you get meaningless conversions)
			mov.b	#LED+(1<<4)+TXDp+TXDm,&P1DIR ; Set LED, P1.4, and TX bits to output
			mov.b	#TXDp,&P1OUT			; Turn off LED and bypass; set TXDp
			clr		rERR					; Clear error register

; Prepare to flash-program over some $FFs in the BSL image in main flash
; Assumes ACCVIE = NMIIE = OFIE = 0.
; FSSEL: 1=MCLK FN: 2=divide by 3, 11=divide by 12. Must end up in the range 257-476 kHz
#if MClock4
				MOV		#FWKEY+FSSEL_1+FN0*(12-1),&FCTL2 ; For 4 MHz MCLK
#else
				MOV		#FWKEY+FSSEL_1+FN0*(3-1),&FCTL2 ; For 1 MHz MCLK
#endif
			MOV		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA
			MOV		#FWKEY+WRT,&FCTL1		; Enable write (can leave enabled; only write-block cant be)
			
;
; If RESETIDS is set, read the ID here.
; It just doesn't seem to work out to use the delay between BMUs to determine the correct ID, so
; we simply read the ID from the serial port, and echo the next ID downstream.
; As a sanity check, expect an "I" first; this ensures that the CPU speed is about right
#if RESETIDS
			call	#ReadByte				; This byte is echoed
			cmp		#'I',R8					; The sanity check for serial speed
			jeq		gotI					; Branch if correct
			mov		#2,rERR
			jmp		errorFlash				; Flash error LED twice
gotI
			call	#ReadByte				; Read the byte into R8, don't echo it, trashes R9 R10 R11
											; Not echoed because of logic in dummyInterpretByte
waitingIDAddr								; This address will be on the stack in dummyInterpretByte
			mov		R8,R12					; Save our ID
			inc		R8
			call	#WriteByte				; Send downstream BMU's ID
			bic.b	#LED,&P1OUT				; Clear LED set by WriteByte
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer (ReadByte has re-set)
			mov.b	R12,&mainID				; Flash write our ID
#endif

;
; If we find $FFFF (erased flash) at $10C4 (near start of info-flash protected segment A),
; then assume it's a new chip.
			cmp		#$FFFF,&$10C4	; Don't look at $1000 in case JTAG debugger is set to erase it
			jeq		newChip			;	before downloading
			
; It's not a new chip so check the data version number at the end of info-flash.
			cmp.b	#DATAVERS,&infoDataVers
			jeq		currVersBSL
			jge		unknownVersBSL
			cmp.b	#4,&infoDataVers
			jeq		vers4BSL
;			cmp.b	#3,&infoDataVers
;			jeq		vers3BSL
			jl		unknownVersBSL


newChip
; A new chip. We want to preserve some of the existing DCO calibration data

			; Leave the voltage, temperature and link calibration as $FF
			mov.b	&infN4MHzCalB,&main4MHzCalB	; Copy 4 MHz calibration data
			mov.b	&infN4MHzCalD,&main4MHzCalD
			mov.b	&infN1MHzCalB,&main1MHzCalB	; Copy 1 MHz calibration data
			mov.b	&infN1MHzCalD,&main1MHzCalD
			jmp		donePrep
			
			
unknownVersBSL
; Version number is higher or lower than this BSL-writer knows about,
; so we program it anyway (as if current version) but alert the user afterwards
			mov		#4,rERR
			

currVersBSL
#if CALONLYONE & !RESETIDS
			mov.b	&infoID,&mainID				; We preserve the IDs here unless RESETIDs is on
#endif
#if !CALIBRATE
#if CALONLYONE
			cmp.b	#CALTHIS,&mainID			; Calibrate only one... is this the one?
			jeq		noCopyCalNew
#endif
			mov.b	&infoVoltCalL,&mainVoltCalL	; Copy calibration data, since not recalibrating
			mov.b	&infoVoltCalH,&mainVoltCalH
			mov.b	&infoTempCal,&mainTempCal
			mov.b	&infoLinkCal,&mainLinkCal
#endif
noCopyCalNew
#if	FORCEFCAL4
;			mov.b	#((FREQCAL4>>1) & $FF),&main4MHzCal	; Set compressed version of forced value
			mov.b	#FREQCAL4 >> 8,&main4MHzCalB
			mov.b	#FREQCAL4 & $FF,&main4MHzCalD
#else
;			mov.b	&info4MHzCal,&main4MHzCal	; Copy compressed 4 MHz calibration
			mov.b	&info4MHzCalB,&main4MHzCalB	; Copy 4 MHz calibration
			mov.b	&info4MHzCalD,&main4MHzCalD
#endif
#if FORCEFCAL1
			mov.b	#FREQCAL1 >> 8,&main1MHzCalB
			mov.b	#FREQCAL1 & $FF,&main1MHzCalD
#else
			mov.b	&info1MHzCalB,&main1MHzCalB	; Copy 1 MHz calibration
			mov.b	&info1MHzCalD,&main1MHzCalD
#endif
			jmp		donePrep


vers4BSL
#if CALONLYONE & !RESETIDS
			mov.b	&inf4ID,&mainID				; We preserve the IDs here unless RESETIDs is on
#endif
#if !CALIBRATE
#if CALONLYONE
			cmp.b	#CALTHIS,&mainID
			jeq		noCopyCalOld4
#endif
			mov.b	&inf4VoltCalL,&mainVoltCalL	; Copy calibration data, since not recalibrating
			mov.b	&inf4VoltCalH,&mainVoltCalH
			mov.b	&inf4TempCal,&mainTempCal
			mov.b	&inf4LinkCal,&mainLinkCal
#endif
noCopyCalOld4
#if	FORCEFCAL4
			mov.b	#FREQCAL4 >> 8,&main4MHzCalB
			mov.b	#FREQCAL4 & $FF,&main4MHzCalD
#else
			mov.b	&inf44MHzCal,R8				; Load compressed 4 MHz calibration
			rla		R8							; Shift left
			bis		#$8A00,R8					; OR in assumed MSbs
			mov.b	R8,&main4MHzCalD			; Store uncompressed 4 MHz calibration
			swpb	R8							; Least significant bit was lost by compression
			mov.b	R8,&main4MHzCalB			;	and may need checking
#endif
#if FORCEFCAL1
			mov.b	#FREQCAL1 >> 8,&main1MHzCalB
			mov.b	#FREQCAL1 & $FF,&main1MHzCalD
#else
			mov.b	&inf41MHzCalB,&main1MHzCalB	; Copy 1 MHz calibration
			mov.b	&inf41MHzCalD,&main1MHzCalD
#endif	
			;jmp		donePrep


			
donePrep

#if CALONLYONE
			cmp.b	#CALTHIS,&mainID		; When CALONLYONE is set,
			jne		doneCalibrate			;	mainID is already programmed at this point
#endif

#if CALIBRATE | CALONLYONE
			mov		#CellVChan<<12,R8		; ADC channel for scaled cell voltage input
			call	#measure
#if DEBUG
			mov		R8,&$FFF0				; Copy voltage reading to flash
#endif

; The calibration scale factor will be the expected value divided by the reading.
; The expected value is an unsigned 12 bit integer of millivolts and
; the reading is an unsigned 12.2 bit fixed-point number of millivolts.
; We want the calibration scale factor to be represented as an unsigned 1.15 fixed-point number
; i.e. a number with 1 integer bit and 15 fractional bits.
; So we shift the expected value 17 places left before the division.
CalVoltDividend	SET	CALVOLTS<<17	
			mov		#LWRD CalVoltDividend,R9	; Dividend lo word into R9
			mov		#HWRD CalVoltDividend,R10	; Dividend hi word into R10
			mov		R8,R11						; The divisor is the voltage reading in R8
			rra		R11							; Add half the divisor to the dividend for rounding
			add		R11,R9
			adc		R10
			call	#UMSlashMOD				; Gives quotient in R9, remainder in R10
			
			mov.b	R9,&mainVoltCalL		; Flash write calibration value lo byte
			swpb	R9
			mov.b	R9,&mainVoltCalH		; Flash write calibration value hi byte

;
; Temperature offset calibration
; M = 4096/1.5 * (.00355 T + typ0.986)
;	= 9.694*T + typ2692
; M/9.694	= T + typ277.7
; Per the MSP430F2012 datasheet, typ277.7 aims at 273, so the reading is proportional
; to the absolute temperature, with an offset of +- 100 mV.
			; We use offsetByte = (M/9.694 - T) >> 1
; So we use offsetByte = (M/9.694 - T) - 273
; and T = M/9.694 - 273 - offsetByte
;
			mov		#TempChan<<12,R8			; ADC channel for temperature sensor
			call	#measure
			
; Calibrate the value by multiplying the sum-of-samples by the voltage calibration scale factor
; in infoFlash.
; The sum-of-samples, when considered as a single oversampled-and-decimated reading,
; is an unsigned 12.2 bit fixed-point number of millivolts.
; The calibration factor is an unsigned 1.15 bit fixed-point number.
; We want a 12 bit integer result in millivolts.
; That means we have to shift the product 17 bits to the right, which is equivalent to
; throwing away the lo word and shifting the high word one bit to the right.
			mov.b		&mainVoltCalL,R9		; Get voltage calibration lo byte
			mov.b		&mainVoltCalH,R10		; Get voltage calibration hi byte
			swpb		R10						; Assemble the two bytes into a word
			bis			R10,R9					; as multiplicand in R9
												; Multiplier is sum-of-samples, already in R8
			call		#UMStar				; Gives unsigned product in R10 (hi word) & R9 (lo word)
												; Note: calls assembler code that ends in ret
			inc			R10						; For correct rounding
			rra			R10						; Shift product hi word right one bit

; To divide by 9.694, multiply by 65536/9.694 = 6760
			mov		R10,R8
			mov		#6760,R9
			call	#UMStar
			sub		#CALTEMP+273,R10
;			rra		R10							; Temp offset now fits in a byte
			mov.b	R10,&mainTempCal			; Flash write temperature offset calibration value
			
#endif		/* #if CALIBRATE */


doneCalibrate


; Erase info flash including segment A.
startErase
			mov		#$1000,R12				; Start of info-flash
eraseInfo	MOV		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA
			MOV		#FWKEY+ERASE,&FCTL1		; Enable single segment erase (doesn't seem to "stick")
			rra		@R12					; Dummy write: erase segment
			add		#64,R12					; Next segment
			cmp		#$10C0,R12
			jnz		eraseInfo				; Loop until at start of segment A
			CLRLOCKA						; Clear segment A lock (so we can erase and write it also)
			MOV		#FWKEY+ERASE,&FCTL1		; Enable single segment erase
			rra		@R12					; Dummy write: erase segment A

			MOV		#FWKEY+WRT,&FCTL1		; Enable write (can leave on; only write block that can't)
			clr		R12						; $1000 is start of info flash
			mov		#for1000,R9				; Start of code to write there
pifLoop		mov.w	@R9+,$1000(R12)			; Program word
			incd	R12
			cmp		#256,R12				; Test index
			jnz		pifLoop					; Repeat until done
			

			MOV		#FWKEY,&FCTL1			; Done. Clear WRT
			MOV		#FWKEY+LOCK+LOCKA,&FCTL3 ; Set LOCKs
			SETLOCKA						; Ensure segment A is locked
			;
			; Check that the flash programming worked
			;
			call	#compareImage			; Compare the for1000 image with what's at 1000
			jnz		failCompare
			
			tst		rERR
			jnz		errorFlash
			;
			; Compares successfully. Point reset vector to new code.
			; NOTE: this will erase all other interrupt vectors, and the last 512 bytes (quarter) of
			; main-flash!
			;
			bis.b	#LED,&P1OUT				; Turn on LED briefly (BSL will revert) to indicate success
			MOV		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA
			MOV		#FWKEY+ERASE,&FCTL1		; Enable single segment erase
			rra.b	&$FFFF					; Dummy write: erase segment
			MOV		#FWKEY+WRT,&FCTL1		; Enable write
			mov		#$1000,&$FFFE			; Re-point reset vector
			MOV		#FWKEY+LOCK,&FCTL3		; Set LOCK; no accidental flash programming

			bic.b	#WDTIFG,&IFG1			; Clear the watchdog timer interrupt flag
			mov		#$55AA,R15				; Set R15 (= Rstate) to pattern to prevent infinite loops
			br		#$1000					; Start the new BSL


failCompare mov		#3,rERR
errorFlash:
; We could end up here after the 4 MHz calibration has been set to FFFF. so the processor is
;	running very fast
			mov.b	#$8A,&BCSCTL1			; "Average" 4 MHz calibration
			mov.b	#$BC,&DCOCTL			;	value so we can read the flashes

			mov		rERR,R11
			add		R11,R11					; Double (two transitions for one "flash")
#if MClock4
				rla		R11
				rla		R11						; And quadruple for 4 MHz
#endif
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer (ReadByte may have reset)
errFlashLp	xor.b	#LED,&P1OUT				; The best we can do is freeze and flash LED
delay		dec		R12
			jnz		delay
count		dec		R11
#if	MClock4
				bit		#3,R11
				jnz		delay					; Extra delays for 4 MHz
				tst		R11
#endif
			jnz		errFlashLp
			;
			; Pause between rErr flashes
#if	MClock4
pause			mov		#5*4,R11
#else
pause			mov		#5,R11
#endif
pauseL		dec		R12
			jnz		pauseL
			dec		R11
			jnz		pauseL
			jmp		errorFlash


; Some definitions so the common code will work
#define ID	infoID
waitTxCmpl	ret						; Empty routine: transmit is always complete
TX_ByteCk	xor.b	R8,&TXCksum		; Alternative entry which accumulates checksum
TX_Byte		clr		R11				; Needed for BSL's WriteByte
			jmp		WriteByte

#define		VoltCalL	infoVoltCalL		// Needed for measure code
#define		VoltCalH	infoVoltCalH
#define		TempCal		infoTempCal
#define		LinkCal		infoLinkCal


#include "../common/measure.s43"			// ADC Measurement
#include "../common/math.s43"				// Multiply and divide
//#include "../common/comMacros.h"			// Macros for obscure instruction sequences

;
; Compare the 256 bytes at for1000 with what's at $1000. Returns with Z set if OK, Z clear if not
compareImage:
			clr		R12
cmpLoop		cmp		$1000(R12),for1000(R12)
			jnz		justRet
			incd	R12
			cmp		#256,R12
			jnz		cmpLoop
justRet		ret


; ----------------------------------------------------------------------------
; The bootstrap loader (BSL)
;
; This will be relocated to info-flash which starts at $1000.
#include "../common/bsl.s43"


freespace		EQU		$FD00-$
#define BCD(x)			( x / 100 * $100 + x % 100 / 10 * $10 + x % 10 )
spaceaspercent	EQU		BCD( (100*freespace)/2048)




;
; Short test program for processor Frequency Derivation. Handy when we lose the frequency calibration
; values.
; Note: Don't put at $FE00 or later; gets erased by the code to rewrite the restart vector
			ORG		$FD00
			mov		#$280,SP
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop watchdog timer

			mov.b	#0,&P1OUT				; Set TXD outputs the same, bypass and LED off
			bis.b	#TXDp+TXDm+BYPASS+LED,&P1DIR ; Set TXDs, LED and BYPASS as outputs
#if	FD4MHz
			mov.b	&info4MHzCalB,&BCSCTL1	; Set for 4 MHz using data layout version 5
			mov.b	&info4MHzCalD,&DCOCTL
#else
			mov.b	&info1MHzCalB,&BCSCTL1	; Set range for 0.54 to 1.06 MHz
			mov.b	&info1MHzCalD,&DCOCTL	; Set DCO step + modulation for 1.00 MHz
#endif

			call	#flash20

;
; Fastest possible toggle: 7 cycles, or 1000/14 = 71.4 kHz @ 1 MHz, or 2000/14 = 142.9 kHz @ 2 MHz
; or 4000/14 = 285.7 kHz @ 4 MHz
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer
fastFlash
			xor.b	#LED+TXDp+TXDm,&P1OUT	; Toggle the LED and both transmit outputs at the same time
											; This won't upset the next BMU, if in-situ, and the
											; frequency can be tested from above the board
;			mov		#30000,R12				; Longer delay (slower flash)
;delay		dec		R12
;			jnz		delay
			jmp		fastFlash

flash20		mov		#20,R11
first		xor.b	#LED,&P1OUT
			mov		#20000,R12				; Longer delay (slow flash)
delay1		mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart Watchdog Timer
			dec		R12						; 7 cycle loop
			jnz		delay1
			dec		R11
			jnz		first
			ret


			END
