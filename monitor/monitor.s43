			COL		150			; Wide listings

			LSTOUT-
#include "msp430.h"							// MSP430 Special Function Register definitions
#include "../common/ControlFlowMacros.h"	// Provides structured control-flow for assembly language
#include "../common/comMacros.h"			// Assembler macros for obscure instruction sequences
			LSTOUT+
#include "../common/common.h"				// Definitions common to monitor, TestICal and BSL
											// such as WATCHDOG, IMAGE_START, BSL_IMAGE_START

			NAME	main		; Module name
			PUBLIC	main		; Make the "main" label visible for IAR debugger



; Addresses manually imported from the BSL-writer or TestICal. Version 6. Keep up to date!
InitRetAddr	EQU		$102E		; Return address when interpretByte is called for initialisation
ReadByte	EQU		$1094		; Calling-address to receive byte in R8
WriteByte	EQU		$10CC		; Calling-address to transmit byte in R8
BSLErase	EQU		$1040		; Jump-in-address for erasing flash and continuing a download
VoltCal		EQU		$10F8		; Address of Voltage scale calibration word
TempCal		EQU		$10FA		; Address of Temperature offset calibration byte
LinkCal		EQU		$10FB		; Address of Link Voltage offset calibration byte
MHz8CalD	EQU		$10FC		; Address of frequency calibration data
MHz8CalB	EQU		$10FD		;	for 8 MHz
ID			EQU		$10FE		; Address of this cell's/BMU's identification byte


; Interpreter Register Usage (defined in BytecodeInterpreter2.s43)
;	Registers 0 thru 3 are dedicated machine registers (PC SP SR CG).
#define		Rip		R5				// Interpreter instruction pointer
#define		Rlit	R6				// Holds partial literals
#define		Rtos	R7				// Top of interpreter data stack
#define		Rw		R8				// Working register - temporary - anyone can use

; Conditional assembly
#define		WATCHDOG	1			// True if watchdog timer is to be used (only turn off for debugging)
#define		ADCBUF		0			// 0 for no ADC sample buffer; 1 for buffer.
									// Buffered ADC is mainly useful for debugging.

; Constants

; Stress calculations
; Stress set-point is intended to be 7. Alarm is given at stress 11 or more.
BYPLEV		EQU		3560		; Bypass threshold in millivolts. Corresp. to stress 5/6 threshold
// OV = Over Voltage: One stress unit for each 10 mV in excess of 3.500 V, to a max of 15 at >= 3.65 V
// OV setpoint is 3.57 to 3.58 V. Alarm at 3.61 V.
OV_ZERO		EQU		3500		; Threshold in mV between OV stress levels -1 and 0
OV_STEP		EQU		10			; mV difference between one OV stress level and the next
// UV = Under Voltage: One stress unit for each 40 mV below 2.500 V, to a maximum of 15 at <= 1.90 V
// UV setpoint is 2.18 to 2.22 V. Alarm at 2.06 V.
UV_ZERO		EQU		2500		; Threshold in mV between UV stress levels -1 and 0
UV_STEP		EQU		-40			; mV difference between one UV stress level and the next
// OT = Over Temperature: One stress unit for every 1 degree C above 40C, to a max of 15 at >= 55degC
// OT setpoint is 47 to 48 degC. Alarm at 51 degC.
OT_ZERO		EQU		40			; Threshold in degrees C between OT stress levels -1 and 0
OT_STEP		EQU		1			; Degrees C difference between one OT stress level and the next
// UT = Under Temperature: One stress unit for every 1 degree C below 11C, to a max of 15 at <= -4degC
// UT setpoint is 4 to 3 degC. Alarm at 0degC.
UT_ZERO		EQU		11			; Threshold in degrees C between UT stress levels -1 and 0
UT_STEP		EQU		-1			; Degrees C difference between one UT stress level and the next
// AL = Absolute Link voltage: One stress unit for every 10 mV above 0 mV, to a max of 15 at >= 150 mV
// AL setpoint is 70 to 80 mV. Alarm at 110 mV.
AL_ZERO		EQU		0			; Threshold in mV between AL stress levels -1 and 0
AL_STEP		EQU		10			; mV difference between one AL stress level and the next

minLEDStress EQU	11			; Minimum stress to light error LED
minAlrmStress EQU	11			; Minimum stress to sound alarm	(not in use yet)

comErrTicks	EQU		2			; Minimum ticks without receiving valid status byte before
								;	taking on master duties and reporting comms error (if ID not 1)

; Status byte bit masks - Used for localStatus in RAM as well as RXed and TXed status bytes
COM_ERR		EQU		1<<6			; Communications error
ALL_BYP		EQU		1<<5			; All in bypass
ENC_STRESS	EQU		$1F				; Encoded stress. Bits 0-4. Bit 4 is a check bit
STRESS		EQU		$0F				; Raw stress. Bits 0-3

; Port 1 bit masks
TXDm		EQU		1<<1			; TA0/P1.1
RXD			EQU		1<<2			; Receive data on P1.2 (bit number >3 costs 3 words in BSL)
VREFp		EQU		1<<4			; Analog reference output. Sometimes changed to low digital output
TXDp		EQU		1<<5			; SCLK/P1.5
PIEZO		EQU		1<<0			; Piezo on P1.0
ACTLED		EQU		1<<3			; Actvity LED (blue) inverted on P1.3
; Port 2 bit masks
BYPASS		EQU		1<<6			; Bypass transistor on pin P2.6
ERRLED		EQU		1<<7			; Error LED (red) on P2.7

; ADC channel numbers
CellVChan	EQU		$7				; ADC channel number for cell voltage
TempChan	EQU		$A				; ADC channel number for temperature
LinkVChan	EQU		$6				; ADC channel number for link voltage
NumSamples	EQU		16				; Number of ADC over-samples (typ. 4 or 16)

; Serialio definitions (Here because used in initialisation)
#define		TACCTLr		TACCTL1		// Receive using CCI1 (P1.2)
#define		TACCTLt		TACCTL0		// Transmit (and everything else) using TA0
#define		TACCRt		TACCR0		// Transmit compare register
#define		TACCRr		TACCR1		// Receive capture/compare register

;
; RAM allocation
;
				ORG		$200			; Start of RAM. Ends at $27F
#if	ADCBUF
				ALIGNRAM 1
sampleBuf		DS		2*NumSamples ; ADC sample buffer; 4 or 16 samples
#endif

monFlags		DS		1			; Monitor flags, bitmask definitions follow
bNotSendStatus	EQU		1<<0		; Zero if sending status bytes at all
bNotMeasureTime EQU		1<<1		; Zero if time to measure
bNotCharging	EQU		1<<2		; Zero if discharging (not charging or regen braking)

localStatus		DS		1			; Local stress, comms error and bypass status (0-2 stress,
									;	6 comms error, 5 all-in-bypass)
ticksSinceLastRx DS		1			; Timer overflow events since last valid status received
passWordState	DS		1			; State machine for password recogniser

; Serialio variables

				ALIGNRAM 1
TXData			DS		2			; Byte to transmit in lower byte; always $FF in high byte
RXData			DS		1			; Received char
BitCntTx		DS		1			; Bit count 10 -> 1
BitCntRx		DS		1			; Bit count 8 -> 1
TXCksum			DS		1			; Transmit checksum

rxsz			EQU		8			; Receive queue size. Must be a power of 2 no greater than 256
									; 8 is sufficient to prevent dropped cmd and response characters
txsz			EQU		8			; Transmit queue size. Must be a power of 2 no greater than 256
									; 4 is sufficient to reduce dropped status to less than one a minute
				ALIGNRAM 1
rxbuf			DS		rxsz		; Receive queue buffer
rxwr			DS		1			; Receive queue write index
rxrd			DS		1			; Receive queue read index
txbuf			DS		txsz		; Transmit queue buffer
txwr			DS		1			; Transmit queue write index
txrd			DS		1			; Transmit queue read index

; ByteCodeInterpreter2 variables

RXCksum			DS		1			; Received packet xor checksum
intFlags		DS		1			; Interpreter flags, bitmask definitions follow
bHexOutput		EQU		1			; Should numeric output be in hexadecimal, not decimal?
bChecksumming	EQU		2			; Are we sending checksums and checking received checksums?
bDontInterpret	EQU		4			; Are we interpreting?

				ALIGNRAM 1			; A kind of trip-meter for this cell's stress
worstStress		DS		1		; Worst local stress since the last resetWorstStress command
worstStressType	DS		1		; Character giving type of measurement that caused worst stress
worstStressMeas	DS		2		; Value of measurement that caused worst stress

				ALIGNRAM 1
ToIN			DS		2			; Pointer to current character being stored in Text Input Buffer
TIB				DS		48			; Text Input Buffer (packet buffer)
TIBEnd
; Must leave room for stack (about 36 bytes)

;-------------------------------------------------------------------------------
				ORG		IMAGE_START	; Reset vector points here
;-------------------------------------------------------------------------------

interpretByte:
main:										; For IAR Embedded Workbench IDE debugger
			mov.w	#$280,SP				; Initialize stackpointer
#if !WATCHDOG
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer (bad idea, except while debugging)
#endif
			; Clear all variables in RAM except worstStress (and ToIN/TIB)
			_DO		#worstStress-$200,R8
				clr		$200-2(R8)
			_mLOOP	#2,R8

			; LOG2 -- The following preprocessor-macro gem is due to Dave Keenan.
			; It is based on a Taylor series expansion. It is valid for the domain 1-64, and range 0-6.
			; NOTE: It depends on the assembler rounding toward negative infinity (floored division).
			; There is a similar simple formula for rounding towards zero (truncated division).
#define LOG2(x) (4 * (x-8) / (x+8) + 3)

			; Initialise clocks. SMCLK is only used by comms timer and watchdog timer.
			; DIVS_1 => SMCLK = DCOCLK/2	DIVS_2 -> SMCK = DOCLK/4
			; DIVM_1 => MCLK = DCOCLK/2
			mov.b	#DIVM_1+LOG2(DCOckPerSMck)*DIVS_1, &BCSCTL2
			mov.b	&MHz8CalB,&BCSCTL1		; 8 MHz DCO cal data
			mov.b	&MHz8CalD,&DCOCTL
			; Prepare ACLK for piezo drive -- 3 kHz square wave
			bis.b	#LFXT1S_2,&BCSCTL3		; Select VLOCLK (~12 kHz) as source for ACLK divider

;
;	Initialise timer and interrupt comms
;
			; TASSEL: 1 = ACLK clock source, 2 = SMCLK (sub master clock)
			; ID: 3 = /8; 2 = /4; 1 = /2; 0 = /1
			; MC: 2 = continuous mode 1 = up mode
			; TAIE = interrupt enable (for timer overflow)
			mov		#TASSEL_2 + LOG2(SMckPerTAck)*ID_1 + MC_2 + TAIE, &TACTL

			; Set up differential timer outputs for transmit data.
			; Tricky way of getting inverted TA0 to appear on P1.5 automatically
			; when TA0 appears on P1.1.
			; We use the clock inverter in the USI (Universal Serial Interface)
			; to invert TA0 and put it out as SCLK, in SPI master mode.
			; We don't use the shift register of the USI because there is
			; no way to get differential outputs from that without external hardware.
			mov.b	#RXD+TXDm,&P1SEL			; Select timer functions CCI1A and TA0 (not I/O port)
			mov.b	#ACTLED,&P1OUT				; Turn off (inverted) ActLED
			mov.b	#ACTLED+VREFp+TXDp+TXDm+PIEZO,&P1DIR ; Set ActLED, VREFp, TX bits and piezo to output
			mov.b	#0,&P2SEL					; Set BYPASS and ERRLED to not be crystal osc pins
			mov.b	#0,&P2OUT					; Set BYPASS and ERRLED off
			mov.b	#$FF,&P2DIR					; Set BYPASS and ERRLED as outputs

			mov.b	#USIPE5 + USIMST, &USICTL0	; SCLK out on P1.5, SPI Master mode, remove SW Reset
			mov.b	#USIDIV_0 + USISSEL_5 + USICKPL, &USICKCTL ; SCLK source is TA0, div by 1, inverted
			mov.b	#8, &USICNT					; To clear USIIFG so SCLK will not be held

			; Make TA0 (output of Timer-A capture/compare unit 0) appear on P1.1
			; We want to set the CCIFG so that TX_Byte won't think there's an uncompleted stop bit
			; and wait for it to complete.
			mov		&TAR,&TACCRt				; Make an output event
			add		#4,&TACCRt					;	happen in a dozen or so instructions
			; NOTE: the above has to be enough to get past setting of OUTMOD_5 for TACCTLt below
			mov.w	#OUTMOD_0 + OUT, &TACCTLt	; TA0=1 Space; seems necessary to "wake up" SCLK divider
			mov.w	#OUTMOD_5, &TACCTLt			; When the compare happens, set TA0=0 Idle or Mark

			mov.b	#$FF,&TXData+1				; Initialise the top half of TXData to all 1s (stop bit,
												;	idle bit)
			mov.b	#8,&BitCntRx				; Load Bit Counter, 8 data bits
;			clr.b	TXCksum						; Clear transmit checksum. Already cleared by loop above
			mov.w	#CM_2+CCIS_0+SCS+CAP+CCIE,&TACCTLr	; Falling edge, Input A, Sync, Capture
;			clr.b	&rxwr						; Initialise the TX and RX queue indexes
;			clr.b	&rxrd						;	Already cleared by loop above
;			clr.b	&txwr
;			clr.b	&txrd

;
; Initialise the ADC10
;
			; Enable cell and link analog inputs. Enable ADC function of P1.4 (Vref+ out)
			mov.b		#(1<<CellVChan)|(1<<LinkVChan)|(1<<4),&ADC10AE0
			; Initialise ADC10
			; SREF_1	= +-refs are Vref+ and AVSS
			; ADC10SHT_3 = sample time is 64 ADC10CLKs (32 us required for temp)
			; REFOUT	= connect Vref+ to pin P1.4
			; REFON		= turn on the voltage reference and reference buffer
			mov			#SREF_1+ADC10SHT_3+REFOUT+REFON,&ADC10CTL0
			; Other ADC10 initialisation is done every time "measure" is called, to save code

;
; Initialise the command character (bytecode) interpreter
;
			mov		#TIB,&ToIN				; Packet pointer

;
; Miscellaneous initialisation
;
			mov.b	#4,&passWordState		; Waiting for first byte of ^C ^B ^A ^@ sequence

; Main loop
			_BEGIN
				dint
				;nop							; First instruction after dint not protected
				call	#RX_RawByteNW			; Check if received data
				_IF		_NZ
					eint
					tst.b	R8
					_IF		_NN
						call	#TX_Byte				; Echo the command or password byte
						call	#DoPassword				; Check for password bytes
						call	#ACCEPT					; Process command bytes (could take a long time)
					_ELSE
						call	#DoStatus				; Forward possibly-updated status bytes
					_ENDIF
				_ELSE
					bit.b	#bNotMeasureTime,&monFlags	; Check if time to measure
					_IF		_Z							; If not, skip measurement and set/clear of bypass
						eint
						bis.b	#bNotMeasureTime,&monFlags
						call	#DoMeasurement			; May send status
					_ELSE
						mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer before sleeping CPU
						;eint							; Interrupts are enabled by following bis instr:
						bis		#CPUOFF+GIE,SR			; Turn off CPU, enable interrupts
					_ENDIF
				_ENDIF
#if WATCHDOG
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart Watchdog Timer each time around main loop
#endif
			_AGAIN
; End of main loop


DoMeasurement:
;
; Regular measurement. Called StatusFreq times per second (2-16 times per second, see serialio.s43)
;
#define Rstrs R12				// Worst stress (present, not trip)
#define Rmeas R14				// Measurement causing worst stress
#define Rtype R15				// Type of measurement causing worst stress

			clr		Rstrs					; Init present stress to zero
			clr		Rmeas					; Init measurement causing zero stress to zero
			mov.b	' ',Rtype				; Init type of measurement causing zero stress to blank
			
			inc.b	&ticksSinceLastRx		; Cleared whenever valid stress byte received
			_IF		_C						; If unsigned overflow
				mov.b	#$FF,&ticksSinceLastRx	; Saturate at $FF
			_ENDIF

			; Do cell voltage measurement
			call	#cellV					; Get cell voltage in mV in R10
			push	R10						; Save measurement for undervoltage stress calc
			
			; Set bypass as required
			cmp		#BYPLEV,R10				; Compare current cell voltage (R10) to the bypass threshold
			CtoAllBits	R8					; If voltage >= threshold then $FF else $00
			mov			R8,R9
			movBits_B	R8,#BYPASS,&P2OUT	; Move only the #BYPASS bit from R8 to &P2OUT. Trashes R8
			movBits_B	R9,#ALL_BYP,&localStatus ; Move only the #ALL_BYP bit from R9 to &localStatus.
			
			; Calculate stress due to overvoltage
			push	R10						; Measurement for overvoltage stress calc
			push	#OV_STEP				; For every OV_STEP (millivolts)
			push	#OV_ZERO				;	over OV_ZERO, we add one level of stress
			push	#'v'					; Type of measurement
			call	#DoStress				; Update Rstrs Rmeas Rtype if non-zero stress due to OV

			; Calculate stress due to undervoltage
											; Measurement saved on stack earlier
			push	#UV_STEP				; For every UV_STEP (millivolts)
			push	#UV_ZERO				;	below UV_ZERO, we add one level of stress
			push	#'v'					; Type of measurement
			call	#DoStress				; Update Rstrs Rmeas Rtype if worse stress due to UV

			; Do temperature measurement
			call	#temp					; Get temperature in degrees Celsius in R10
			push	R10						; Save measurement for undertemperature stress calc
			
			; Calculate stress due to overtemperature
			push	R10						; Measurement for overtemperature stress calc
			push	#OT_STEP				; For every OT_STEP (degrees Celsius)
			push	#OT_ZERO				;	over OV_ZERO, we add one level of stress
			push	#'t'					; Type of measurement
			call	#DoStress				; Update Rstrs Rmeas Rtype if worse stress due to OT

			; Calculate stress due to undertemperature if required
			bit.b	#bNotCharging,&monFlags	; If charging (including regen braking)
			_IF		_Z
												; Measurement saved on stack earlier
				push	#UT_STEP				; For every UT_STEP (degrees Celsius)
				push	#UT_ZERO				;	below UT_ZERO, we add one level of stress
				push	#'t'					; Type of measurement
				call	#DoStress				; Update Rstrs Rmeas Rtype if worse stress due to UT
			_ELSE
				pop		R10						; Drop unused temp measurement off stack
			_ENDIF
			
			; Do link voltage measurement
			call	#linkV					; Get link voltage in mV in R10
			cmp		#9999,R10				; Special "invalid" value?
			_IF		_NE						; Only calculate link stress if not this value			
				; Calculate stress due to excessive absolute link voltage
				tst		R10						; Get absolute value of link voltage
				_IF		_L
					inv		R10
					inc		R10
				_ENDIF
				push	R10						; Measurement for absolute link stress calc
				push	#AL_STEP				; For every AL_STEP (millivolts)
				push	#AL_ZERO				;	over AL_ZERO, we add one level of stress
				push	#'l'					; Type of measurement
				call	#DoStress				; Update Rstrs Rmeas Rtype if worse stress due to AL
			_ENDIF			
			
			; Check for stress overflow and saturate it
			cmp		#STRESS,Rstrs			; If the stress is worse than we can fit in status byte
			_IF		_HS
				mov		#STRESS,Rstrs			; Use the maximum we can fit
			_ENDIF
			
			; Update local present stress, and worst stress for trip so far
			mov.b	Rstrs,R8				; Copy stress. movBits_B instruction trashes its source.
			mov.b	stressTable(R8),R8		; Encode it with checkbit
			movBits_B R8,#ENC_STRESS,&localStatus ; Record for later use, preserving other status bits.
			cmp.b	&worstStress,Rstrs		; If stress equal or higher than worstStress for trip so far
			_IF		_HS
				tst.b	Rstrs					; and it's an actual, nonzero stress
				_IF	_NZ
					mov.b	Rstrs,&worstStress		; Update worstStress
					mov		Rmeas,&worstStressMeas	; Update value of measurement causing worst stress
					mov.b	Rtype,&worstStressType	; Update type of measurement causing worst stress
				_ENDIF
			_ENDIF
			
			; Update Alarm -- local red LED and piezo
			cmp.b		#minLEDStress,Rstrs	; Turn on the error LED if stress is minLEDStress or more
			CtoAllBits	Rtos
			call		#_errorLed			; Use this function so it optionally turns on the piezo as well

			; Check for comms error and send local status if required
			bic.b	#COM_ERR,&localStatus	; Clear comms error flag by default. May be set below.
			bit.b	#bNotSendStatus,&monFlags ; If sending status, and so expecting to receive it
			_IF		_Z
				cmp.b	#comErrTicks,&ticksSinceLastRx ; and too many ticks since last valid status Rx
				_IF		_HS
					; If our ID is not 1, set the comms error bit in local status
					cmp.b	#1,&ID
					_IF		_NE
						bis.b	#COM_ERR,&localStatus		
					_ENDIF
					
					; Act as a master -- send our status
					mov.b	&localStatus,R8
					bis.b	#$80,R8					; Set the high bit to say it's a status byte
					call	#TX_ByteNW					
				_ENDIF							; End if too many ticks since last Rx
			_ENDIF							; End if sending status
			ret
; End of DoMeasurement


DoStress:
;
; Called repeatedly by DoMeasurement to calculate the various kinds of stress
; and keep track of which is worse.
; It takes 4 parameters on the stack and updates 3 registers as required (Rstrs, Rmeas, Rtype).
;
; Stack offsets for parameters (return address is at offset zero)
type	EQU		2				; The character representing the type of measurement 'v', 't', 'l'
zero	EQU		4				; The measurement corresponding to zero stress
step	EQU		6				; The change in measurement corresp to a change of one stress level
meas	EQU		8				; The measurement
			
			mov		step(SP),R8				; Get step in R8
			tst		R8
			_IF		_GE
				mov		meas(SP),R9				; Get meas - zero in R9
				sub		zero(SP),R9
			_ELSE
				inv		R8						; Get absolute value of step in R8
				inc		R8
				mov		zero(SP),R9				; Get zero - meas + step -1 in R9
				sub		meas(SP),R9
				add		step(SP),R9
				sub		#1,R9
			_ENDIF
			_IF		_L
				clr		R9						; Min of 0
			_ENDIF
			clr		R10						; Clear high word of dividend
			call	#UMSlashMod				; R9 = R10:R9 / R8 = (meas - zero) / step
			cmp		R9,Rstrs				; Is this stress worse than present stress calculated so far?
			_IF		_LO
				mov		R9,Rstrs				; Yes, new present stress
				mov		meas(SP),Rmeas			; Measurement causing present stress
				mov		type(SP),Rtype			; Type of measurement causing present stress
			_ENDIF
			pop		R8						; Pop the return address
			add		#8,SP					; Drop the parameters off the stack
			br		R8						; Return
; End of DoStress


DoStatus:
;
;	Process received status byte in R8. Trashes R9, R10
;	Status byte:
;	Bit 7: Always 1 for status byte
;	Bit 6: Comms error: Means that status information does not represent the whole pack
;	Bit 5: All in bypass (would change to "Some in bypass" if bottom balancing was implemented)
;	Bit 4: Check bit (based on stress level -- typically inverse of stress high bit)
;	Bits 3-0: Stress level 0-15
;
			; Check validity of incoming stress bits
			mov.b	R8,R9					; Copy incoming status to R9
			mov.b	R8,R10					; And R10
			and.b	#STRESS,R9				; Only stress bits in R9
			and.b	#ENC_STRESS,R10			; Only stress and check bits in R10
			cmp.b	R10,stressTable(R9)		; If the incoming status byte has valid encoded stress
			_IF		_EQ						
				clr.b	&ticksSinceLastRx		; Now zero time since last received valid status
				; This will eliminate any comms error next time through DoMeasures
				
				; Check if DoMeasures may have just sent a status byte, due to a comms error
				bit.b	#COM_ERR,&localStatus	; If no comms error
				_IF		_NZ

					; Do MAX of local and incoming stress
					mov.b	&localStatus,R10		; Get local status to R10
					and.b	#STRESS,R10				; Extract stress bits
					cmp.b	R10,R9					; Compare incoming stress (R9) to ours (R10)
					_IF		_LO						; If incoming (R9) is less than ours (R10)
							mov.b	stressTable(R10),R10	; Get encoded local stress to R10
							movBits_B	R10,#ENC_STRESS,R8	; Replace incoming encoded stress with ours
					_ENDIF							; Endif we are worse
		
					; Do AND of local and incoming all_in_bypass bits
					mov.b	&localStatus,R10		; Get local status to R10
					bis.b	#~ALL_BYP,R10			; Set all bits other than the all-in-bypass bit
					and.b	R10,R8					; AND the all-in-bypass bits, others unchanged
		
					; Process incoming comms error bit.
					; Since we received a valid status byte, there is no local
					;	comms error, so just pass the incoming comms error bit through.
		
					; Send the possibly-updated status byte. High bit already set.
					call	#TX_ByteNW				; Send this encoded data if buffer not full
				_ENDIF							; End if no comms error
			_ENDIF							; End if incoming valid
			ret
; End of DoStatus


DoPassword:
;
; Check for a password character
; After decrementing passWordState below, 3 = waiting for ^C, 2 = waiting for ^B, 1 = waiting for ^A,
; 0 = waiting for ^@ and erase if received. We should not receive any negative value
; Trashes R9
;
			dec.b	&passWordState
			jn		resetFSM			; This should never happen! Just reset FSM and
										; process as an ordinary command

			; Check for a continuing password match
			mov.b	&passWordState,R9	; Password is ^C ^B ^A ^@
			cmp.b	R9,R8				; Check for a match
			jne		resetFSM			; If mismatch, jump and reset FSM
			tst		R9					; Are we now at state 0?
			jnz		exitOnRx			; If not, this was a valid password byte, but not the last.
										;	Just exit this callback and wait for more
			; Jump to the code in the BSL which will erase main flash memory and wait for more bytes
			;	without using interrupts.
			; May be important: it could be bad to have receive interrupts sending stress bytes after
			;	this last password byte goes out; it could be interpreted as a byte to flash program!
			clr		&TACCTLr			; Clear at least the CCIE RX interrupt enable bit
			; Important: wait for the last password byte to be echoed before disabling interrupts!
			call	#waitTxCmpl

			dint
			clr		&TACTL				; Disable the timer completely; may use less power
			mov.b	#TXDp+ACTLED,&P1OUT	; Set TXD to idle, (inverted) activity LED off
			clr.b	&P2OUT				; Set bypass and error LED off
			clr.b	&P1SEL				; Make P1.1 ordinary I/O now
			bic.b	#USIPE5,&USICTL0	; Make P1.5 ordinary I/O also
			clr		R15					; The BSL uses R15 as its FSM state variable
			mov		#$280,SP			; Give the BSL maximum stack
			br		#BSLErase			; Jump into the BSL to finish the download

resetFSM	mov.b	#4,&passWordState	; No password match; reset state machine

exitOnRx	ret
; End of DoPassword

			EVEN


DELAY_IF_NEEDED MACRO
			; No delay needed
			ENDM

#include "serialio.s43"				// Comms routines
#include "../common/comMisc.s43"	// Miscellaneous common functions
#include "../common/measure.s43"	// Voltage measurement functions
#include "../common/BytecodeInterpreter2.s43" // Cutdown bytecode interpreter. No defs in bytecode
#include "../common/math.s43"		// Multiply and divide routines
#include "monDefinitions.s43"		// Bytecode definitions

			; Encoded stress table. The stress and other information is transmitted in one status byte,
			; with no checksum correction. To counter this, stress is encoded, so that only
			; 16 of the 32 possible stress codes ($00 - $1F) are valid. Other codes
			; are treated as a corrupted attempt to send status information.
			; Current status for this BMU is sent instead.
			; Note that bit 7 is always set for status bytes; bit 6 represents comms error
			; Bit 5 represents all-in-bypass
			; Note that encoded stress values are not monotonic
			; The table is indexed by raw stress values
stressTable	DB		(1<<4) + 0			; Stress 0	$10
			DB		(1<<4) + 1			; Stress 1	$11
			DB		(1<<4) + 2			; Stress 2	$12
			DB		(1<<4) + 3			; Stress 3	$13
			DB		(1<<4) + 4			; Stress 4	$14
			DB		(1<<4) + 5			; Stress 5	$15
			DB		(1<<4) + 6			; Stress 6	$16
			DB		(1<<4) + 7			; Stress 7	$17
			DB		(0<<4) + 8			; Stress 8	$08
			DB		(0<<4) + 9			; Stress 9	$09
			DB		(0<<4) + 10			; Stress 10	$0A
			DB		(0<<4) + 11			; Stress 11	$0B
			DB		(0<<4) + 12			; Stress 12	$0C
			DB		(0<<4) + 13			; Stress 13	$0D
			DB		(0<<4) + 14			; Stress 14	$0E
			DB		(0<<4) + 15			; Stress 15	$0F
			

; The linker puts a checksum of the used code memory in the first available unused space,
; when asked for one.
; To keep our BSL (bootstrap loader) happy we need a simple 1-byte XOR checksum.
; To obtain this we set the IAR Embedded Workbench IDE Project/Options/Linker/Checksum options to:
; Fill unused code memory
;	Fill pattern: 0xFF
;	Generate checksum
;		Size: 1 byte, Alignment: 1
;		CRC Polynomial: 0x101
;		Complement: As is
;		Bit order: MSB first, Initial value: 0x10
; The initial value of 0x10 is required because the reset vector of $1000 at $FFFE is not transmitted
; and so the BSL does not include it in its checksum, but the linker does.
; If the reset vector changes, this initial value will need to be changed to keep it as
; the XOR of its two bytes.

; And we set the IAR Embedded Workbench IDE Project/Options/Linker/Extra Output options to:
; Generate Extra Output File
;	Override default
;	monitor.bin
;	Output format: raw-binary

; Some calculations so we can see how much space we have left, by reading the listing.
freespace	EQU		_OPCODETBL-$
#define BCD(x) ( x / 100 * $100 + x % 100 / 10 * $10 + x % 10 )
spaceaspercent EQU BCD( (100*freespace)/2048)

;-------------------------------------------------------------------------------
;			Interrupt Vectors
;-------------------------------------------------------------------------------
			ORG		0FFF0h				; Timer A Vectors
			DW		RX_TIOV_ISR			; Combined CC1IFG (receive capture/compare) & TAIFG (overflow)
			DW		TX_ISR				; Timer A CC0IFG (transmit compare)


			ORG		$FFF8
jInterpretByte:
			br		#interpretByte		; BSL will call here expecting interpretByte
			ORG		0FFFEh				; MSP430 RESET Vector
			DW		0x1000				; Reset to BSL in case there is a crash


			END
