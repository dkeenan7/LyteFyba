;
; Command character definitions for the monitor
;

#include "../common/comDefinitions.s43"			; Include the definitions common to monitor
												; and debugger
;
; Kill pain sending ( boolean -- )	; 1 for no pain, 0 for pain
;
			xCODE	'K',PainAutonomy,_PainAutonomy
			allBitsIfNZ	Rtos,Rtos		; IF Rtos is nonzero THEN $FF to Rtos ELSE $00 to Rtos
			movBits_B	Rtos,#bNotSendStatus,&monFlags ; Move only bNotSendStatus from Rtos to monFlags
			ret
		
; checKsumming ( -- )						; Toggle bChecksumming
			; kk to turn checksumming off, k to turn it on (irrespective of current state)
			xCODE	'k',checksumming,_checksumming
			xor.b	#bChecksumming,&intFlags ; Toggle bChecksumming bit in intFlags
			ret

#if IMAGE_START < $F000		// Commented out if need to save space
; Rx state ( -- )
			xCODE	'r',RxState,_RxState ; Note: 'r' is read calibration value in debugger
			mov		#'R',Rthd				; Type is Rx state
			mov.b	&ticksSinceLastRx,Rsec	; Result in ticks
;			mov		#3,Rtos					; Print 3 digits
			jmp		_prettyPrint3			; Tail-call pretty-print of 3 digits and return
#endif

; Stress ( -- )								; report local stress
			xCODE	'p',Stress,_Stress
			mov		#'S',Rthd				; Type is stress
			mov.b	&localStatus,Rsec		; Result in stress levels, 0 to 7
;			mov		#3,Rtos					; Print 3 digits
			jmp		_prettyPrint3			; Tail-call pretty-print of 3 digits and return

; Query worst stress ( -- )
			xCODE	'q',queryWorstStress,_queryWorstStress
			mov.b	#'Q',Rthd				; Type is worst stress level
			mov.b	&worstStress,Rsec		; Result
			call	#_prettyPrint3			; Pretty-print of 3 digits
	#if WATCHDOG
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart watchdog timer
	#endif
			; Now prettyPrint the reason for the worst pain
			mov.b	&worstStressType,Rthd	; Type of measurement that caused worst pain
			mov		&worstStressMeas,Rsec	; Result
			mov		#4,Rtos					; Print 4 digits
			jmp		_prettyPrint			; Tail-call pretty-print and return
		
; Reset worst pain ( -- )
			xCODE	'{',resetWorstPain,_resetWorstPain ; Frowny mouth :-{ because irreversible
			clr.b	&worstStress
			mov.b	#' ',&worstStressType
			clr		&worstStressMeas
			ret
			
; Alarm ( boolean -- )
			xCODE	'a',Alarm,_Alarm
	#if 1
			; Relies on bAlarmForBad being in bit 0
		;	allBitsIfNZ	Rtos,Rtos		; IF Rtos is nonzero THEN $FF to Rtos ELSE $00 to Rtos
			movBits_B	Rtos,#bAlarmForBad,&monFlags ; Move only bAlarmForBad bit from Rtos to monFlags
	#else								; Trashes Rtos
			tst		Rtos
			_IF		_NZ
				bic.b		#bAlarmForBad,&monFlags
			_ELSE
				bis.b		#bAlarmForBad,&monFlags
			_ENDIF
	#endif
			ret

