			COL		154			; Wide listings
; Ensure you set the FET Debugger download options to erase main memory _only_,
; _not_ information memory. This is to preserve calibration data.
;
; Set the IAR Embedded Workbench IDE Project/Options/Linker/Output options to:
;  Allow C-SPY-specific extra output file
; Set the IAR Embedded Workbench IDE Project/Options/Linker/Extra Output options to:
; Generate Extra Output File
;	Override default
;	TestICal.bin
;	Output format: raw-binary
;
; This software has been developed by Mike Van Emmerik and Dave Keenan for their
; lithium battery monitoring system for high voltage electric vehicles and energy storage systems.
;
; "TestICal" is a TESTer, Id-setter, CALibrator and bootstrap-loader updater for our
; Cell Management Unit (CMU) and Battery Management Unit (BMU) based on an MSP430 microcontroller.
;
; TestICal should be the first program written to main-flash.
; This initial programming must be done using a flash programmer connected to the JTAG port.
;
; TestICal contains two copies of a bootstrap loader (BSL), one active, the other inactive.
; The initial JTAG programming of TestICal will place this BSL in its active position
; in the last 1024 bytes of main-flash.
; From then on, programming may be done via serial communications using this BSL.
; Use the Windows program LyteFlash or the Linux program sendprog to send the file
; TestICal.bin or monitor.bin.
;
; When loading TestICal via BSL, only the inactive copy of the BSL is sent with it.
; But this copy can be written to the active location, to update the BSL, by using the 'b' command.
; TestICal can also perform voltage and temperature calibrations and store this calibration data
; in info-flash using the 'u' command.
;
; The BSL consists of a software UART providing RS422-style serial communications,
; and a password-recognising state-machine. The state-machine normally passes incoming
; serial data to a command interpreter in main-flash. But when the password is recognised,
; the state-machine instead writes incoming serial data to main-flash.
; This allows it to overwrite TestICal with the normal command interpreter or monitor,
; sent via the serial input. And because the BSL transmits all data received on its serial
; input, to its serial output, a cascaded series of these MSP430 boards can all be updated
; simultaneously. You only need to send a new version of the monitor to the first board
; in the chain.
;
; But what if you want to update the BSL itself? In that case, instead of sending a new
; monitor, you send TestICal carrying the new version of the BSL.
; This time you send TestICal via the serial input not the JTAG port.
; That way a 'b' command will update the BSLs of all the boards in the chain simultaneously.
;
; The BSL code is located in the last 1024 bytes of main-flash because this flash segment contains
; the reset vector and can be left alone when the rest of main-flash is erased.
;
; The following is true of both TestICal and the BSL:
;	They use no interrupts, since the interrupt vectors will be reprogrammed.
;	They use no timer; timer use requires too many 6-byte instructions.


; Init Command String
; A string of commands that will be interpreted after all other initialisation is complete.
; Its most common use is to restore a sensible DCO clock frequency calibration value when this has
; been erased or corrupted, thereby rendering communications impossible or unreliable.
; In that case, it must of course be loaded using a JTAG programmer as the BSL will not work.

#define INIT_CMD_STRING ''	 			// No initial command
; #define INIT_CMD_STRING 'ub'			// Move old cal data to new location and update BSL

; Conditional assembly parameters which may be changed for special purposes
#define		ADCBUF		0			// 0 for no ADC sample buffer; 1 for buffer
#define		INSULATION_MONITORING 1	// Can leave out the insulation monitoring code if not needed.
#define		FAKE_NEW_CHIP	0		// 1 to force recalculation of our voltage and temperature
									// calibration constants from the manufacturer's constants.
									// Be sure to restore it to 0 and reflash immediately after.

ProductCode	EQU		'T'				; T for TestICal, R for monitoR, L for monolith, W for wmonolith

ID			EQU		ramID			; We use the ram copy of the ID for s, x, prettyPrint
									; commands. Monitor uses the info-flash copy

; Some definitions so the measure.s43 code will work
; Monitor and Monolith define these as their info-flash counterparts instead of ram
CellCal 	EQU	ramCellCal
CellOff		EQU ramCellOff
BoltPlCal 	EQU	ramBoltPlCal
BoltPlOff	EQU ramBoltPlOff
BoltMiCal 	EQU	ramBoltMiCal
BoltMiOff	EQU ramBoltMiOff
TempSlope	EQU	ramTempSlope
TempOff		EQU	ramTempOff
AdcTimIdx	EQU	ramAdcTimIdx
BypFull		EQU	ramBypFull
			LSTOUT-
#include "msp430.h"							// MSP430 Special Function Register definitions
#include "../common/ControlFlowMacros.h"	// Provides structured control-flow for assembly language
#include "../common/comMacros.h"			// Macros for obscure instruction sequences
#include "../common/common.h"				// Definitions common to monitor, TestICal and BSL

; The LOCKA bit in FCTL3 was made a *toggle*, for backwards compatibility.
; Use these macros to safely clear and set it.
CLRLOCKA	MACRO
			BIT		#LOCKA,&FCTL3		; Test LOCKA
			_IF		NZ					; Currently locked?
				MOV		#FWKEY+LOCKA,&FCTL3 ; Yes, unlock
			_ENDIF
			ENDM

SETLOCKA	MACRO
			BIT		#LOCKA,&FCTL3		; Test LOCKA
			_IF		Z					; Currently unlocked?
				MOV		#FWKEY+LOCKA,&FCTL3 ; Yes, lock
			_ENDIF
			ENDM


				ORG		$200		; Start of RAM. Ends at InitSP-1
; This area is common to all main programs and used by the BSL and is not block erased on a reset
bsl2state		DS		2			; Password recogniser state for BSL2
resetCounter	DS		2			; Number of resets since the last "^" command
resetBuffer		DS		16			; Circular buffer recording the reason for the last 16 resets
discharge		DS		4			; Accumulator for depth of discharge determination.
									; Assuming a 200 A 50 mV shunt and StatusFreq of 15 Hz:
									; Unit is 1/5 A for 1/15 s = 1/75 coulomb = 1/270 milliamphour.
									; So 32 bits allows 15,900 Ah, but 24 bits would only allow 62 Ah.



oldFllTime		DS		2			; Used by Frequency Locked Loop
									;	Must be cleared before enabling or re-enabling interrupts
measureCount	DS		2			; Incremented by FLL interrupt routine, on ACLK rising edge, 4096 Hz
oldMeasureCount DS		2			; Value of measureCount at the last measure
oldRtcMeasCnt	DS		2			; Hi 4 bits of measureCount at the last advance of RTC seconds count

; Command Character Interpreter flags
interpFlags		DS		1			; Interpreter flags, bitmask definitions follow
bHexOutput		EQU		1<<0		; Should numeric output be in hexadecimal, not decimal?
bErrorChecking	EQU		1<<1		; Are we sending CRC12s and checking received CRC12s?
bDontInterpret	EQU		1<<2		; Are we interpreting?
bDontEcho		EQU		1<<3		; Are we echoing characters? (not yet implemented in TestICal)
bModbusOutput	EQU		1<<4		; Should PrettyPrint output be formatted as a Modbus/ASCII response?
bEchoResponses	EQU		1<<5		; True to echo complete Modbus responses
bQuiet			EQU		1<<6		; True to silence piezo

				ALIGNRAM 1
comNoEraseEnd	; End of unerased variables; start of erased variables

#if	ADCBUF
				ALIGNRAM 1
sampleBuf	DS		2*NumSamples	; ADC sample buffer; 4 or 16 samples
#endif

; RAM copies of various calibration settings
; Same order as stored in info-flash
			ALIGNRAM 1				; So word values are word-aligned
ramDataStart
ramBypFull		DS		1			; MS nibble is bypass stress level. LS nibble is full stress level
ramAdcTimIdx	DS		1			; ADC timing table index: 0=default, 1=MCLK2, 3=ADCOSC/3
ramBoltMiCal	DS		2			; Bolt- voltage / current scale calibration word
ramTempSlope	DS		2			; Precomputed slope of voltage vs temperature curve
ramBoltPlOff	DS		1			; Voltage offset calibration byte for bolt/array
ramCellOff		DS		1			; Voltage offset calibration byte for cell
ramCapacity		DS		2			; Battery capacity in tenths of an amp-hour
ramCellRes		DS		2			; High temp cell internal resistance in micro-ohms
ramBoltPlCal	DS		2			; Voltage scale calibration word for bolt/array
ramCellCal		DS		2			; Voltage scale calibration word for cell
ramTempOff		DS		1			; Temperature offset calibration for internal sensor
ramBoltMiOff	DS		1			; Bolt-/current offset calibration byte
ram8MHzCalD 	DS		1			; 8 MHz DCO frequency calibration byte
ram8MHzCalB 	DS		1			; 8 MHz DCO range calibration byte
ramID			DS		1			; Cell/CMU identifier byte; first cell is 1; written by 'iw 'ic cmds
ramDataVers		DS		1			; Data version
ramDataEnd

; Miscellaneous variables

			ALIGNRAM 1
txCksum		DS		2				; Transmit CRC12

; Command Character Interpreter variables

			ALIGNRAM 1
rxCksum		DS		2				; Received packet CRC12
prevRxCksum	DS		2				; Previous received packet CRC12
priorRxCksum DS		2				; Previous previous received packet CRC12
errorRatio	DS		4				; Error ratio

eraseEnd							; End of the erased variables

ToIN		DS		2				; Pointer to present character being stored in Text Input Buffer
TIB			DS		48				; Text Input Buffer (packet buffer)
TIBEnd
; Must leave room for stack (about 36 bytes minimum)
STACKSPACE		EQU		InitSP-$	; Look at listing to see what this is

;-------------------------------------------------------------------------------
				ORG		PROG_START	; In main-flash
;-------------------------------------------------------------------------------

#include "../common/CmdCharInterpreter.s43" // RPN interpreter with one-or-two-character commands
#include "NonIntComms.s43"					// TxByte etc for non-interrupt TestICal
#include "../common/ComComms.s43"			// Common comms functions, e.g. TxCksum
#include "../common/measure.s43"			// ADC measurement functions
#include "../common/math.s43"				// Multiply and divide routines
#include "../common/Crc12.s43"				// Twoth CRC12 calculation routines
#include "TesDefinitions.s43"				// Include command character definitions

			; Assemble any initialisation command string
InitCmdString
			DB		INIT_CMD_STRING
			DB		EXIT					; Must end with an EXIT command
			ALIGN	1


;-------------------------------------------------------------------------------
; InterpretByte
;-------------------------------------------------------------------------------
;
; The BSL calls this with any byte that is received by the serial port, including password bytes.
;
InterpretByte:
main:										; For IAR Embedded Workbench IDE debugger
			ClearWatchdog					; Clear and restart Watchdog Timer 32k cyc. BSL sets 64 cyc.
			; Because a BMU ignores Ctrl-Q (XON) (as required by Monolith), then when running TestICal
			; it must never get a Ctrl-S (XOFF) or it will be permanently stuck with no echo.
			; So we must ignore XOFFs when running in a BMU.
			_COND
				cmp.b	#255,&ID
			_OR_ELSE NE					; If we're not a BMU
				cmp.b	#$13,R8
			_OR_IFS NE						; Or it's not an XOFF (ctrl-S) character
				call	#ACCEPT					; Process R8 as part of a command to be interpreted
			_ENDIF
			ClearWatchdog
			ret								; Return to the BSL

;-------------------------------------------------------------------------------
; InterpretInit
;-------------------------------------------------------------------------------
;
; The BSL will call this on any normal reset (not a watchdog timeout or key violation or SFR instruction fetch)
; and after successfully bootstrap-loading a new monitor or TestICal or other main-flash program.
; This intialises the RAM calibration values, and anything else that hasn't already been initialised
; by the BSL before this is called.
;
InterpretInit:
			ClearWatchdog					; Clear and enable Watchdog Timer 32k cyc. BSL sets 64 cyc.
			; Clear all variables in RAM except resetBuffer and BMU's fuel gauge discharge accumulator
			_FOR		#eraseEnd-comNoEraseEnd,R8
				clr		comNoEraseEnd-2(R8)
			_NEXT_DECD	R8

;
; Initialise the ADC10. We do this here because NewChip code does many measurements to optimise the
; ADC timing, and set an info-flash byte to save this.
;
			; Enable analog inputs (3) and Vref+ out
			mov.b		#(1<<VRefPChan)|(1<<ArrayV_BoltVPl_Chan)|(1<<ShuntV_BoltVMi_Chan)|(1<<BatV_StrapVPl_Chan),&ADC10AE0

			; Initialise ADC10
			; SREF_1    = +-refs are Vref+ and AVSS
			; ADC10SHT_3 = sample time is 64 ADC10CLKs (32 us required for temperature)
			; REFOUT    = connect Vref+ to pin P1.4
			; REFON		= turn on the voltage reference and reference buffer
			; No MSC	= single sample and conversion
			mov			#SREF_1+ADC10SHT_3+REFOUT+REFON,&ADC10CTL0
			; Other ADC10 initialisation is done every time "measure" is called, to save code

;
; Copy calibration data into RAM
;
#if !FAKE_NEW_CHIP
			_CASE
			_OF_EQ_B	#DATAVERS-1,&infoDataVers			; Check for version 6
				; Data version 6 is close enough to version 7 that we can get away with merely flashing
				; the error light for a second.
				; Should eventually translate the link calibration data
				; Temperature calibration is translated below
				bis.b	#ErrLed,&P2DIR				; Set error LED as output
				ErrLedOn							; Caution!
				mov		#1000,R8					; Link calibration data not converted!
				call	#DelayMs
				ErrLedOff
				_FOR		#infoDataEnd-infoDataStart,R8 ; Prepare to move ~16 bytes
					mov.b	infoDataStart-1(R8),ramDataStart-1(R8) ; Move 1 byte
				_NEXT_DEC	R8							; Decrement loop counter by 1, loop if non zero
				mov.b	&ramTempOff,R8
				neg		R8							; Change sign
				rla		R8							; Convert to half degrees
				mov.b	R8,&ramTempOff				; Save converted data
			_ENDOF
			_OF_EQ_B	#DATAVERS,&infoDataVers		; Check at the present address
				; The RAM image has the same layout as current version data, so we use a block move
				_FOR		#infoDataEnd-infoDataStart,R8 ; Prepare to move ~16 bytes
					mov.b	infoDataStart-1(R8),ramDataStart-1(R8) ; Move 1 byte
				_NEXT_DEC	R8							; Decrement loop counter by 1, loop if non zero
			_ENDOF
			_OF_EQ_B	#DATAVERS,&oldInfoDataVers	; Check at the old address ($10FF)
				; The RAM image has the same layout as current version data, so we use a block move
				_FOR		#infoDataEnd-infoDataStart,R8 ; Prepare to move ~16 bytes
					mov.b	oldInfoDataStart-1(R8),ramDataStart-1(R8) ; Move 1 byte
				_NEXT_DEC	R8							; Decrement loop counter by 1, loop if non zero
			_ENDOF
			_OF_EQ_B	#$FF,&infoDataVers
#endif
				; If we find $FF at infoDataVers (an area of info-flash that we assume will be erased
				; in new chips), then assume it's a new chip. If not a new chip, it will have the data
				; version number (way < $80).
				; A new chip. We want to preserve some of the existing DCO calibration data.
				; Set the ID, voltage and temperature calibration.

newChip:
				mov.w	#1800,&ramCapacity			; 180 amp-hours
				mov.w	#740,&ramCellRes			; 740 micro-ohms
				; Use the manufacturer's scale factors and offset for voltage measurement.
				; Despite what the Family User Guide and Datasheets suggest, three correction values
				; are needed: a reference voltage factor, an ADC gain factor, and an ADC offset.
				; We combine the two factors into our default voltage factors, and add new
				; calibration values for bolt and cell offsets.
				; In practice, we find that the ADC gain factor is unity, and the ADC offset factor is
				; zero. But these may change in the future, and we'll be ready for it.
				; There is also a systematic error due to the ~90 MR input resistance of the ADC port.
				; We have measured an average of 3323 mV from an actual 3329 mV.
				; So the systematic correction is 3329/3323 or 1.00181, or 32827/32768.
				; We want a calibraton factor in 1.15 FixedPoint that is the product of two TI given
				; 1.15 fixed point values and our systematic correction factor which is also in 1.15
				; fixed point format.
				; All the shifting and rounding issues are taken care of in the FP1_15UMul function.

				mov.w	&CALADC_15VREF_FACTOR,R8	; Get 1.5 V reference correction factor
				mov.w	&CALADC_GAIN_FACTOR,R9		; Get ADC gain correction factor
				call	#Fx1_15UMul					; R8 = R8 * R9
				mov.w	R8,&ramBoltMiCal			; Use this as the default bolt- voltage scale factor
				mov		#32827,R9					; Correction for systematic error apparently due to
													; approx 90 MR ADC input resistance. 3329/3323*32768
				call	#Fx1_15UMul					; R8 = R8 * R9
				mov.w	R8,&ramCellCal				; Use this as the default cell voltage scale factor
				mov.w	R8,&ramBoltPlCal			; and the default bolt+ voltage scale factor
				mov.w	&CALADC_OFFSET,R8			; Use the TI provided offset as default
				rla2	R8							; Multiply it by 4 to match our oversampled 12 bits
													; Assume it still fits in a signed byte and set as
				mov.b	R8,&ramCellOff				; cell offset and
				mov.b	R8,&ramBoltPlOff			; bolt+ offset calibration values.
				; BoltMiOffset needs further correction because it is a bipolar input where
				; Vref/2 corresponds to zero.
				push R8
				mov		&CALADC_15VREF_FACTOR,R8
				sub		#$8000,R8					; Vref_factor - 1 in R8
				mov		#2046,R9					; The middle count (of our effective 12 bits) in R9
				call	#MMStar						; Signed R10:R9 = signed R8 * unsigned R9
				add		#$4000,R9					; Add half the divisor for rounding
				adc		R10
				rla		R9							; Divide by 2^15 by mult'ing by 2 and taking hi word
				rlc		R10
				pop		R8
				sub		R10,R8						; Subtract this Vref/2 offset from 4x the ADC offset
				add		#2,R8						; Correction for systematic error, cause unknown
													; Assume it still fits in a signed byte and set as
				mov.b	R8,&ramBoltMiOff			; bolt- offset calibration value.

				; Precalculate the slope of the temperature vs ADC-value curve
				; = (85-30)/(CAL85-CAL30) stored as a 0.16 fixed point number
				mov		&CALADC_15T85,R8			; ADC value for 85C
				sub		&CALADC_15T30,R8			; CAL85-CAL30 = divisor in R8 in 16.0 fixed-point
				mov		#(85-30),R10				; Dividend in R10:R9 in 16.16 fixed-point
				mov		R8,R9						; Add half the divisor to the dividend, for rounding
				rra		R9
				call	#UMSlashMod					; Divide; quotient to R9 in 0.16 fixed-point
				mov		R9,&ramTempSlope			; Save as temperature/ADC-value slope
				mov.b	#-3,&ramTempOff				; Correction for systematic error, in half degrees,
													; cause unknown

				; These are not actually used any more. We run an FLL off a watch crystal instead.
				mov.b	&CALDCO_8MHZ,&ram8MHzCalD	; Copy manufacturer's 8 MHz DCO calibration data
				mov.b	&CALBC1_8MHZ,&ram8MHzCalB
				bis.b	#XT2OFF | DIVA_3,&ram8MHzCalB ; Set ACLK = watch crystal / 8

				cmp.b	#255,infoID					; Does the flash say we're a BMU?
				_IF		EQ							; If so, it might actually be a CMU with its flash
					; erased by some accident (it has happened). So do the test and if we really are a
					; BMU, we get ID 255. If actually a CMU, then set ID to 0.
					; Set ID to 0 (CMU) if we're in a 20 pin package (Port 3 not connected)
					; Only BMUs have 28 pin chips so port 3 comes out on pins, and they will always have
					; a load or an external pullup or pulldown on at least one pin, so that pin will not be
					; pushed around by mere internal pullups or pulldowns.
					mov.b	#0,&P3DIR					; Set Port 3 as all inputs
					mov.b	#$FF,&P3REN					; Enable all pullup/pulldown resistors
					_COND								; Begin a short-circuit conditional
						mov.b	#$FF,&P3OUT					; Pull them all up with resistors
						cmp.b	#$FF,&P3IN					; Check if they are all high
					_AND_IF EQ							; If they all got pulled high
						mov.b	#0,&P3OUT					; Pull them all down with resistors
						cmp.b	#0,&P3IN					; Check if they are all low
					_AND_IF	EQ							; And if they all got pulled low
						mov.b	#1,&ramID					; Set ID = 1 (CMU) to avoid comms error
					_ELSES
						mov.b	#$FF,&ramID					; Set ID = 255 (BMU)
					_ENDIF
					mov.b	#$00,&P3REN					; Disable all pullup/pulldown resistors
														; Leaving them on causes problems for outputs
				_ELSE								; Else ID != 255
					mov.b	&infoID,&ramID				; Preserve the existing CMU ID
				_ENDIF
				cmp.b	#255,&ramID					; Test for BMU
				_IF		NE							; If not a BMU
					call	#FindOptAdc					; Find the optimal ADC clock timing; save in RAM
				_ENDIF

				mov.b	#DATAVERS,&ramDataVers		; The present data version
				call	#_updateInfoFlash			; If we're a CMU, this is the only way to tell the
													; BSL to assume CMU hardware (e.g. ReadByte)
#if !FAKE_NEW_CHIP
			_ENDOF
			; default action if none of the above apply
				; Data version number is higher or lower than can be handled by this version of TestICal
				; so we should leave it alone and raise an error.
				mov		#b'1010101000000000,R8	; 4 flashes
				br		#jErrorFlash			; Infinite loop, never returns
			_ENDCASE
#endif

			; Initialise port 1
			; BSL settings of Port1 are OK. No interrupt comms in TestICal. Analog settings done later.

			; Initialise port 2
			mov.b	#0,&P2OUT					; Set all outputs low.
			bis.b	#ErrLed,&P2DIR				; Set ErrLed as output
			bis.b	#TxMiChg_57k6B|TxMiChg2_RlyP_57k6A,&ChgPortDIR ; Set Txs as outputs
												; Do not disturb bits 6, 7 (XIN, XOUT)
			cmp.b	#255,&ID
			_IF		NE							; If we're not a BMU
				bis.b	#Bypass,&BypPortDIR 		; Set Bypass as output
			_ENDIF

			; Initialise port 3. CMUs don't use this port, but no harm in setting it up.
			; Don't change the state or direction of any BMU contactor outputs or you might cut off
			; power to the BMU.
			cmp.b	#255,&ID
			_IF		NE						; If we're a CMU
				mov.b	#$FF,&P3REN				; Enable pullup/pulldown resistors to save power, for
												;   any pin which may remain a floating input in a CMU.
			_ENDIF
			; Don't change the state of contactor outputs unless this is a power-on reset
			; or you might cut off your own power.
			mov		&resetCounter,R8
			dec		R8
			and		#$0F,R8
			mov.b	resetBuffer(R8),R8
			bit.b	#PORIFG,R8				; Check for power-on reset
			_IF		NZ						; If it was a power-on
				mov.b	#0,&P3OUT				; Turn off all contactors
			_ENDIF
			; Set contactor outputs as outputs in case they aren't already.
			mov.b	#PreCtor|BatPosCtor|BatNegCtor|AcLfPvCtor|RtPvCtor,&P3DIR
			bic.b	#TxMiScu,&ScuPortOUT	; Set Tx low
			bis.b	#TxMiScu,&ScuPortDIR	; Set Tx as output
			bic.b	#RxScu|TxMiScu,&ScuPortSEL	; Select gpio functions for Rx and Tx pins
			; Can't rely on default zero setting of P3SEL because programs other than TestICal
			; use the timer functions of these pins for comms, and we may have been bootstrap-loaded
			; over one of them, in which case we wouldn't have had a proper reset.


;
; Miscellaneous initialisation
;
;			clr.b	TXCksum					; Clear transmit checksum

;
; Initialise the command character interpreter
;
;			clr.b	&RXCksum				; Clear the receive checksum
			clr.b	&interpFlags
			mov		#TIB,&ToIN				; Packet pointer

			mov		#InitCmdString,Rip		; Interpret the init string as commands
			call	#_ENTER

			ret								; Return to the BSL

; End of InterpInit
;-----------------------------------------------------------------------------------------------------


;
; Determine the best ADC clock value for this CMU when running TestICal.
; Assumes the CMU is bolted to a cell carrying no current so v and V measure a constant voltage.
; Can be used for BMUs if v and V (HazBat & HazArr) are measuring a constant voltage of 48 V or more.
; Trashes R8-12, R13, R15
;
FindOptAdc:

; Local variable stack pointer offsets
actCellV	EQU		0					; Our best guess of the actual cell voltage, which is the
										; average of 256 measurements using GetCellV and MCLK/3
										; Also used as a 32-bit sum of these values to find the average
										; The deviations from this are used to determine the noise
devThisIdx	EQU		4					; Array of total deviation word-sized results

; Conditional assembly used during testing
#define		USE_CELLV 0					; Set this if you want to use CellV instead of BoltPlV
										; We normally use BoltPlV because it is more noisy
numMeasures	EQU		16					; How many measurements to make with each clock. A power of 2.
logNumMeas	EQU		4					; Base 2 log of the above. 'ac takes 0.6 seconds per measure.

			sub		#4+2*NumAdcClocks,SP	; Make space for locals
			mov		SP,R9
			_FOR	#2+NumAdcClocks,R12
				clr		0(R9)				; Clear locals
				incd	R9
			_NEXT_DEC	R12
			; Measure using the timing that has the lowest worst-case noise for TestICal
			and.b	#$F0,&ramAdcTimIdx	; Set LS nibble to zero without disturbing MS nibble
			_FOR	#numMeasures,R12	; Do this many measurements
				; We use BoltPlV because it is a noiser measurement than CellV,
				; because its track on a CMU runs parallel to some noisy other tracks.
				; We used to use CellV here, but we need to use the same measurement we use below
				; in case they have different readings e.g. because they are calibrated differently.
#if USE_CELLV
				call	#GetCellV			; Little-v is less noisy
#else
				call	#GetBoltPlV			; Big-V is more noisy
#endif
				add		R10,actCellV(SP)	; Accumulate sum
				adc		actCellV+2(SP)		; as 32-bit
				mov		#40,R8				; Wait 40 ms for next measurement
				call	#DelayMs
			_NEXT_DEC	R12
			; Find the average
			mov		actCellV+2(SP),R10	; Get sum into R10:R9
			mov		actCellV(SP),R9
			add		#numMeasures/2,R9	; Rounding
			adc		R10
#if logNumMeas == 8
			rra8_l	R10,R9				; Shift longword right 8 bits using macro, to divide by 256
#else
		REPT	logNumMeas				; Shift longword right the required number of bits
			clrc						; Unsigned
			rrc		R10
			rrc		R9
		ENDR
#endif
			mov		R9,actCellV(SP)		; Save average cell voltage as the actual word value in mV
			; We want the best total deviation from the "actual" cell voltage. We use the total
			; rather than the worst deviation since we've observed some infrequent large errors, and
			; others with frequent almost-as-large errors. We want to penalise the frequent errors more.
			; Take 256 measurements, and sum their deviations from actual in sumOfDev. We don't bother
			; dividing by 256, so there won't be an overflow of 16 bits unless the average error is
			; 256 mV or more.
			clr		R15					; R15 will range 0 to NumAdcClocks-1
			mov		SP,R13
			add		#devThisIdx,R13		; R13 points to the start of the devThisIdx array
			_REPEAT
				mov		R15,R8
				inc		R8					; R8 is 1 to NumAdcClocks
				and.b	#$F0,&ramAdcTimIdx	; Set LS nibble to zero without disturbing MS nibble
				or_b	R8,&ramAdcTimIdx	; Put ADC timing to be tested into LS nibble
				_FOR	#numMeasures,R12	; Do this many measurements
					; We use BoltPlV because it is a noiser measurement than CellV,
					; because its track on a CMU runs parallel to some noisy other tracks.
#if USE_CELLV
					call	#GetCellV			; Little-v is less noisy
#else
					call	#GetBoltPlV			; Big-V is more noisy
#endif
					sub		actCellV(SP),R10	; Get deviation from average
					abs		R10					; Don't care if pos or neg
					add		R10,0(R13)			; Accumulate the sum of the deviations into the array
					mov		#40,R8				; Wait 40 ms for next measurement
					call	#DelayMs
				_NEXT_DEC	R12
				incd	R13					; Point to next array entry
				inc		R15					; Next index
				cmp		#NumAdcClocks,R15
			_UNTIL	EQ
			; Now find the quietest result
			clr		R15
			mov		#-1,R10				; Default winner
			mov		#$FFFF,R8			; Worst so far
			mov		SP,R13
			add		#devThisIdx,R13		; R13 points to start of devThisIdx array
			_REPEAT
				cmp		@R13+,R8			; Compare lowest so far with table
				_IF		HS					; If the lowest so far is higher than this table entry
					mov		-2(R13),R8			; A new lowest noise
					mov		R15,R10				; Remember the table index
				_ENDIF
				inc		R15
				cmp		#NumAdcClocks,R15
			_UNTIL	EQ

			; The lowest noise result was with a table index of R10, corresponding to an ADC timing
			; index of R10+1
			add		#1,R10
			and.b	#$F0,&ramAdcTimIdx	; Set LS nibble to zero without disturbing MS nibble
			or_b	R10,&ramAdcTimIdx	; Put new value to use into LS nibble. Save to info flash soon
			add		#4+2*NumAdcClocks,SP ; Deallocate locals
			ret

;
; Compare the ~16 bytes of calibration data at ramDataStart with what's at infoDataStart (in info-flash).
; Returns with Z set if OK, Z clear if not.
; Trashes R12
compareInfoFlash:
			clr		R12					; Loop counter
			_REPEAT
				cmp.b	infoDataStart(R12),ramDataStart(R12)
				_WHILE	EQ ; Z
					inc		R12
					cmp		#infoDataEnd-infoDataStart,R12
			_UNTIL	EQ					; Loop until we get to infoDataEnd
				_ENDIF
			; The increment will have set Z if all compares well. The cmp will have cleared Z otherwise.
			ret

;
; Compare the 1024 bytes at jBSLb (inactive copy) with what's at jBSL (active copy at $FC00).
; Returns with Z set if OK, Z clear if not.
; Trashes R12
compareBSL2:
			mov		#jBSL,R12
			_REPEAT
				cmp.w	@R12,jBSLb-jBSL(R12)
				_WHILE	EQ ; Z
					incd	R12
			_UNTIL	Z					; Loop until R12 wraps from $FFFE to 0
				_ENDIF
			; The increment will have set Z if all compares well. The cmp will have cleared Z otherwise.
			ret

; ----------------------------------------------------------------------------
; Inactive copy of bootstrap loader (BSL2b)
;---------------------------------------------------------------------------------
#include "BSL2Macro.s43"					// Include macro for bootstrap-loader and interrupt vectors

; This copy will be relocated to the end of main-flash at $FE00-$FFFF by the 'b' command (updateBSL2).
; Instantiate this copy of the BSL with different external labels from the main copy at $FE00.
		BSL2MACRO	jBSLb, jBSLEraseb, jReadByteb, jWriteByteb, jBslRevisionb, jWriteBreakb, jErrorFlashb
		ORG		$FFFE-(jBSL-jBSLb)	; The copy of the reset vector
		DW		jBSL				; Points to BSL2 in last main-flash segments

; Some calculations so we can see how much space we have left, by reading the listing.
freespace		EQU		_CMDCHRTBL-$	; From here to the start of the command character table
#define BCD(x) 			( x / 100 * $100 + x % 100 / 10 * $10 + x % 10 )
spaceaspercent	EQU		BCD( (100*freespace)/(_CMDCHRTBL-PROG_START))

;---------------------------------------------------------------------------------
; Interrupt and entry-point jump table at the end of the third-last main-flash segment
;---------------------------------------------------------------------------------
				ORG		BSL2_START-$22	; FBDE for now
CMDCHRTBLEND	EQU		$				; Command character table ends immediately below lowest
										;  main-program entry point
jInterpretByte	br		#InterpretByte	; A branch to InterpretByte, independent of PROG_START

jUCA0TxIsr		reti					; UART transmit not used
				nop
jUCA0RxIsr		reti					; UART receive not used
				nop

jTA1TxRxIsr		reti					; Combined TA1 CCR1 & CCR2 (transmit & receive capture/compare)
				nop
jTA1MeasureIsr	reti					; Timer A1 CCR0 (BMU Measure compare)
				nop

jInterpretInit	br		#InterpretInit	; A branch to InterpretInit, independent of PROG_START

jTA0TxRxIsr		reti					; Combined TA0 CCR1 & CCR2 (transmit & receive capture/compare)
				nop
jTA0FllIsr		reti					; Timer A0 CCR0 (frequency locked loop capture).
				nop						;   This is handled directly by the BSL.

				ORG		BSL2_START-2	; FBFE for now
ProgPresence	DB		$AA				; For BSL2 to check before calling main program (InterpretByte)
ProgChecksum	DB		$FF				; Placeholder for checksum added by CMUsend or SendProg

;---------------------------------------------------------------------------------
; Bootstrap loader (BSL2), active copy
;---------------------------------------------------------------------------------
; Active copy of BSL2 in the last main-flash segment, not sent when bootstrap loaded, only when JTAGed.
; Updated by TestICal 'b' command, or by JTAGing.
				ORG			BSL2_START		; Start of last main-flash segment
; Instantiate the BSL with the standard external labels
#include "../common/BSL2.s43"			// Include bootstrap-loader and interrupt vectors
				ORG		$FFFE			; The reset vector
				DW		jBSL			; Reset to BSL main entry

				_CS_CHECK				; Check that the control-flow stack is balanced
				END
