;
; Command character definitions for TestICal
;

#include "../common/comDefinitions.s43"			; Include the definitions common to monitor
												; and TestICal

; Some characters need to be translated into RAM adresses of calibration values
		ALIGN	1
calAddressTable
		DB		'b' , ramBypFull	& $7F | $00
		DB		'a' , ramAdcTimIdx	& $7F | $00
		DB		'I' , ramBoltMiCal	& $7F | $80
		DB		's' , ramTempSlope	& $7F | $80
		DB		'O' , ramBoltPlOff	& $7F | $00
		DB		'o' , ramCellOff	& $7F | $00
		DB		'c' , ramCapacity	& $7F | $80
		DB		'r' , ramCellRes	& $7F | $80
		DB		'V' , ramBoltPlCal	& $7F | $80
		DB		'v' , ramCellCal	& $7F | $80	; High bit set to indicate word quantity,
		DB		't' , ramTempOff	& $7F | $00	; clear for byte quantity
		DB		'n' , ramBoltMiOff	& $7F | $00
		DB		'i' , ramID			& $7F | $00
		DB		'd' , ramDataVers	& $7F | $00	; Data vers is not for writing
; Zero must not appear in the table as it is used to represent "unrecognised".
sizeCalAddressTable	EQU	$-calAddressTable

;
; TranslateToCalAddr ( ch -- addr )
;
TranslateToCalAddr:
		; Do the calibration address translations using the table above
		mov		#sizeCalAddressTable,R9 ; Initialise the loop counter and table index
		_REPEAT				; Begin loop
			mov.w	calAddressTable-2(R9),R10 ; Get two bytes from the table
			cmp.b	R10,Rtos	; Compare the address character with the low byte from the table
			_WHILE	NE			; While no match [ _WHILE xx = _IF xx  _CS_SWAP ]
				decd	R9			; Decrement loop-counter/table-index by 2
		_UNTIL	Z			; Until loop counter is zero
		clr		Rtos		; Finished loop with no match so set result to zero for "unrecognised"
			_ELSE				; Else there is a match so
				swpb	R10			; Get the high byte from the table
				mov.b	R10,Rtos	; Substitute it for the address character
			_ENDIF				; Endif match
		ret

;
; A worker routine for voltage calibration. We do this twice now for cell/battery and bolt/array
;

; The calibration scale factor will be the expected value divided by the reading.
; The expected value is an unsigned 12 bit integer of millivolts and
; the reading is an unsigned 12.2 bit fixed-point number of millivolts.
; We want the calibration scale factor to be represented as an unsigned 1.15 fixed-point number
; i.e. a number with 1 integer bit and 15 fractional bits.
; So we shift the expected value 17 places left before the division.
; R8 contains the measurement possibly scaled by 17/16
; R9 contains the relevant (cell or array/bolt) offset correction as a signed byte
; The cal value is returned in R9
voltScaleWork:
			sxt		R9							; Convert from signed byte to signed word
			add		R9,R8						; Perform offset correction, but not scale correction
			clr		R9							; 16 bits of zeroes
			mov		Rsec,R10
			rla		R10							; 17 zeroes; we have value << 17 in R10:R9
			mov		R8,R11						; The divisor is the voltage reading in R8
			rra		R11							; Add half the divisor to the dividend for rounding
			add		R11,R9
			adc		R10
			call	#UMSlashMod					; Gives quotient in R9, remainder in R10
			; R9 has the value we want to store
			ret

;
; Calibrate ( n ch --- )
; Perform a calibration whose type is ch ('v for voltage etc) and value is n
; For the voltage scale and offset calibrations, we want to apply the other correction (i.e. scale if
; we are calibrating offset, and vice versa) to get the best correction so far. This also allows for
; successive improvement calibration if that turns out to be useful.
;
			xCODE	'c',calibrate,_calibrate
			_CASE
			_OF_EQ_B	#'v',Rtos				; 'v': Cell voltage scale factor
				mov		#CellVChan<<12,R8			; ADC channel for scaled cell/battery voltage input
				call	#measure					; Get raw 12.2 bit fixed point measurement in R8
				call	#Mul17Div16Cmu				; Scale by 17/16 if we're not a BMU
				mov.b	&CellOff,R9					; This is the offset correction to use
				call	#voltScaleWork
				mov.w	R9,&CellCal					; Save cell/battery calibration value
			_ENDOF

			_OF_EQ_B	#'V',Rtos				; 'V': Bolt+/Array voltage scale factor
				mov		#BoltVPlChan<<12,R8			; ADC channel for scaled bolt/array voltage input
				call	#measure					; Get raw 12.2 bit fixed point measurement in R8
				call	#Mul17Div16Cmu				; Scale by 17/16 if we're not a BMU
				mov.b	&BoltPlOff,R9				; This is the offset correction to use
				call	#voltScaleWork
				mov.w	R9,&BoltPlCal				; Save bolt/array calibration value
			_ENDOF

			_OF_EQ_B	#'o',Rtos				; 'o': Cell voltage offset
				mov		#CellVChan<<12,R8			; ADC channel for scaled cell/battery voltage input
				call	#measure					; Get raw 12.2 bit fixed point measurement in R8
				call	#Mul17Div16Cmu				; Scale by 17/16 if we're not a BMU
				mov		&CellCal,R9					; Use this voltage scale for correction
				call	#Fx1_15UMul					; Correct for scale but not offset
				sub		R8,Rsec						; Calculate offset (expected - measured)
				mov.b	Rsec,&CellOff
			_ENDOF

			_OF_EQ_B	#'O',Rtos				; 'O': Bolt+/Array voltage offset
				mov		#BoltVPlChan<<12,R8			; ADC channel for scaled bolt/array voltage input
				call	#measure					; Get raw 12.2 bit fixed point measurement in R8
				call	#Mul17Div16Cmu				; Scale by 17/16 if we're not a BMU
				mov		&BoltPlCal,R9				; Use this voltage scale for correction
				call	#Fx1_15UMul					; Correct for scale but not offset
				sub		R8,Rsec						; Calculate offset (expected - measured)
				mov.b	Rsec,&BoltPlOff
			_ENDOF

			_OF_EQ_B	#'t',Rtos				; 't': Temperature offset
				call	#GetTemp					; Get calibrated temp in half degC into R9
				mov.b	&TempOff,R8					; Subtract off our existing offset calibration
				sxt		R8
				sub		R8,R9
				push	R9							; Save uncalibrated measurement in half degrees
				; Rsec is supplied in tenths of a degree now. Div by 5 to get half degrees
				mov		#0,R10						; Put Rsec into R10:R9 as dividend
				mov		Rsec,R9
				add		#2,R9						; Add 2 for rounding
				mov		#5,R8						; Divide by 5 to bring to half degrees
				call	#UMSlashMod					; Result in R9
				pop		R8							; Restore uncal'd measurement
				sub		R8,R9						; Subtract measured half degrees from calibration
													; (expected) temperature
				mov.b	R9,&TempOff					; Save new temperature offset calibration value
			_ENDOF

			_OF_EQ_B	#'n',Rtos				; 'n': Bolt-/Shuntx20 voltage offset. Was "link" offset
				call	#MeasAndCorrBoltMi			; Measure and correct using the BoltMi corrections
				mov.b	&BoltMiOff,R9				; Subtract the existing offset (signed byte)
				sxt		R9
				sub		R9,R10
				sub		#2046,R10					; Zero volts is a 2046 reading

				; Multiply Rsec (signed) by 1.364
				push 	R10
				mov		Rsec,R8
				mov		#44696,R9					; ~= 1.364 * 2^15
				call	#MMStar						; Signed R10:R9 = signed R8 * unsigned R9
				add		#$4000,R9					; Add half the divisor for rounding
				adc		R10
				rla		R9							; To divide by 2^15, mult by 2 and keep the hi word
				rlc		R10
				mov		R10,Rsec
				pop		R10

				sub		Rsec,R10					; Subtract required reading * 1.364
				neg		R10
				_COND								; Start a short-circuit conditional
					cmp		#-$7F,R10					; Compare with -$7F
				_OR_ELSE	L						; If < -$7F
					cmp		#$80,R10					; Compare with $80
				_OR_IFS		GE						; or >= $80
					mov		#$80,R10					; Use $80 to indicate "not calibrated"
				_ENDIF
				mov.b	R10,&BoltMiOff				; Save the bolt-/current offset calibration value
			_ENDOF

			_OF_EQ_B	#'i',Rtos
				; When preceded by XOFF (ctrl-S) and the desired first ID in decimal,
				; and followed by <cr> XON (ctrl-Q), it sets consecutive IDs in consecutive CMUs
				; and responds with the ID _after_ the last ID.
				cmp.b	#255,&ID
				_IF		EQ					; But if we're a BMU,
					ret							; silently ignore; BMUs have to stay ID=255
				_ENDIF
				bit.b	#bDontEcho,&interpFlags
				_IF		NZ					; If the dont-echo flag is set
					; Save our new ID to RAM
					mov.b	Rsec,&ID

					; Send another setIDs command with its parameter incremented by one.
					mov		Rsec,Rtos
					inc		Rtos				; Increment the parameter
					DPUSH	#3					; Use a 3 digit field width
					call	#_emitNum			; Transmit the number as text in the current number base

					mov		#TickIcStr,R10			; Transmit a 'ic
					call	#TxStringCk
					call	#TxEndOfPacket
				_ELSE						; Else dont-echo flag is clear
					; Send \? to remind user that Ctrl-S needs to be sent before an 'ic command.
					jmp		EmitQmark
				_ENDIF
				ret			; Don't fall through to _readCalValue
			_ENDOF

			_OF_EQ_B	#'a',Rtos				; 'a': optimal ADC timing, with debug display
				call	#FindOptAdc					; Find the optimum ADC clock
				sub		#2*NumAdcClocks+2,SP		; Recover the devThisIdx array from FindOptAdc
													; The +2 is for the old return address
				mov		#'M'|'2'<<8,Rthd			; M2 for MCLK/2
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'O'|'2'<<8,Rthd			; O2 for ADCOSC/2
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'O'|'3'<<8,Rthd			; O3 for ADCOSC/3
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'O'|'4'<<8,Rthd			; O4 for ADCOSC/4
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

 				mov		#'O'|'5'<<8,Rthd			; O5 for ADCOSC/5
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'O'|'6'<<8,Rthd			; O6 for ADCOSC/6
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'O'|'7'<<8,Rthd			; O7 for ADCOSC/7
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'O'|'8'<<8,Rthd			; 08 for ADCOSC/8
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'M'|'3'<<8,Rthd			; M3 for MCLK/3
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'M'|'4'<<8,Rthd			; M4 for MCLK/4
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'M'|'5'<<8,Rthd			; M5 for MCLK/5
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'M'|'6'<<8,Rthd			; M6 for MCLK/6
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'M'|'7'<<8,Rthd			; M7 for MCLK/7
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				mov		#'M'|'8'<<8,Rthd			; M8 for MCLK/8
				pop		Rsec
				mov		#5,Rtos
				call	#_prettyPrint

				add		#2,SP						; Drop the old FindOptAdc return address
				mov.b	#'a',Rtos					; Restore the calibration-type character
				; Fall through to readCalValue to display the winner
			_ENDOF
;
; Default case
				jmp		EmitQmark					; Unknown calibration type character

			_ENDCASE

			;jmp		_readCalValue			; Display the value just calibrated and return
												;	(by falling through)
			;
			; Keep 'c' command (above) and 'r' command (below) together
			; That is, don't insert a new command here
			;
;
; Read calibration value ( ch --- )
; Calibration type (e.g. 'v' for cell Voltage) in ch
			xCODE	'r',readCalValue,_readCalValue
			call 	#TranslateToCalAddr		; Convert letter to byte/word flag and low 7 bits of address
			mov.b	Rtos,Rsec				; Copy to Rsec
			bic.b	#$80,Rsec				; Strip the byte/word flag
			or_w	#ramDataStart&$FF80,Rsec ; OR the upper 9 bits to make it a RAM address
			tst.b	Rtos
			_IF		NZ						; If not zero (zero means "unrecognised")
				push.b	&interpFlags			; Save present number base
				_IF		NN						; If high bit clear it's a byte
					mov		#3,Rtos					; Display 3 digits
					cmp		#ramAdcTimIdx+1,Rsec	; Test for ADC timing index or BypFull
					mov.b	@Rsec,Rsec				; Get byte sized cal value
					_IF		LO						; If we're reading ADC timing index or BypFull
						bis.b	#bHexOutput,&interpFlags ; Set to hexadecimal output
					_ENDIF
				_ELSE							; Else high bit set so it's a word
					mov		#5,Rtos					; Display 5 digits
					cmp		#ramCapacity,Rsec		; Test for battery capacity
					mov.w	@Rsec,Rsec				; Get word sized cal value
					_IF		EQ						; If we're reading capacity
						mov		Rsec,R9
						clr		R10
						mov		#10,R8					; Divide by 10 to bring to whole Ah
						call	#UMSlashMod				; R10:R9 / R8 -> R9
						mov		R9,Rsec
					_ENDIF
				_ENDIF							; Endif high bit set
				mov.b		#' ',Rthd			; Cmd type char (space). May be r or c command
				call	 	#_prettyPrint
				popBits_B	#bHexOutput,&interpFlags ; Restore previous number base
			_ELSE 							; Else is zero for "unrecognised"
EmitQmark
				mov		#QuestionStr,R10
				br		#TxString			; Print \? <ret> and exit
			_ENDIF							; Endif unrecognised
			ret

QuestionStr	DB			3,'\\?\r'			; Initial \ because '?' is a peek command
TickIcStr	DB			3,'\'ic'			; 'ic command to send downstream


;
; Write calibration value ( n ch --- )
;
; n is value to write. ch is calibration type (e.g. 'v for cell Voltage).
;
; Note: For the 'rw command, a ballpark estimate of LiFePO4 resistance in microohms would be 144000
; divided by the capacity in amp hours.
; Alternatively cell resistance can be measured as the change in battery voltage
; divided by the step change in current that caused it, divided by the number of cells.
; To obtain "HiTempCellRes", the measured cell resistance should be divided by
; 1 + 2^(1-T/10) where T is the cell temperature at which the measurement was made.
; e.g. at 20 degC, divide the measurement by 1.5 to obtain HiTempCellRes.
; e.g. at 25 degC, divide the measurement by 1.35 to obtain HiTempCellRes.
; e.g. at 30 degC, divide the measurement by 1.25 to obtain HiTempCellRes.

			xCODE	'w',writeCalValue,_writeCalValue
			cmp.b	#'d',Rtos				; Don't allow data version to be changed like this
			_IF		EQ
				jmp		EmitQmark
			_ENDIF
			call 	#TranslateToCalAddr		; Convert letter to byte/word flag and low 7 bits of address
			mov.b	Rtos,R10				; Copy to R10
			bic.b	#$80,R10				; Strip the byte/word flag
			or_w	#ramDataStart&$FF80,R10	; OR the upper 9 bits to make it a RAM address
			cmp		#ramCapacity,R10
			_IF		EQ						; If we're writing battery capacity
				rla		Rsec					; Multiply given value by 10
				mov		Rsec,R8					; to bring to tenths of an Ah
				rla2	Rsec					; *8
				add		R8,Rsec					; *10
			_ENDIF
			tst.b	Rtos
			_IF		NZ						; If not zero for "unrecognised"
				_IF		NN						; If high bit clear
					mov.b	Rsec,0(R10)				; Set byte sized cal value
				_ELSE							; Else high bit set so
					mov.w	Rsec,0(R10)				; Set word sized cal value
				_ENDIF							; Endif high bit
				cmp	#ram8MHzCalD,R10
				_IF		EQ
					mov.b	@R10+,&DCOCTL
					mov.b	@R10,&BCSCTL1
				_ENDIF
			_ELSE 							; Else is zero for "unrecognised"
				jmp		EmitQmark
			_ENDIF							; Endif unrecognised
			ret


;
; Update info-flash ( -- )
;
			xCODE	'u',updateInfoFlash,_updateInfoFlash
			; Prepare to flash-program
			; Assumes ACCVIE = NMIIE = OFIE = 0.
			; FSSEL: 1=MCLK FN: 2=divide by 3, 11=divide by 12. Must end up in the range 257-476 kHz
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Hold Watchdog Timer
			mov		#FWKEY+FSSEL_1+FN0*(MckPerFTGck-1),&FCTL2 ; Divides MCLK by FN+1

			; Erase appropriate info flash segment.
			mov		#FWKEY,&FCTL3			; Clear LOCK
			mov		#FWKEY+ERASE,&FCTL1		; Enable single segment erase

			rra		&infoDataStart			; Dummy write: Start of cal data in info-flash

			mov		#FWKEY+WRT,&FCTL1		; Enable write (can leave on; only write block that can't)

			clr		R12						; Loop counter
			_REPEAT
				mov.b	ramDataStart(R12),infoDataStart(R12)	; Write a byte to info-flash
				inc		R12
				cmp		#ramDataEnd-ramDataStart,R12
			_UNTIL	EQ						; Loop until ramDataEnd

			mov		#FWKEY,&FCTL1			; Done. Clear WRT
			mov		#FWKEY+LOCK,&FCTL3		; Set LOCK
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart watchdog timer
			;
			; Check that the flash programming worked
			;
			call	#compareInfoFlash		; Compare RAM cal data with what's in infoflash
			_IF		NE
				mov	#b'1010000000000000,R8	; 2 flashes
				br		#jErrorFlash		; Infinite loop, never returns
			_ENDIF
			ret

;
; update Bootstrap loader ( -- )
;
			xCODE	'b',updateBSL2,_updateBSL2

			; Avoid an infinite loop if there is a 'b' command in the INIT_CMD_STRING.
			call	#compareBSL2			; Compare the payload copy with the existing BSL2
			_IF		EQ						; If it's already the same
				ret								; Return without doing anything
			_ENDIF							; Endif

			; Prepare to flash-program
			; Assumes ACCVIE = NMIIE = OFIE = 0.
			; FSSEL: 1=MCLK FN: 2=divide by 3, 11=divide by 12. Must end up in the range 257-476 kHz
			mov		#FWKEY+FSSEL_1+FN0*(MckPerFTGck-1),&FCTL2 ; Divides MCLK by FN+1
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Hold the Watchdog Timer

			; Erase last segments of main flash (usually contain BSL2).
			mov		#jBSL,R12				; Start of BSL2 image, $FE00 or $FC00 or ...
			mov		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA

			push	SR						; Save the interrupt state
			dint							; Disable interrupts while the interrupt vectors are erased
			_REPEAT
				mov		#FWKEY+ERASE,&FCTL1		; Enable single segment erase
				rra		@R12					; Dummy write to erase segment. Takes 16 milliseconds.
				add		#512,R12				; Next segment
			_UNTIL	NN						; Until the high bit is clear (wraps around to zero)

			mov		#FWKEY+WRT,&FCTL1		; Enable write (can leave on; only write block that can't)
			mov		#jBSL,R12				; Start of BSL2 image
			_REPEAT
				mov		jBSLb-jBSL(R12),0(R12)		; Program word
				incd	R12
			_UNTIL	NN						; Will wrap to 0 after writing last word
			pop		SR						; Restore the interrupt state

			mov		#FWKEY,&FCTL1			; Done. Clear WRT
			mov		#FWKEY+LOCK,&FCTL3 		; Set LOCK
			;
			; Check that the flash programming worked
			;
			call	#compareBSL2			; Compare the payload copy with what's at $FC00
			_IF		EQ						; If it was successful
				mov.b	#BSLFG,&IFG1			; Clear the watchdog flag, and indicate a BSL "reset"
				br		#jBSL					; Start the new BSL. Effectively a software reset.
			_ELSE							; Else
				mov	#b'1010100000000000,R8	; 3 flashes
				br		#jErrorFlash		; Infinite loop flashing error LED
			_ENDIF							; Endif
			; Can't ret because then TestICal may return to the wrong place in a changed BSL.


;
; ! StoreWord - store a word (Forth !) ( n addr -- )
;
			xCODE	'!',StoreWord,_StoreWord
			mov.w	Rsec,0(Rtos)
			ret

;
; C! StoreByte - store a byte (C for char) (Forth C!) ( ch addr -- )
;
			xCODE	'C'|'!' <<8,StoreByte,_StoreByte ; 'C!' collides 'Ca' 'Cc' 'Ck' 'Cs' 'C#' 'C+' 'C;'
			mov.b	Rsec,0(Rtos)
			ret

;
; JumpTo - Call the code at addr ( addr -- )
;
			xCODE	'j',JumpTo,_JumpTo
			mov		Rtos,R8		; Save the jump address in a trashable non-stack reg
			DROP				; Drop stack in case the code at addr uses stack arguments
			br		R8			; Tail-call the code at addr and return


;
; f command ( -- )
; This outputs a fixed frequency to TxPl for 5 seconds.
; Used for checking clock calibration.
; Essentially obsolete now that we have a crystal

			xCODE	'f',frequencyBurst,_frequencyBurst
			bic.b	#TxPl,&P1SEL			; Change from UART function to general IO
			bic.b	#TxPl,&P1SEL2			; Both SEL bits must be cleared
			bis.b	#TxPl,&P1DIR			; Set as output in case it isn't already
			mov		#28,R11					; To give 5 seconds with 4 Mhz MCLK
											; Must be even so things toggle back to what they were
			call	#doBurst
			bis.b	#TxPl,&P1SEL			; Back to UART function
			bis.b	#TxPl,&P1SEL2			; No need to change P1DIR
			ret

;
; EMIT ( c -- )	; Emit the character on top of stack
;
		xCODE	'm',EMIT,_EMIT
		mov.b	Rtos,R8
		call	#TxByte
;		pop		Rtos
;		DROP
		ret


;
; Toggle TxPl with a 10 cycle loop,
; This timing depends on TxPl or TxMi being in the low 4 bits of its output register.

; The folowing is irrelevant now that we are using a watch crystal and FLL to achieve 3686400 Hz.

; If we were trying to achieve an exact 4 MHz MCLK, we'd want 4000/2/10 = 200.0 kHz.
; If we were trying to achieve exact 9600 baud comms we'd want 9600*416/2/10 = 199.7 kHz.
; But we've gone with minimising the number of controllers whose default DCO calibration
; we need to change. For that we have settled on the acceptable range being
; 199.5 to 200.5 kHz at 20 degC and
; 200.5 to 201.5 kHz at 30 degC.

doBurst
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Hold the Watchdog Timer
			push	SR						; Save interrupt state
			dint							; Disable interrupts (FLL and comms) to guarantee timing
			clr		R10
burstLp		xor.b	#TxPl,&P1OUT 			; (4) Toggle the TxPl bit. Must give 10 cycle loop.
			; We used to toggle both Tx lines in phase but this caused problems with IFO outputs.
			; Leaving one of them as a high output caused problems due to C4 (100n) on the next board.
			; We used to toggle TxMi, but the BMU has it on P3.7.
			; We rely on an even number of toggles to restore TxPl.
			dec		R10						; (1)
			jnz		jBurstLp				; (2) Jump to a 3-cycle delay to burstLp
			dec		R11						;	(alt1 1)
			jnz		burstLp					;	(alt1 2)

			pop		SR						; Restore interrupt state
			ClearWatchdog					; Clear and restart Watchdog Timer

			ret
jBurstLp	br		#burstLp				;	(alt2 3)


;
; send Nulls ( n -- )	; n is the number of nulls to send without a gap
;			Only low byte of n is used. Max of 256 nulls when n is zero.
;			This is to test for false positives on the break-to-reset circuitry of the following CMU.
;
			xCODE	'z',sendNulls,_sendNulls ; 'z' for send Zeros
			mov		#100,R11					; Ensure a proper stop bit
bitDelay	dec		R11
			jnz		bitDelay				; Also clears R11 which is required by BSL WriteByte to save space

			mov.b	#$00,R8					; Null to be sent
			call	#jWriteByte				; Send the null

			ClearWatchdog

			dec.b 	Rtos					; Do it n times, max 256 when n is zero
			jnz		_sendNulls
			ret


;
; Infrared Tx level ( n -- )	; Set the signal level for the infrared emitter, from 0 (off) to 4 (max)
;
		xCODE	'I'|'r' <<8,IrTxLevel,_IrTxLevel ; 'Ir' collides with 'Ib' 'Ij' 'Iz' 'Qr' 'Qb' 'Qj' 'Qz'
			bis.b	#Ir57k6A|Ir57k6B,&P2OUT		; Set both for high output (when not pulsed or open)
			_CASE
				_OF_EQ		#0,Rtos
					bic.b	#Ir57k6A|Ir57k6B,&P2SEL		; Both are not pulsed
					bis.b	#Ir57k6A|Ir57k6B,&P2DIR		; Both are outputs (high from above)
				_ENDOF
				_OF_EQ		#1,Rtos
					bic.b	#Ir57k6A,&P2SEL				; A is high
					bis.b	#Ir57k6B,&P2SEL				; B is pulsed
					bis.b	#Ir57k6A|Ir57k6B,&P2DIR		; Both are outputs
				_ENDOF
				_OF_EQ		#2,Rtos
					bis.b	#Ir57k6A,&P2SEL				; A is pulsed
					bis.b	#Ir57k6A,&P2DIR				; A is an output
					bic.b	#Ir57k6B,&P2SEL				; B is not pulsed
					bic.b	#Ir57k6B,&P2DIR				; B is an input
				_ENDOF
				_OF_EQ		#3,Rtos
					bic.b	#Ir57k6A,&P2SEL				; A is not pulsed
					bic.b	#Ir57k6A,&P2DIR				; A is an input
					bis.b	#Ir57k6B,&P2SEL				; B is pulsed
					bis.b	#Ir57k6B,&P2DIR				; B is an output
				_ENDOF
				_OF_EQ		#4,Rtos
					bis.b	#Ir57k6A|Ir57k6B,&P2SEL		; Both are pulsed
					bis.b	#Ir57k6A|Ir57k6B,&P2DIR		; Both are outputs
				_ENDOF
			_ENDCASE
			ret

; Some characters need to be translated into info flash adresses of manufacturer's calibration values
		ALIGN	1
ManAddressTable
		DB		'g' , CALADC_GAIN_FACTOR	& $7F | $80	; High bit set to indicate word quantity,
		DB		'o' , CALADC_OFFSET			& $7F | $80	; clear for byte quantity
		DB		'r' , CALADC_15VREF_FACTOR	& $7F | $80
		DB		'3' , CALADC_15T30			& $7F | $80
		DB		'8' , CALADC_15T85			& $7F | $80
; Zero must not appear in the table as it is used to represent "unrecognised".
SizeManAddressTable	EQU	$-ManAddressTable

;
; TranslateToManAddr ( ch -- addr )
;
TranslateToManAddr:
		; Do the calibration address translations using the table above
		mov		#SizeManAddressTable,R9 ; Initialise the loop counter and table index
		_REPEAT				; Begin loop
			mov.w	ManAddressTable-2(R9),R10 ; Get two bytes from the table
			cmp.b	R10,Rtos	; Compare the address character with the low byte from the table
			_WHILE	NE			; While no match [ _WHILE xx = _IF xx  _CS_SWAP ]
				decd	R9			; Decrement loop-counter/table-index by 2
		_UNTIL	Z			; Until loop counter is zero
		clr		Rtos		; Finished loop with no match so set result to zero for "unrecognised"
			_ELSE				; Else there is a match so
				swpb	R10			; Get the high byte from the table
				mov.b	R10,Rtos	; Substitute it for the address character
			_ENDIF				; Endif match
		ret

;
; Query manufacturer's calibration value ( ch --- )
; Calibration type (e.g. 'r' for voltage reference calibration value) in ch
			xCODE	'q',queryManValue,_queryManValue ; Note: 'q' queries worst stress in monitor
			call 	#TranslateToManAddr
			mov.b	Rtos,Rsec				; Convert to info flash address in Rsec
			bic.b	#$80,Rsec
			bis		#$1080,Rsec
			tst.b	Rtos
			_IF		NZ						; If not zero (zero means "unrecognised")
				_IF		NN						; If high bit clear
					mov		#3,Rtos					; Display 3 digits
					mov.b	@Rsec,Rsec				; Get byte sized cal value
				_ELSE							; Else high set clear so
					mov		#5,Rtos					; Display 5 digits
					mov.w	@Rsec,Rsec				; Get word sized cal value
				_ENDIF							; Endif high bit
			_ELSE 							; Else is zero for "unrecognised"
				jmp		EmitQmark				; Emit a question mark and return
			_ENDIF							; Endif unrecognised
			mov.b		#'q',Rthd			; Command type
			call	 	#_prettyPrint
			ret

;
; Frequency of ADC clock - put 5 s burst out on pin 5, expansion port on CMU, unused on BMU (was TouchV)
		xCODE	'F'|'a' <<8,FreqAdc,_FreqAdc ; 'Fa' collides with 'Fc' 'Fk' 'Fs'
			; Put the ADC10CLK out on processor pin 5 for 5 seconds so it can be measured.
			; On a CMU this connects to the expansion port -- the pin nearest the GND (-) pin.
			; On a BMU this is unconnected (was TouchV analog input).
			call	#GetCellV
			bis.b	#1<<3,P1SEL				; Set ADC10CLK function for pin
			bis.b	#1<<3,P1DIR				; Set as output
			bis		#ADC10ON,&ADC10CTL0		; Turn on the ADC core
			bis		#MSC|ENC|ADC10SC,&ADC10CTL0 ; Enable and start multiple conversions
											; Uses whatever was previously set in ADC10CTL1
			mov		#5000,R8				; Wait 5 seconds
			call	#DelayMs
			bic		#ENC,&ADC10CTL0 		; Must turn off ENC bit before other bits can be changed
			bic		#ADC10ON|MSC,&ADC10CTL0 ; Disable multiple conversions and turn off the ADC core
			bic.b	#1<<3,P1SEL				; Set GPIO function for pin
			bic.b	#1<<3,P1DIR				; Set as input
			ret

;
; Measure Vcc ( -- )	; Emit the Vcc voltage in millivolts
;
		xCODE	'M'|'v' <<8,MeasVcc,_MeasVcc	; 'Mv' collides with 'Mf' 'Mn' 'Uv' 'Uf' 'Un'
		xCODE	'o',MeasVcc2,_MeasVcc2			; 'o' alias to allow keyboard auto-repeat when testing
		call	#MeasAndCorrVcc			; Gives us 0-4092 in R10, for 0-1.5 V
		mov		R10,R8
		mov		#48047,R9				; 3000/4092*65536
		call	#UMStar					; R10:R9 = R8 * R9
		rla		R9						; Do rounding
		adc		R10
		mov		#'M'|'v' <<8,Rthd		; Type is Vcc Measurement
		mov		R10,Rsec				; Result in millivolts
		mov		#4,Rtos					; Print 4 digits
		br		#_prettyPrint			; Tail-call pretty-print and return

