;
; Command character definitions for TestICal
;

#include "../common/comDefinitions.s43"			; Include the definitions common to monitor
												; and TestICal

;
; ADCScaled or R(a)wVoltage ( channel -- measurement )
; "channel" has channel number shifted left 12 bits.
; e.g. $7000 for cell voltage, $A000 for temperature, $3000 for link voltage.
; "measurement" is 12-bit (0 to 4092) with voltage scale calibration applied,
; which has units of 17/16 of a millivolt in the case of cell and bolt voltages.
;
		xCODE		'a',ADCScaled,_ADCScaled
		mov			Rtos,R8
		call		#measAndScale			; Measure and use voltage scale calibration
		mov			R10,Rtos
		ret

; Some characters need to be translated into RAM adresses of calibration values
		ALIGN	1
calAddressTable
		DB		'c' , ramCapacity	& $7F | $80
		DB		'r' , ramCellRes	& $7F | $80
		DB		'V' , ramBoltPlCal	& $7F | $80
		DB		'v' , ramVoltCal	& $7F | $80	; High bit set to indicate word quantity,
		DB		't' , ramTempCal	& $7F | $00	; clear for byte quantity
		DB		'l' , ramLinkCal	& $7F | $00
		DB		'f' , ram8MHzCalD	& $7F | $80
		DB		'i' , ramID			& $7F | $00
		DB		'o' , ramVoltOff	& $7F | $00
		DB		'O' , ramBoltPlOff	& $7F | $00
; Zero must not appear in the table as it is used to represent "unrecognised".
sizeCalAddressTable	EQU	$-calAddressTable

;
; TranslateToCalAddr ( ch -- addr )
;
TranslateToCalAddr:
		; Do the calibration address translations using the table above
		mov		#sizeCalAddressTable,R9 ; Initialise the loop counter and table index
		_BEGIN				; Begin loop
			mov.w	calAddressTable-2(R9),R10 ; Get two bytes from the table
			cmp.b	R10,Rtos	; Compare the address character with the low byte from the table
			_WHILE	_NE			; While no match [ _WHILE xx = _IF xx  _CS_SWAP ]
				decd	R9			; Decrement loop-counter/table-index by 2
		_UNTIL	_Z			; Until loop counter is zero
		clr		Rtos		; Finished loop with no match so set result to zero for "unrecognised"
			_ELSE				; Else there is a match so
				swpb	R10			; Get the high byte from the table
				mov.b	R10,Rtos	; Substitute it for the address character
			_ENDIF				; Endif match
		ret

;
; Measure and possibly scale by 17/16th
; Needed by 'v', 'b', 'o', 'O' calibrate subcommands
;
voltOffWork:
		call	#measure	; Get raw 12.2 bit fixed point measurement in R8
		cmp.b	#255,&ID
		_IF		_NE			; If not a BMU then
			; Multiply by 17/16 to change full-scale from 4092 mV to 4348 mV
			mov		R8,R9		; Copy the value
			add		#8,R9		; Add half the divisor for rounding
			rra4	R9			; Divide by 16
			add		R9,R8		; Add back to the original
		_ENDIF
		ret

;
; A worker routine for voltage calibration. We do this twice now for cell/battery and bolt/array
;

; The calibration scale factor will be the expected value divided by the reading.
; The expected value is an unsigned 12 bit integer of millivolts and
; the reading is an unsigned 12.2 bit fixed-point number of millivolts.
; We want the calibration scale factor to be represented as an unsigned 1.15 fixed-point number
; i.e. a number with 1 integer bit and 15 fractional bits.
; So we shift the expected value 17 places left before the division.
voltScaleWork:
			call	voltOffWork					; Measure and possibly scale by 17/16; res in R8
			clr		R9							; 16 bits of zeroes
			mov		Rsec,R10
			rla		R10							; 17 zeroes; we have value << 17 in R10:R9
			mov		R8,R11						; The divisor is the voltage reading in R8
			rra		R11							; Add half the divisor to the dividend for rounding
			add		R11,R9
			adc		R10
			call	#UMSlashMod					; Gives quotient in R9, remainder in R10
			; R9 has the value we want to store
			ret


;
; Calibrate ( n ch --- )
; Perform a calibration whose type is ch ('v for voltage etc) and value is n
;
			xCODE	'c',calibrate,_calibrate
			_CASE
			_OFb	#'v',Rtos			; 'v': cell Voltage factor
				mov		#CellVChan<<12,R8			; ADC channel for scaled cell/battery voltage input
				call	#voltScaleWork
				mov.w	R9,&ramVoltCal				; Save cell/battery calibration value
			_ENDOF
			_OFb	#'V',Rtos			; 'b': Bolt plus / array voltage factor
				mov		#BoltVPlChan<<12,R8			; ADC channel for scaled bolt/array voltage input
				call	#voltScaleWork
				mov.w	R9,&ramBoltPlCal			; Save bolt/array calibration value
			_ENDOF

			_OFb	#'o',Rtos			; 'o': cell voltage offset
				mov		#CellVChan<<12,R8			; ADC channel for scaled cell/battery voltage input
				call	#voltOffWork				; Measure and possibly scale 17/16
				sub		R8,Rsec						; Calculate offset (expected - measured)
				mov.b	Rsec,&ramVoltOff
			_ENDOF
			_OFb	#'O',Rtos			; 'O': boltPlus / array voltage offset
				mov		#BoltVPlChan<<12,R8			; ADC channel for scaled bolt/array voltage input
				call	#voltOffWork				; Measure and possibly scale 17/16
				sub		R8,Rsec						; Calculate offset (expected - measured)
				mov.b	Rsec,&ramBoltPlOff
			_ENDOF

			_OFb	#'t',Rtos			; 't': temperature
;
; Temperature offset calibration
; M = 4092/1.5 * (.00355 T + typ0.986)
;	= 9.684*T + typ2690
; M/9.684	= T + typ277.7
; Per the MSP430F2012 datasheet, typ277.7 aims at 273, so the reading is proportional
; to the absolute temperature, with an offset of +- 100 mV.
			; We use offsetByte = (M/9.684 - T) >> 1
; So we use offsetByte = (M/9.684 - T) - 273
; and T = M/9.684 - 273 - offsetByte
;
				mov		#TempChan<<12,R8			; ADC channel for temperature sensor
				call	#measAndScale

; To divide by 9.684, multiply by 65536/9.684 = 6767
				mov		R10,R8
				mov		#6767,R9
				call	#UMStar
				sub		#278,R10
				sub		Rsec,R10					; Subtract 278 and the calibration temperature
				mov.b	R10,&ramTempCal				; Save temperature offset calibration value
			_ENDOF

			_OFb		#'l',Rtos				; 'l': link voltage
				mov		#LinkVChan<<12,R8
				call	#measAndScale
				sub		#2046,R10					; Zero volts for link voltage is a 2046 reading
				;sub		Rsec,R10				; Subtract required reading (usually 0)
				; Actually require 1.364Rsec to be subtracted. Too much code. So `lc will always
				;	calibrate to zero millivolts (calibrate with no significant charge or discharge).
				cmp		#$FF81,R10					; -$7F
				jl		nonCal						; If <s -$7F, use the $80 non-calibrated value
				cmp		#$80,R10
				jl		realCal						; If >s -$7F and <s $80, use as real calibration value
nonCal			mov		#$80,R10
realCal
				mov.b	R10,&ramLinkCal				; Save the link calibration value
			_ENDOF
;
; Default case
				jmp		emitQmark					; Unknown calibration type character

			_ENDCASE

			;jmp		_readCalValue			; Display the value just calibrated and return
												;	(by falling through)
			;
			; Keep 'c' command (above) and 'r' command (below) together
			; That is, don't insert a new command here
			;
;
; Read calibration value ( ch --- )
; Calibration type (e.g. 'v' for cell Voltage) in ch
			xCODE	'r',readCalValue,_readCalValue ; Note: 'r' prints Rx state in monitor
			call 	#TranslateToCalAddr
			mov.b	Rtos,Rsec				; Convert to RAM address in Rsec
			bic.b	#$80,Rsec
			bis		#$200,Rsec
			tst.b	Rtos
			_IF		_NZ						; If not zero (zero means "unrecognised")
				push.b	&interpFlags
				_IF		_NN						; If high bit set
					mov		#3,Rtos					; Display 3 digits
					mov.b	@Rsec,Rsec				; Get byte sized cal value
				_ELSE							; Else high bit clear so
					mov		#5,Rtos					; Display 5 digits
					mov.w	@Rsec,Rsec				; Get word sized cal value
					bis.b	#bHexOutput,&interpFlags ; Display words in hex
				_ENDIF							; Endif high bit
			_ELSE 							; Else is zero for "unrecognised"
emitQmark:		mov		#'?',Rtos				; Question mark should be ignored by downstream CMUs
				call	#_EMIT					; Call EMIT
				mov		#$0D,Rtos				; Carriage return
				jmp		_EMIT					; Tail-call EMIT and return
			_ENDIF							; Endif unrecognised
			mov.b		#' ',Rthd			; Trailing char (space)
			call	 	#_prettyPrint
			popBits_B	#bHexOutput,&interpFlags ; Restore output number base
			ret

;
; Write calibration value ( n ch --- )
;
; n is value to write. ch is calibration type (e.g. 'v for cell Voltage).
;
; Note: The 'fw command can affect the CPU clock in such a way that the processor
; is no longer capable of receiving commands, and needs physical access to recover.
; So take great care. If the worst happens, use a JTAG programmer to load a version of TestICal
; having an INIT_CMD_STRING that sets a typical frequency calibration value, such as '$AD90\'fw'.
;
; Note: For the 'rw command a ballpark estimate for LiFePO4 would be 144000 divided by the capacity in
; amp hours.
; Alternatively cell resistance can be measured as the change in battery voltage
; divided by the step change in current that caused it, divided by the number of cells.
; To obtain "HiTempCellRes", the measured cell resistance should be divided by
; 1 + 2^(1-T/10) where T is the cell temperature at which the measurement was made.
; e.g. at 20 degC, divide the measurement by 1.5 to obtain HiTempCellRes.
; e.g. at 25 degC, divide the measurement by 1.35 to obtain HiTempCellRes.
; e.g. at 30 degC, divide the measurement by 1.25 to obtain HiTempCellRes.

			xCODE	'w',writeCalValue,_writeCalValue
			call 	#TranslateToCalAddr
			mov.b	Rtos,R9					; Convert to RAM address in R9
			bic.b	#$80,R9
			bis		#$200,R9
			tst.b	Rtos
			_IF		_NZ						; If not zero for "unrecognised"
				_IF		_NN						; If high bit set
					mov.b	Rsec,0(R9)				; Set byte sized cal value
				_ELSE							; Else high bit clear so
					mov.w	Rsec,0(R9)				; Set word sized cal value
				_ENDIF							; Endif high bit
				cmp	#ram8MHzCalD,R9
				_IF		_EQ
					mov.b	@R9+,&DCOCTL
					mov.b	@R9,&BCSCTL1
				_ENDIF
			_ELSE 							; Else is zero for "unrecognised"
				jmp		emitQmark
			_ENDIF							; Endif unrecognised
			ret


;
; setIDs ( first-ID -- )
;
			xCODE	'i',setIDs,_setIDs
			; When preceded by XOFF (ctrl-S) and the desired first ID in decimal,
			; and followed by <cr> XON (ctrl-Q), it sets consecutive IDs in consecutive CMUs
			; and responds with the ID _after_ the last ID.
			bit.b	#bDontEcho,&interpFlags
			_IF		_NZ					; If the dont-echo flag is set
				; Save our new ID to RAM
				mov.b	Rtos,&ramID

				; Send another setIDs command with its parameter incremented by one.
				inc		Rtos				; Increment the parameter
				DPUSH	#3					; Use a 3 digit field width
				call	#_emitNum			; Transmit the number as text in the current number base

				mov		#'i',R8				; Transmit an "i"
				call	#TxByteCk
				call	#TxEndOfPacket
			_ELSE						; Else dont-echo flag is clear
				; Send '?' to remind user that Ctrl-S needs to be sent before an 'i' command.
				mov		#'?',R8				; Transmit a question mark (a no-op to downstream CMUs)
				call	#TxByte
				mov		#'\r',R8			; Transmit a carriage return. Checksum is deliberately bad.
				call	#TxByte
			_ENDIF
			ret


;
; Update info-flash ( -- )
;
			xCODE	'u',updateInfoFlash,_updateInfoFlash
			; Prepare to flash-program
			; Assumes ACCVIE = NMIIE = OFIE = 0.
			; FSSEL: 1=MCLK FN: 2=divide by 3, 11=divide by 12. Must end up in the range 257-476 kHz

			mov		#FWKEY+FSSEL_1+FN0*(MckPerFTGck-1),&FCTL2 ; Divides MCLK by FN+1
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Hold Watchdog Timer

			; Erase appropriate info flash segment.
			mov		#FWKEY,&FCTL3			; Clear LOCK
			mov		#FWKEY+ERASE,&FCTL1		; Enable single segment erase

			rra		&infoDataStart			; Dummy write: Start of cal data in info-flash

			mov		#FWKEY+WRT,&FCTL1		; Enable write (can leave on; only write block that can't)

			clr		R12						; Loop counter
			_BEGIN
				mov.b	ramDataStart(R12),infoDataStart(R12)	; Write a byte to info-flash
				inc		R12
				cmp		#ramDataEnd-ramDataStart,R12
			_UNTIL	_EQ						; Loop until ramDataEnd

			mov		#FWKEY,&FCTL1			; Done. Clear WRT
			mov		#FWKEY+LOCK,&FCTL3		; Set LOCK
			;
			; Check that the flash programming worked
			;
			call	#compareInfoFlash		; Compare RAM cal data with what's in infoflash
			_IF    _NE
				mov	#b'1010000000000000,R8	; 2 flashes
				br		#jErrorFlash		; Infinite loop, never returns
			_ENDIF
			ret

;
; update Bootstrap loader ( -- )
;
			xCODE	'b',updateBSL2,_updateBSL2

			; Avoid an infinite loop if there is a 'b' command in the INIT_CMD_STRING.
			call	#compareBSL2			; Compare the payload copy with the existing BSL2
			_IF		_EQ						; If it's already the same
				ret								; Return without doing anything
			_ENDIF							; Endif

			; Prepare to flash-program
			; Assumes ACCVIE = NMIIE = OFIE = 0.
			; FSSEL: 1=MCLK FN: 2=divide by 3, 11=divide by 12. Must end up in the range 257-476 kHz
			mov		#FWKEY+FSSEL_1+FN0*(MckPerFTGck-1),&FCTL2 ; Divides MCLK by FN+1
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Hold the Watchdog Timer

			; Erase last segments of main flash (usually contain BSL2).
			mov		#jBSL,R12				; Start of BSL2 image, $FE00 or $FC00 or ...
			mov		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA

			push	SR						; Save the interrupt state
			dint							; Disable interrupts while the interrupt vectors are erased
			_BEGIN
				mov		#FWKEY+ERASE,&FCTL1		; Enable single segment erase
				rra		@R12					; Dummy write to erase segment. Takes 16 milliseconds.
				add		#512,R12				; Next segment
			_UNTIL	_NN

			mov		#FWKEY+WRT,&FCTL1		; Enable write (can leave on; only write block that can't)
			mov		#jBSL,R12				; Start of BSL2 image
			_BEGIN
				mov		jBSLb-jBSL(R12),0(R12)		; Program word
				incd	R12
			_UNTIL	_NN						; Will wrap to 0 after writing last word
			pop		SR						; Restore the interrupt state

			mov		#FWKEY,&FCTL1			; Done. Clear WRT
			mov		#FWKEY+LOCK,&FCTL3 		; Set LOCK
			;
			; Check that the flash programming worked
			;
			call	#compareBSL2			; Compare the payload copy with what's at $FC00
			_IF		_EQ						; If it was successful
				mov.b	#BSLFG,&IFG1			; Clear the watchdog flag, and indicate a BSL "reset"
				br		#jBSL					; Start the new BSL. Effectively a software reset.
			_ELSE							; Else
				mov	#b'1010100000000000,R8	; 3 flashes
				br		#jErrorFlash		; Infinite loop flashing error LED
			_ENDIF							; Endif
			; Can't ret because then TestICal may return to the wrong place in a changed BSL.


;
; PeeQWord - get a word (NOT to stack) and display it ( addr -- )
;
			xCODE	'q',PeeQWord,_PeeQWord
			mov.b	#' ',Rthd
			mov.w	@Rtos,Rsec
			mov		#5,Rtos
			br		#_prettyPrint

;
; stOreWord - store a word (a la Store) ( n addr -- )
;
			xCODE	'O',stOreWord,_stOreWord
			mov.w	Rsec,0(Rtos)
			ret

;
; JumpTo - Call the code at addr ( addr -- )
;
			xCODE	'j',JumpTo,_JumpTo
			mov		Rtos,R8		; Save the jump address in a trashable non-stack reg
			DROP				; Drop stack in case the code at addr uses stack arguments
			br		R8			; Tail-call the code at addr and return


;
; f command ( -- )
; This outputs a fixed frequency to TxPl for 5 seconds.
; Used for checking clock calibration.
; NOTE: this command can only be used (in conjunction with `fw) to make small adjustments to
;	CPU speed, since communications will be affected!

			xCODE	'f',frequencyBurst,_frequencyBurst
			bic.b	#TxPl,&P1SEL			; Change from UART function to general IO
			bic.b	#TxPl,&P1SEL2			; Both SEL bits must be cleared
			bis.b	#TxPl,&P1DIR			; Set as output in case it isn't already
			mov		#28,R11					; To give 5 seconds with 4 Mhz MCLK
											; Must be even so things toggle back to what they were
			call	#doBurst
			bis.b	#TxPl,&P1SEL			; Back to UART function
			bis.b	#TxPl,&P1SEL2			; No need to change P1DIR
			ret

;
; EMIT ( c -- )	; Emit the character on top of stack
;
		xCODE	'm',EMIT,_EMIT
		mov.b	Rtos,R8
		call	#TxByte
;		pop		Rtos
;		DROP
		ret


;
; Toggle TxPl with a 10 cycle loop,
; This timing depends on TxPl or TxMi being in the low 4 bits of its output register.

; The folowing is irrelevant now that we are using a watch crystal and FLL to achieve 3686400 Hz.

; If we were trying to achieve an exact 4 MHz MCLK, we'd want 4000/2/10 = 200.0 kHz.
; If we were trying to achieve exact 9600 baud comms we'd want 9600*416/2/10 = 199.7 kHz.
; But we've gone with minimising the number of controllers whose default DCO calibration
; we need to change. For that we have settled on the acceptable range being
; 199.5 to 200.5 kHz at 20 degC and
; 200.5 to 201.5 kHz at 30 degC.

; When changing the cal value with e.g. $8D80'fw, a change of one lsbit changes the
; output frequency by about 0.5 kHz in the same direction.

doBurst
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Hold the Watchdog Timer
			push	SR						; Save interrupt state
			dint							; Disable interrupts (FLL and comms) to guarantee timing
			clr		R10
burstLp		xor.b	#TxPl,&P1OUT 			; (4) Toggle the TxPl bit. Must give 10 cycle loop.
			; We used to toggle both Tx lines in phase but this caused problems with IFO outputs.
			; Leaving one of them as a high output caused problems due to C4 (100n) on the next board.
			; We used to toggle TxMi, but the BMU has it on P3.7.
			; We rely on an even number of toggles to restore TxPl.
			dec		R10						; (1)
			jnz		jBurstLp				; (2) Jump to a 3-cycle delay to burstLp
			dec		R11						;	(alt1 1)
			jnz		burstLp					;	(alt1 2)

			pop		SR						; Restore interrupt state
			ClearWatchdog					; Clear and restart Watchdog Timer

			ret
jBurstLp	br		#burstLp				;	(alt2 3)


;
; send Nulls ( n -- )	; n is the number of nulls to send without a gap
;			Only low byte of n is used. Max of 256 nulls when n is zero.
;			This is to test for false positives on the break-to-reset circuitry of the following CMU.
;
			xCODE	'z',sendNulls,_sendNulls ; 'z' for send Zeros
			mov		#100,R11					; Ensure a proper stop bit
bitDelay	dec		R11
			jnz		bitDelay				; Also clears R11 which is required by BSL WriteByte to save space

			mov.b	#$00,R8					; Null to be sent
			call	#jWriteByte				; Send the null

			ClearWatchdog

			dec.b 	Rtos					; Do it n times, max 256 when n is zero
			jnz		_sendNulls
			ret


;
; Measure Vcc ( -- )	; Emit the Vcc voltage in millivolts
;
		xCODE	'M'|'v' <<8,MeasVcc,_MeasVcc	; 'Mv' collides with 'Mf' 'Mn' 'Uv' 'Uf' 'Un'
		mov		#0xB<<12,R8				; Choose the internal half-supply analog input
		call	#measAndScale			; Gives us 0-4092 in R10, for 0-1.5 V
		mov		R10,R8
		mov		#48047,R9				; 3000/4092*65536
		call	#UMStar					; R10:R9 = R8 * R9
		rla		R9						; Do rounding
		adc		R10
		mov		#'M'|'v' <<8,Rthd		; Type is Vcc Measurement
		mov		R10,Rsec				; Result in millivolts
		mov		#4,Rtos					; Print 4 digits
		br		#_prettyPrint			; Tail-call pretty-print and return


;
; Infrared Tx level ( n -- )	; Set the signal level for the infrared emitter, from 0 (off) to 4 (max)
;
		xCODE	'I'|'r' <<8,IrTxLevel,_IrTxLevel ; 'Ir' collides with 'Ib' 'Ij' 'Iz' 'Qr' 'Qb' 'Qj' 'Qz'
			bis.b	#Ir57k6A|Ir57k6B,&P2OUT		; Set both for high output (when not pulsed or open)
			_CASE
				_OF		#0,Rtos
					bic.b	#Ir57k6A|Ir57k6B,&P2SEL		; Both are not pulsed
					bis.b	#Ir57k6A|Ir57k6B,&P2DIR		; Both are outputs (high from above)
				_ENDOF
				_OF		#1,Rtos
					bic.b	#Ir57k6A,&P2SEL				; A is high
					bis.b	#Ir57k6B,&P2SEL				; B is pulsed
					bis.b	#Ir57k6A|Ir57k6B,&P2DIR		; Both are outputs
				_ENDOF
				_OF		#2,Rtos
					bis.b	#Ir57k6A,&P2SEL				; A is pulsed
					bis.b	#Ir57k6A,&P2DIR				; A is an output
					bic.b	#Ir57k6B,&P2SEL				; B is not pulsed
					bic.b	#Ir57k6B,&P2DIR				; B is an input
				_ENDOF
				_OF		#3,Rtos
					bic.b	#Ir57k6A,&P2SEL				; A is not pulsed
					bic.b	#Ir57k6A,&P2DIR				; A is an input
					bis.b	#Ir57k6B,&P2SEL				; B is pulsed
					bis.b	#Ir57k6B,&P2DIR				; B is an output
				_ENDOF
				_OF		#4,Rtos
					bis.b	#Ir57k6A|Ir57k6B,&P2SEL		; Both are pulsed
					bis.b	#Ir57k6A|Ir57k6B,&P2DIR		; Both are outputs
				_ENDOF
			_ENDCASE
			ret

