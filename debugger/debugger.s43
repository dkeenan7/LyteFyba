			COL		150				; Nice wide listings
; Ensure you set the FET Debugger download options to erase main memory _only_,
; _not_ information memory. This is to preserve the Bootstrap Loader and calibration data.
;
; This software has been developed by Mike Van Emmerik and Dave Keenan for their
; lithium battery monitoring system for high voltage electric vehicles.
;
; It is a debugger and bootstrap-loader writer for our cell-top Battery Monitoring Unit (BMU)
; based on an MSP430F2012 microcontroller.
; This version is interactive; there is also the non-interactive BSLwriter that requires reassembly
; to perform various actions, which may be required if clock frequency calibration is lost.
;
; This debugger should be the first program written to the 2kB of main-flash.
; This must be done using a flash programmer connected to the chip's JTAG port.
; The debugger contains a copy of a bootstrap loader (BSL).
; It writes this BSL to the 256 bytes of info-flash, while preserving some of the
; digitally controlled oscillator (DCO) calibration bytes that are stored there
; by the chip manufacturer. It can also perform voltage and temperature calibrations
; and store this calibration data in info-flash.
;
; The BSL consists of a software UART providing RS422-style serial communications,
; and a password-recognising state-machine. The state-machine normally passes incoming
; serial data to a command interpreter in main-flash. But when the password is recognised,
; the state-machine instead writes incoming serial data to main-flash.
; This allows it to overwrite this debugger with the normal command interpreter or monitor,
; sent via the serial input. And because the BSL transmits all data received on its serial
; input, to its serial output, a cascaded series of these MSP430 boards can all be updated
; simultaneously. You only need to send a new version of the monitor to the first board
; in the chain.
;
; But what if you want to update the BSL itself? In that case, instead of sending a new
; monitor, you send this debugger carrying the new version of the BSL.
; This time you send the debugger via the serial input not the JTAG port.
; That way you will update the BSLs of all the boards in the chain simultaneously.
;
; The existing BSL will dutifully load the debugger into main flash,
; completely unaware that it has just loaded the instrument of its own demise.
; When the old BSL calls the debugger, thinking it is initialising a new monitor,
; the debugger will write the new BSL to info-flash.
; Then the monitor must be sent again, to replace the debugger.
; The debugger still preserves the calibration data, which may now include
; voltage and temperature calibration data in addition to the DCO calibration data
; from the manufacturer.
;
; The BSL code is made to fit in the tiny 256 bytes of info-flash because
; this segment can be protected when the rest of the flash is erased,
; and all other flash segments are 512 bytes and contiguous with each other,
; but not with info-flash. For this reason, the BSL code is highly hand-optimised
; for space and uses some tricks that may make it hard to follow and hard to modify.
;
; The following is true of this debugger, and the BSL:
;	They use no interrupts, since the interrupt vectors will be reprogrammed.
;	They use no timer; timer use requires too many 6-byte instructions!
;   The serial input code does not check for false start bits or do majority voting on
;   data bits.

; Conditional assembly parameters which may be changed for special purposes
#include "../common/common.h"		// Common definitions such as FLASH_START
#define		ADCBUF		0			// 0 for no ADC sample buffer; 1 for buffer

minLEDBad	EQU		1				; Minimum badness to light error LED


; ADC channel numbers
CellVChan	EQU		$7				; ADC channel number for cell voltage
TempChan	EQU		$A				; ADC channel number for temperature
#if PCBVERSION < 57
LinkVChan	EQU		$3				; ADC channel number for link voltage
#else
LinkVChan	EQU		$6				; ADC channel number for link voltage
#endif
NumSamples	EQU		16				; Number of ADC over-samples (typ. 4 or 16)

; To get n more bits of resolution, add up 4^n samples and shift the result right by n bits.
; i.e. By adding up 4^n samples you get 2n more bits in the result,
; but half of them are noise and should be thrown away,
; leaving us with n bits of additional information.

; Locations in info-flash, of routines and calibration data
; These addresses must be manually exported to the monitor or interpreter.
; Assemble this file with listing-generation enabled, then look at the listing file
; to determine the absolute addresses to put into the monitor or interpreter.

infoInitRetAddr	EQU		mainInitRetAddr-for1000+$1000	; Return address when interpretByte
														; is called for initialisation
infoReadByte	EQU		ReadByte	-for1000+$1000		; Where to call ReadByte
infoWriteByte	EQU		WriteByte	-for1000+$1000		; Where to call WriteByte
infoBSLErase	EQU		mainBSLErase-for1000+$1000		; Where to jump in to erase main flash

infoDataStart	EQU		mainDataStart-for1000+$1000		; Used when copying between ram and info-flash
infoVoltCal		EQU		mainVoltCal -for1000+$1000		; Address of voltage scale calibration word
infoTempCal		EQU		mainTempCal	-for1000+$1000		; Address of temperature offset calibration byte
infoLinkCal		EQU		mainLinkCal	-for1000+$1000		; Address of link voltage offset cal byte
info8MHzCalD	EQU		main8MHzCalD-for1000+$1000		; Address of 8 MHz DCO frequency calibration
info8MHzCalB	EQU		main8MHzCalB-for1000+$1000		; Address of 8 MHz DCO range calibration
infoID			EQU		mainID		-for1000+$1000		; Address of BMU ID byte
infoDataVers	EQU		mainDataVers-for1000+$1000		; Address of Data Version byte
infoDataEnd		EQU		mainDataEnd	-for1000+$1000		; Used when copying between ram and info-flash
DATAVERS		EQU		6						; This is version 6 of the BMU info-flash data structure

; Locations in info-flash, of calibration data in previous versions of the BSL
; to allow us to update them to the current version without losing their calibration data.

; New chip (has $FFFF at $10C4)
infN8MHzCalD	EQU		$10FC		; Address of 8 MHz DCO frequency calibration
infN8MHzCalB	EQU		$10FD		; Address of 8 MHz DCO range calibration

; Interpreter Register Usage
;	Registers 0 thru 3 are dedicated machine registers (PC SP SR CG).
#define 	Rip		R5				// Virtual machine instruction pointer
#define 	Rlit	R6				// Holds partial literals
#define 	Rw		R8				// Working register - temporary - anyone can use

			LSTOUT-
#include "msp430.h"
#include "../common/ControlFlowMacros.h"	// Provides structured control-flow for assembly language
#include "../common/comMacros.h"			// Macros for obscure instruction sequences
			LSTOUT+

; Error register. 0 means no error
#define		rERR	r14					// Overlaps with Rcksum in the BSL, but that is OK

; The LOCKA bit in FCTL3 was made a *toggle*, for backwards compatibility.
; Use these macros to safely clear and set it.
CLRLOCKA	MACRO
			BIT		#LOCKA,&FCTL3		; Test LOCKA
			_IF		_NZ					; Currently locked?
				MOV		#FWKEY+LOCKA,&FCTL3 ; Yes, unlock
			_ENDIF
			ENDM

SETLOCKA	MACRO
			BIT		#LOCKA,&FCTL3		; Test LOCKA
			_IF		_Z					; Currently unlocked?
				MOV		#FWKEY+LOCKA,&FCTL3 ; Yes, lock
			_ENDIF
			ENDM


			ORG		$200			; Start of RAM
#if	ADCBUF
			ALIGNRAM 1
sampleBuf	DS		2*NumSamples	; ADC sample buffer; 4 or 16 samples
#endif

; RAM copies of various calibration settings
; Same order as stored in the BSL
			ALIGNRAM 1				; So these can be copied with word moves
ramDataStart
ramVoltCal	DS		2				; Voltage scale calibration word; may be written by BSL writer
ramTempCal	DS		1				; Temperature offset calibration; may be written by BSL writer
ramLinkCal	DS		1				; Link voltage offset calibration data; may be written by BSL writer
ram8MHzCalD DS		1				; 4 MHz DCO frequency calibration byte
ram8MHzCalB DS		1				; 4 MHz DCO range calibration byte
ramID		DS		1				; Cell/BMU identifier byte; first cell is 0; written by 'i' cmd
ramDataVers	DS		1				; Data version
ramDataEnd

; Miscellaneous variables

TXCksum		DS		1				; Transmit checksum

; ByteCodeInterpreter2 variables

RXCksum		DS		1				; Received packet xor checksum
intFlags	DS		1				; Interpreter flags, bitmask definitions follow
bHexOutput	EQU		1				; Should numeric output be in hexadecimal, not decimal?
bChecksumming EQU	2				; Are we sending checksums and checking received checksums?
bDontInterpret EQU	4				; Are we interpreting?
			ALIGNRAM 1
ToIN		DS		2				; Pointer to current character being stored in Text Input Buffer
TIB			DS		48				; Text Input Buffer (packet buffer)
TIBEnd
; Must leave room for stack (about 36 bytes)

;
; Debugger code in main-flash.
; If you change this to < $F000 you need to ensure JTAGstart is still >= $F000
; so, as the initial value of the reset vector, it can still be changed to $1000 without an erase.
			ORG		FLASH_START				
;
; We need an interpret-byte function here; the BSL (either the real BSL, or the BSL-image in bsl.s43)
; will call this when any bytes are received by the serial port, including "password" bytes.
; The BSL will also call this with a null that was not received by the serial port
; but is intended to initialise the interpreter or other main-flash program.
; It will do this on any reset and after successfully bootstrap-loading a new monitor or debugger or
; BSL-writer.
interpretByte:
			cmp		#infoInitRetAddr,0(SP)	; Is the call merely for initialisation?
			jeq		initialise				; If yes, don't echo the byte, initialise, and return
			cmp		#waitingIDAddr,0(SP)	; Is the call from the waitingID call to ReadByte?
			jnz		noWaitID				; If not, echo as usual
			ret								; Yes, so return to ReadByte's caller (debugger below),
											;	without calling WriteByte (don't echo wrong ID)
noWaitID
			call	#WriteByte				; No, not initialise call, echo the byte, as the BSL has not
#if PCBVERSION < 57
			bic.b	#LED,&P1OUT				; Turn off the error LED
#else
			bis.b	#ACTLED,&P1OUT			; Turn off the (inverted) activity LED
#endif
			call	#ACCEPT					; Process the byte
#if WATCHDOG
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart Watchdog Timer
#endif
			ret								; Return to the BSL


;
; The intitialise routine. This intialises everything except the stack pointer, including the
; ram calibration values. It could be called by main, or by the initialise call from the BSL
; If called by the BSL, the BSL's ReadByte loop is called, so that password detection and downloads
; are handled. If started by a cold start (reset or JTAG), it is assumed that the BSL may not be
; present, so a simple ReadByte loop is used that doesn't check for password bytes.
;
initialise:
#if !WATCHDOG
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer (bad idea, except while debugging)
#endif
			; Clear all variables in RAM
			_DO		#TIB-$200,R8
				clr		$200-2(R8)
			_mLOOP	#2,R8
			
#if PCBVERSION < 57
			; Set P1.4 (the Vref+ pin) as an output as well as the LED. This will put 0V at the
			; bottom of the link voltage divider, so we can test with paralleled boards,
			; and not have > Vcc on any analogue input (trust me, you get meaningless conversions)
			mov.b	#TXDp,&P1OUT			; Turn off LED and bypass; set TXDp
			mov.b	#LED+VREFp+TXDp+TXDm,&P1DIR ; Set LED, VREFp, and TX bits to output
#else
			mov.b	#ACTLED+TXDp,&P1OUT		; Turn off (inverted) ActLED and set TXDp. Short the piezo.
			mov.b	#ACTLED+VREFp+TXDp+TXDm+PIEZO,&P1DIR ; Set ActLED, VREFp, TX bits and PIEZO to output
			mov.b	#0,&P2SEL				; Set BYPASS and ERRLED to not be crystal osc pins
			mov.b	#0,&P2OUT				; Set BYPASS and ERRLED off
			mov.b	#$FF,&P2DIR				; Set BYPASS and ERRLED as outputs
#endif

			cmp.b	#DATAVERS,&infoDataVers
			jnc		unknownVersBSL					; Can't handle version 5 data layout; use BSLwriter
			; Now running 1 MHz SMCLK for compatibility with the monitor, hence watchdog timeout now 32 ms
			mov.b	#DIVM_1+DIVS_3,&BCSCTL2			; Set MCLK = DCOCLK/2, SMCLK = DCOCLK/8
			; Works for version 6 data or new chip, not other versions
			mov.b	&info8MHzCalB,&BCSCTL1			; 8 MHz cal data from info-flash
			mov.b	&info8MHzCalD,&DCOCTL
			; Prepare ACLK for piezo drive -- 3 kHz square wave
			mov.b	#LFXT1S_2,&BCSCTL3		; Select VLOCLK (~12 kHz) as source for ACLK divider
			bis.b	#DIVA_2,&BCSCTL1		; Set ACLK = VLOCLK/4 = 3 kHz

			clr		rERR					; Clear error register

;
; Initialise the ADC10
;
			; Enable cell and link analog inputs. Enable ADC function of P1.4 (Vref+ out)
			mov.b		#(1<<CellVChan)|(1<<LinkVChan)|(1<<4),&ADC10AE0
			; Initialise ADC10
			; SREF_1    = +-refs are Vref+ and AVSS
			; ADC10SHT_3 = sample time is 64 ADC10CLKs (32 us required for temp)
			; REFOUT    = connect Vref+ to pin P1.4
			; REFON		= turn on the voltage reference and reference buffer
			; No MSC	= single sample and conversion
			mov			#SREF_1+ADC10SHT_3+REFOUT+REFON,&ADC10CTL0
			; Other ADC10 initialisation is done every time "measure" is called, to save code

;
; Miscellaneous initialisation
;
;			clr.b	TXCksum						; Clear transmit checksum
			
;
; Initialise the command character (bytecode) interpreter
;
;			clr.b	&RXCksum					; Clear the receive checksum
;			bic.b	#bHexOutput,&intFlags		; Decimal output mode by default
;			bic.b	#bChecksumming,&intFlags	; Checksumming of packets, off by default
;			bic.b	#bDontInterpret,&intFlags	; Interpret
			mov		#TIB,&ToIN				; Packet pointer
			
;
; Copy calibration data into RAM
;

;
; If we find $FFFF (erased flash) at $10C4 (near start of info-flash protected segment A),
; then assume it's a new chip.
			cmp		#$FFFF,&$10C4	; Don't look at $1000 in case JTAG debugger is set to erase it
			jeq		newChip			;	before downloading
			
; It's not a new chip so check the data version number at the end of info-flash.
			cmp.b	#DATAVERS,&infoDataVers
			jeq		currVersBSL
;			jge		unknownVersBSL
;			jl		unknownVersBSL
unknownVersBSL
; Version number is higher or lower than this BSL-writer knows about,
; so we should leave it alone and raise an error.
			mov		#b'01010101,rERR			; 4 flashes
			jmp		errorFlash
			

newChip
; A new chip. We want to preserve some of the existing DCO calibration data

			; Set the ID, voltage, temperature and link calibration to $FF
			mov.w	#$FFFF,&ramVoltCal
			mov.w	#$FFFF,&ramTempCal			; Includes ramLinkCal
			mov.w	&infN8MHzCalD,&ram8MHzCalD	; Copy 8 MHz calibration data
			mov.b	#$FF,&ramID					; ID 255 (erased)
			ret
			
			
currVersBSL
			; The RAM image has the same layout as current version data, so we use a block move
			_DO		#infoDataEnd-infoDataStart,R15	; Prepare to move ~8 bytes
				mov.b		infoDataStart-1(R15),ramDataStart-1(R15)	; Move 1 byte
			_mLOOP	#1,R15							; Decrement loop counter by 1, loop if non zero
			ret

DELAY_IF_NEEDED MACRO
			_DO		#1390,R11			; Delay for approx ...
			_LOOP	R11					;	... 1.04 ms
			ENDM						; Allows downstream BMU to echo a byte


; Some definitions so the common code will work
ID			EQU		ramID				; We use the RAM copy of the ID for s, x, prettyPrint commands
waitTxCmpl	ret							; Empty routine: transmit is always complete
TX_ByteCk	xor.b	R8,&TXCksum			; Alternative entry which accumulates checksum
TX_Byte		clr		R11					; Needed for BSL's WriteByte
			call	#WriteByte
#if WATCHDOG
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and restart watchdog timer
#endif
			DELAY_IF_NEEDED
			ret


; Some definitions so the common code will work
#define VoltCal ramVoltCal
#define TempCal	ramTempCal
#define LinkCal	ramLinkCal

#include "../common/comMisc.s43"			// Miscellaneous common functions, e.g. TX_Cksum
#include "../common/measure.s43"			// ADC Measurement
#include "../common/math.s43"				// Multiply and divide
#include "../common/BytecodeInterpreter2.s43"


;
; Compare the 256 bytes at for1000 with what's at $1000. Returns with Z set if OK, Z clear if not
; Assumes that there are three "zones": 1) Program zone, to be compared with the image in the middle of
; main flash; 2) Calibration zone, to be compared with RAM; 3) Version zone (used to also have the
; password table) which is compared with the image in main flash as well.
; Relies on definitions like infoDataStart and mainDataEnd to sort out the boundaries
; Trashes R12
compareImage:
			clr		R12
cmpLoop1	cmp.b	$1000(R12),for1000(R12)		; Use byte compares, in case there is odd sized data at
			jnz		justRet						;	the end
			inc		R12
			cmp		#mainDataStart-for1000,R12	; End of zone 1?
			jnz		cmpLoop1
			; R12 is too big by about $F8 (doesn't start at zero to save an instruction to clear R12)
cmpLoop2	cmp.b	$1000(R12),ramDataStart-(mainDataStart-for1000)(R12)
			jnz		justRet
			inc		R12
			cmp		#mainDataEnd-for1000,R12
			jnz		cmpLoop2
cmpLoop3	cmp.b	$1000(R12),for1000(R12)
			jnz		justRet
			inc.b	R12
			jnz		cmpLoop3					; Branch if 8-bit increment has not overflowed to 0
			; The increment will have set Z if all compares well
justRet		ret


; ----------------------------------------------------------------------------
; The bootstrap loader (BSL)
;
; This will be relocated to info-flash which starts at $1000.
#include "../common/bsl.s43"


; ----------------------------------------------------------------------------
; errorFlash
; Takes a 16 bit pattern in rERR and repeatedly flashes the error LED in that pattern
; at 0.4 seconds per bit, LSbit first. It never returns -- infinite loop.
; This error processing code should be near the middle of the image.
errorFlash:	
			mov.w	#WDTPW+WDTHOLD,&WDTCTL		; Stop Watchdog Timer (ReadByte may have reset it)
			; We could end up here after the DCO calibration has been set to $FFFF,
			;	so the processor could be running very fast.
			mov.b	#$8D,&BCSCTL1				; Typical 8 MHz DCO calibration value
			mov.b	#$81,&DCOCTL				;	so we can count the flashes
			mov		rERR,R9
			_BEGIN
				mov		#16,R10					; Bit loop counter
				rra		R9						; LSB into carry
				subc.b	R11,R11					; Zero if carry was set, $FF otherwise
				inv.b	R11
#if PCBVERSION < 57
				movBits_B R11,#LED,&P1OUT		; Trashes R11
#else
				movBits_B R11,#ERRLED,&P2OUT	; Trashes R11
#endif
				_DO		#8,R11					; 8 * 49 = 392 ms delay
					_DO		#0,R12				; 65536 * 3 / 4 MHz = 49 ms delay
					_LOOP	R12
				_LOOP	R11
				dec		R10
			_UNTIL	_Z							; Until 16 bits sent
			jmp		errorFlash					; Infinite loop


; Command character definitions
#include "debDefinitions.s43"

;
; Start of the actual debugger, when not started from the BSL
; This initialises, then updates info-flash, and starts the BSL there so we have a ReadByte loop
;
main:										; For IAR Embedded Workbench IDE debugger

; This address (JTAGstart) is the initial value of the reset vector, and we need to change the
; reset vector to $1000 once we have established a BootStrap Loader (BSL) there.
; We want to do this without having to erase the reset vector, as we would have to erase the whole
; segment it's in. You can flash-write a 1 bit to a 0 bit without erasing, but not the other way.
; Therefore JTAGstart must be in the range $F000 to $FFFF, not $E000 to $EFFF.

#if		FLASH_START < $F000		; Should be #if $ < $F000 but this is considered a forward reference
		ORG		$F000
#endif
JTAGstart:	mov		#$280,SP
			call	#initialise				; Do most of the initialisation
			br		#_updateInfoFlash		; Update info flash, establish a BSL, change the reset
											; vector to point to the BSL, then branch to it.
			


; The linker puts a checksum of the used code memory in the first available unused space,
; when asked for one.
; To keep our BSL (bootstrap loader) happy we need a simple 1-byte XOR checksum.
; To obtain this we set the IAR Embedded Workbench IDE Project/Options/Linker/Checksum options to:
; Fill unused code memory
; 	Fill pattern: 0xFF
;	Generate checksum
;		Size: 1 byte, Alignment: 1
;		CRC Polynomial: 0x101
; 		Complement: As is
;		Bit order: MSB first, Initial value: 0x42
; The initial value of 0x42 is required because the reset vector of $F8BA at $FFFE is not transmitted
; and so the BSL does not include it in its checksum, but the linker does.
; If the reset vector changes, this initial value will need to be changed to keep it as
; the XOR of its two bytes.

; And we set the IAR Embedded Workbench IDE Project/Options/Linker/Extra Output options to:
; Generate Extra Output File
;	Override default
;	debugger.bin
;	Output format: raw-binary

; Some calculations so we can see how much space we have left, by reading the listing.
freespace		EQU		_OPCODETBL-$
#define BCD(x) 			( x / 100 * $100 + x % 100 / 10 * $10 + x % 10 )
spaceaspercent	EQU		BCD( (100*freespace)/2048)


			ORG		$FFFE			; The reset vector
			dw		JTAGstart		; If this BSL-writer is JTAGged then the reset vector must point
									;	to it directly. For example, a new chip has no BSL at all.
			END
