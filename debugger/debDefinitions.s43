;
; Command character definitions for the debugger
;

#include "../common/comDefinitions.s43"			; Include the definitions common to monitor
												; and debugger
												
#if IMAGE_START < $F800							; Comment out if short of space
;
; ADCScaled or R(a)wVoltage ( channel -- measurement )
; "channel" has channel number shifted left 12 bits.
; e.g. $7000 for cell voltage, $A000 for temperature, $3000 for link voltage.
; "measurement" is 12-bit (0 to 4095) with voltage scale calibration applied,
; which corresponds to millivolts in the case of cell voltage.
;
		xCODE		'a',ADCScaled,_ADCScaled
		mov			Rtos,R8
		call		#measAndScale			; Measure and use voltage scale calibration
		mov			R10,Rtos
		ret
#endif
		
; Some characters need to be translated into RAM adresses of calibration values
		ALIGN	1
calAddressTable
		DB		'v' , ramVoltCal  & $7F	| $80	; High bit set to indicate word quantity,
		DB		't' , ramTempCal  & $7F | $00	; clear for byte quantity
		DB		'l' , ramLinkCal  & $7F | $00
		DB		'f' , ram8MHzCalD & $7F	| $80
		DB		'i' , ramID       & $7F | $00
		; Zero must not appear in the table as it is used to represent "unrecognised".
sizeCalAddressTable	EQU	$-calAddressTable

;
; TranslateToCalAddr ( ch -- addr )
;
TranslateToCalAddr:
		; Do the calibration address translations using the table above
		mov		#sizeCalAddressTable,R9 ; Initialise the loop counter and table index
		_BEGIN				; Begin loop
			mov.w	calAddressTable-2(R9),R10 ; Get two bytes from the table
			cmp.b	R10,Rtos	; Compare the address character with the low byte from the table
			_WHILE	_NE			; While no match [ _WHILE xx = _IF xx  _CS_SWAP ]
				decd	R9			; Decrement loop-counter/table-index by 2
		_UNTIL	_Z			; Until loop counter is zero
		clr		Rtos		; Finished loop with no match so set result to zero for "unrecognised"
			_ELSE				; Else there is a match so
				swpb	R10			; Get the high byte from the table
				mov.b	R10,Rtos	; Substitute it for the address character
			_ENDIF				; Endif match
		ret
		
;
; Calibrate ( n ch --- )
; Perform a calibration whose type is ch ('v for voltage etc) and value is n
;
			xCODE	'c',calibrate,_calibrate
			_CASE
			_OFb	#'v',Rtos			; 'v': cell Voltage
				mov		#CellVChan<<12,R8		; ADC channel for scaled cell voltage input
				call	#measure
; The calibration scale factor will be the expected value divided by the reading.
; The expected value is an unsigned 12 bit integer of millivolts and
; the reading is an unsigned 12.2 bit fixed-point number of millivolts.
; We want the calibration scale factor to be represented as an unsigned 1.15 fixed-point number
; i.e. a number with 1 integer bit and 15 fractional bits.
; So we shift the expected value 17 places left before the division.
				clr		R9							; 16 bits of zeroes
				mov		Rsec,R10
				rla		R10							; 17 zeroes; we have value << 17 in R10:R9
				mov		R8,R11						; The divisor is the voltage reading in R8
				rra		R11							; Add half the divisor to the dividend for rounding
				add		R11,R9
				adc		R10
				call	#UMSlashMod					; Gives quotient in R9, remainder in R10
				mov.w	R9,&ramVoltCal				; Save calibration value
			_ENDOF
			
			_OFb	#'t',Rtos			; 't': temperature
;
; Temperature offset calibration
; M = 4096/1.5 * (.00355 T + typ0.986)
;	= 9.694*T + typ2692
; M/9.694	= T + typ277.7
; Per the MSP430F2012 datasheet, typ277.7 aims at 273, so the reading is proportional
; to the absolute temperature, with an offset of +- 100 mV.
			; We use offsetByte = (M/9.694 - T) >> 1
; So we use offsetByte = (M/9.694 - T) - 273
; and T = M/9.694 - 273 - offsetByte
;
				mov		#TempChan<<12,R8			; ADC channel for temperature sensor
				call	#measAndScale

; To divide by 9.694, multiply by 65536/9.694 = 6760
				mov		R10,R8
				mov		#6760,R9
				call	#UMStar
				sub		#273,R10
				sub		Rsec,R10					; Subtract 273 and the calibration temperature
				mov.b	R10,&ramTempCal				; Save temperature offset calibration value
			_ENDOF
			
			_OFb		#'l',Rtos				; 'l': link voltage
				mov		#LinkVChan<<12,R8
				call	#measAndScale
				sub		#2048,R10					; Zero volts for link voltage is a 2048 reading
				;sub		Rsec,R10				; Subtract required reading (usually 0)
				; Actually require 1.3653*Rsec to be subtracted. Too much code. So `lc will always
				;	calibrate to zero millivolts (calibrate with no significant charge or discharge).
				cmp		#$FF81,R10					; -$7F
				jl		nonCal						; If <s -$7F, use the $80 non-calibrated value
				cmp		#$80,R10
				jl		realCal						; If >s -$7F and <s $80, use as real calibration value
nonCal			mov		#$80,R10
realCal
				mov.b	R10,&ramLinkCal				; Save the link calibration value
			_ENDOF
;
; Default case
				jmp		emitQmark					; Unknown calibration type character

			_ENDCASE

			;jmp		_readCalValue			; Display the value just calibrated and return
												;	(by falling through)
			;
			; Keep 'c' command (above) and 'r' command (below) together
			; That is, don't insert a new command here
			;
;
; Read calibration value ( ch --- )
; Calibration type (e.g. 'v' for cell Voltage) in ch
			xCODE	'r',readCalValue,_readCalValue ; Note: 'r' prints Rx state in monitor
			call 	#TranslateToCalAddr
			mov.b	Rtos,Rsec				; Convert to RAM address in Rsec
			bic.b	#$80,Rsec
			bis		#$200,Rsec
			tst.b	Rtos
			_IF		_NZ						; If not zero (zero means "unrecognised")
				_IF		_NN						; If high bit set
					mov		#3,Rtos					; Display 3 digits
					mov.b	@Rsec,Rsec				; Get byte sized cal value
				_ELSE							; Else high bit clear so
					mov		#5,Rtos					; Display 5 digits
					mov.w	@Rsec,Rsec				; Get word sized cal value
				_ENDIF							; Endif high bit
			_ELSE 							; Else is zero for "unrecognised"
emitQmark:		mov		#'?',Rtos				; Question mark should be ignored by downstream BMUs
				call	#_EMIT					; Call EMIT
				mov		#$0D,Rtos				; Carriage return
				jmp		_EMIT					; Tail-call EMIT and return
			_ENDIF							; Endif unrecognised
			mov.b		#' ',Rthd			; Trailing char (space)
			jmp 	_prettyPrint			; Tail-call prettyPrint and return
			
;
; Write calibration value ( n ch --- )
;
; n is value to write. ch is calibration type (e.g. 'v for cell Voltage).
;
; Note: The 'fw or 'ow command can affect the CPU clock in such a way that the processor
; is no longer capable of receiving commands, and needs physical access to recover.
; So take great care. If the worst happens, JTAG the BSLwriter to set frequency calibration.

			xCODE	'w',writeCalValue,_writeCalValue
			call 	#TranslateToCalAddr
			mov.b	Rtos,R9					; Convert to RAM address in R9
			bic.b	#$80,R9
			bis		#$200,R9
			tst.b	Rtos
			_IF		_NZ						; If not zero for "unrecognised"
				_IF		_NN						; If high bit set
					mov.b	Rsec,0(R9)				; Set byte sized cal value
				_ELSE							; Else high bit clear so
					mov.w	Rsec,0(R9)				; Set word sized cal value
				_ENDIF							; Endif high bit
				cmp	#ram8MHzCalD,R9
				_IF		_EQ
					mov.b	@R9+,&DCOCTL
					mov.b	@R9,&BCSCTL1
				_ENDIF
			_ELSE 							; Else is zero for "unrecognised"
				jmp		emitQmark
			_ENDIF							; Endif unrecognised
			ret

;
; setIDs ( -- )
;
			xCODE	'i',setIDs,_setIDs
; It just doesn't seem to work out to use the delay between BMUs to determine the correct ID, so
; we simply read the ID from the serial port, and echo the next ID downstream.

			call	#ReadByte				; Read the byte into R8, don't echo it, trashes R9 R10 R11
											; Not echoed because of logic in interpretByte
waitingIDAddr								; This address will be on the stack in interpretByte
			mov		R8,R12					; Save our ID
			inc		R8
			call	#WriteByte				; Send downstream BMU's ID
#if PCBVERSION < 57
			bic.b	#LED,&P1OUT				; Clear LED set by WriteByte
#else
			bis.b	#ACTLED,&P1OUT			; Clear (inverted) activity LED set by WriteByte
#endif
			mov.b	R12,&ramID				; Save our ID to RAM
			ret

;
; Update info-flash ( -- )
;
			xCODE	'u',updateInfoFlash,_updateInfoFlash
; Prepare to flash-program
; Assumes ACCVIE = NMIIE = OFIE = 0.
; FSSEL: 1=MCLK FN: 2=divide by 3, 11=divide by 12. Must end up in the range 257-476 kHz
			MOV		#FWKEY+FSSEL_1+FN0*(12-1),&FCTL2 ; For 4 MHz MCLK
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer

; Erase info flash including segment A.
			mov		#$1000,R12				; Start of info-flash
eraseInfo	MOV		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA
			MOV		#FWKEY+ERASE,&FCTL1		; Enable single segment erase (doesn't seem to "stick")
			rra		@R12					; Dummy write: erase segment
			add		#64,R12					; Next segment
			cmp		#$10C0,R12
			jnz		eraseInfo				; Loop until at start of segment A
			CLRLOCKA						; Clear segment A lock (so we can erase and write it also)
			MOV		#FWKEY+ERASE,&FCTL1		; Enable single segment erase
			rra		@R12					; Dummy write: erase segment A

			MOV		#FWKEY+WRT,&FCTL1		; Enable write (can leave on; only write block that can't)
; We assume 3 zones here: program, RAM, and version (see compareImage for details)
			clr		R12						; Index register
pifLoop1	mov.b	for1000(R12),$1000(R12)	; Program byte from first zone
			inc		R12
			cmp		#mainDataStart-for1000,R12	; Check for start of calibration data
			jnz		pifLoop1				; Repeat until done this part

; In the source operand of the move instruction below, R12 is larger by about F8 (mainDataStart-for1000)
; than we want, hence the subtraction
pifLoop2	mov.b	ramDataStart-(mainDataStart-for1000)(R12),$1000(R12) ; Program from RAM (zone 2)
			inc		R12
			cmp		#mainDataEnd-for1000,R12 ; Check for end of calibration data
			jnz		pifLoop2

; Now move the 1 or more constant bytes.
pifLoop3	mov.b	for1000(R12),$1000(R12)	; Program from zone 3
			inc.b	R12
			jnz		pifLoop3				; Loop till the end of info flash (8-bit index wraps to 0)

			MOV		#FWKEY,&FCTL1			; Done. Clear WRT
			MOV		#FWKEY+LOCK+LOCKA,&FCTL3 ; Set LOCKs
			SETLOCKA						; Ensure segment A is locked
			;
			; Check that the flash programming worked
			;
			call	#compareImage			; Compare the for1000 image with what's at 1000
			jnz		failCompare
			
			;
			; Compares successfully. Point the reset vector at the new BSL.
			; No flash erase is done. It relies on only having to change 1 bits to 0 bits.
			mov		#FWKEY,&FCTL3			; Clear LOCK, don't toggle LOCKA
			mov		#FWKEY+WRT,&FCTL1		; Enable write
			mov		#$1000,&$FFFE			; Re-point reset vector
			mov		#FWKEY+LOCK,&FCTL3		; Set LOCK; no accidental flash programming

			mov.w	#WDTPW+WDTCNTCL,&WDTCTL ; Clear and restart Watchdog Timer
			br		#$1000					; Start the new BSL

failCompare mov		#3,rERR
			jmp		errorFlash

#if IMAGE_START < $F800			// Commented out when need to save space
;
; ParallelPullDown ( boolean -- ) 1 to pull down. 0 to be Vref+ during conversions.
; When testing with BMUs powered up in parallel, link inputs are at +3.6 V.
; Having any analog input above Vcc screws up all analog readings.
; So we set P1.4 (usually Vref+ out during conversion)
; as a low digital output to keep the link input below Vcc.
; But maybe it needs to be below Vref+? See MSP430F2012 datasheet page 39 note 2.
; So use 1p for parallel testing, and 0p (default)) for operation on cells
; MVE: This should not be an issue if testing at <= about 3.5 V, e.g. with our LM4041 mod
; This is because 3.5 V averaged with 1.5 V gives 2.50 V, which is OK
;
		xCODE	'p',ParallelPullDown,_ParallelPullDown
		tst			Rtos
		_IF			_Z
			bis.b	#1<<4,&ADC10AE0		; Set bit 4 in analog enable register.
			bis		#REFOUT,&ADC10CTL0	; Set the REFOUT bit in analog ctl0 reg
		_ELSE
			bic.b	#1<<4,&ADC10AE0		; Clear bit 4 in analog enable register.
			bic		#REFOUT,&ADC10CTL0	; Clear the REFOUT bit in analog ctl0 reg
		_ENDIF
;		DROP
		ret
		
;
; GetByte - get a byte (NOT to stack) and display it ( addr -- )
;
			xCODE	'g',GetByte,_GetByte
			mov.b	#' ',Rthd
			mov.b	@Rtos,Rsec
;			mov		#3,Rtos
			jmp		_prettyPrint3			; Tail-call pretty-print of 3 digits
			
;
; ZtoreByte - store a byte (a la CStore) ( ch addr -- )
;
			xCODE	'z',ZtoreByte,_ZtoreByte
			mov.b	Rsec,0(Rtos)
			ret
#endif

#if IMAGE_START < $F800		// Commented out if need to save space
;
; PeeQWord - get a word (NOT to stack) and display it ( addr -- )
;
			xCODE	'q',PeeQWord,_PeeQWord
			mov.b	#' ',Rthd
			mov.w	@Rtos,Rsec
			mov		#5,Rtos
			jmp		_prettyPrint
#endif

#if 0 && IMAGE_START < $F800		// Commented out if need to save space
;
; stOreWord - store a word (a la Store) ( n addr -- )
;
			xCODE	'O',stOreWord,_stOreWord
			mov.w	Rsec,0(Rtos)
			ret

;
; Change Octave of piezo alarm.
;
			xCODE	'o',octave,_octave
			mov.b	&ram8MHzCalD+1,R8
			mov.b	R8,R9
			bic		#$30,R9					; Clear the octave bits (bits 5 and 4)
			add		#$10,R8					; Next octave
			and		#$30,R8					; Just the octave bits
			bis		R8,R9					; New value in R9
			mov.b	R9,&ram8MHzCalD+1		; Update RAM
			mov.b	R9,&BCSCTL1				; Make it "live"
			ret

;
; JumpTo - Call the code at addr ( addr -- )
;
			xCODE	'j',JumpTo,_JumpTo
			mov		Rtos,R8		; Save the jump address in a trashable non-stack reg
			DROP				; Drop stack in case the code at addr uses stack arguments
			br		R8			; Tail-call the code at addr and return
#endif
			
			
#if 1 // Assembly of 'e' command can be turned off if desperate for space		
;
; Turn on or off the error LED (bool -- )
;
		xCODE	'e',errorLed,_errorLed
#if PCBVERSION < 57
		call	#waitTxCmpl			; If this is called interactively, wait for CR to completely echo
		allBitsIfNZ	Rtos,Rtos		; IF Rtos is nonzero THEN $FF to Rtos ELSE $00 to Rtos
		movBits_B	Rtos,#LED,&P1OUT ; Move only the #LED bit from Rtos to &P1OUT. Trashes Rtos.
#else
		tst		Rtos
		_IF		_Z
			bic.b	#ERRLED,&P2OUT			; Turn off the error LED
			bic.b	#PIEZO,&P1SEL			; Short out the piezo
		_ELSE
			bis.b	#ERRLED,&P2OUT			; Turn on the error LED
			bis.b	#PIEZO,&P1SEL			; Make the piezo squeal
		_ENDIF
#endif

;		pop		Rtos				; Remove operand
		ret
#endif

#if IMAGE_START < $F800	// Commented out if need to save space
;
; Turn on or off bypass resistors ( bool -- )
;
		xCODE	'y',bypass,_bypass
		allBitsIfNZ	Rtos,Rtos		; IF Rtos is nonzero THEN $FF to Rtos ELSE $00 to Rtos
#if PCBVERSION < 57
		movBits_B	Rtos,#BYPASS,&P1OUT ; Move only the #BYPASS bit from Rtos to &P1OUT. Trashes Rtos.
#else
		movBits_B	Rtos,#BYPASS,&P2OUT ; Move only the #BYPASS bit from Rtos to &P2OUT. Trashes Rtos.
#endif
;		pop		Rtos				; Remove operand
		ret
#endif

;
; f command ( -- )
; This outputs a fixed frequency to the error LED and two TX outputs (in phase, so it doesn't send the
; downstream BMU crazy) for 5 seconds. Used for checking clock calibration.
; NOTE: this command can only be used (in conjunction with `fw) to make small adjustments to
;	CPU speed, since communications will be affected!

			xCODE	'f',frequencyBurst,_frequencyBurst
			mov		#28,R11					; To give 5 seconds with 4 Mhz MCLK
			call	#doBurst
			ret

;
; EMIT ( c -- )	; Emit the character on top of stack
;
		xCODE	'm',EMIT,_EMIT
		mov.b	Rtos,R8
		call	#TX_Byte
;		pop		Rtos
;		DROP
		ret


;
; Toggle LED, TXDm, and TXDp with an 11 cycle loop,
; or 4000/2/11 = 181.8 kHz (@ 4 MHz) or 181.5 kHz (@ 9600*416 Hz).
; When changing the cal value with e.g. $8D80'fw, a change of one lsbit changes the
; output frequency by about 0.5 kHz in the same direction.
;

doBurst		
			mov.w	#WDTPW+WDTHOLD,&WDTCTL	; Stop Watchdog Timer
			clr		R10
#if PCBVERSION < 57
			clr.b	&P1OUT					; LED off, transmit outputs at same low level
burstLp		xor.b	#LED+TXDp+TXDm,&P1OUT	; (5) Toggle all 3 bits
#else
			mov.b	#ACTLED,&P1OUT			; activity LED off, transmit outputs at same low level
burstLp		xor.b	#TXDp+ACTLED+TXDm,&P1OUT ; (5) Toggle all 3 bits
#endif
			dec		R10						; (1)
			jnz		jBurstLp				; (2) Jump to a 3-cycle delay to burstLp
			dec		R11						;	(alt1 1)
			jnz		burstLp					;	(alt1 2)
#if PCBVERSION < 57
			mov.b	#TXDp,&P1OUT			; Restore TXDp
#else
			mov.b	#TXDp+ACTLED,&P1OUT			; Restore TXDp and turn activity LED off
#endif
			mov.w	#WDTPW+WDTCNTCL,&WDTCTL	; Clear and restart Watchdog Timer
			ret
jBurstLp	br		#burstLp				;	(alt2 3)
