;
; Command character definitions for the monitor
;

#include "../common/comDefinitions.s43"			; Include the definitions common to monitor
												; and TestICal

; checKsumming ( -- )						; Toggle bChecksumming
			; kk to turn checksumming off, k to turn it on (irrespective of present state)
			xCODE	'k',checksumming,_checksumming
			xor.b	#bChecksumming,&interpFlags ; Toggle bChecksumming bit in interpFlags
			ret

; Kill status sending ( boolean -- )		; 1 for no status, 0 for status
			xCODE	'K',KillStatus,_KillStatus
			allBitsIfNZ	Rtos,Rtos			; IF Rtos is nonzero THEN $FF to Rtos ELSE $00 to Rtos
			movBits_B	Rtos,#bNotSendStatus,&monFlags ; Move only bNotSendStatus from Rtos to monFlags
			ret

; Charging ( boolean -- )				; 1 when charging or regenning, 0 when driving
			; This lets the CMU include undertemperature and exclude undervoltage as stress when charging,
			; and when masterless-charging is enabled via the 'o' command, this command
			; start and stops charging.
			xCODE	'c',Charging,_Charging
			allBitsIfNZ	Rtos,Rtos			; IF Rtos is zero THEN $FF to Rtos ELSE $00 to Rtos
			movBits_B	Rtos,#bCharging,&monFlags ; Move only bCharging from Rtos to monFlags
			ret

#if MASTERLESS_CHARGING
; ChargerC(o)ntrol ( voltMin voltMax -- )
			; This command only makes sense for the last CMU/BMU in the string, with an adapter
			; from its fibre-optic output to the serial input of a PIP inverter/charger.
			; If voltMax is non-zero, whenever you get a '1c' command, run a PI controller on stress
			; to control a PIP inverter/charger at 2400 baud.
			; If voltMax is zero, disable charger control and go back to status sending at 9600 baud.
			; voltMin is minimum charger voltage in tenths of a volt.
			; voltMax is maximum charger voltage in tenths of a volt.
			; e.g. 480 584o<cr> for charger control between 48.0 and 58.4 volts, the PIP's maximum range
			; 0o<cr> to go back to status sending.
			xCODE	'o',ChargerControl,_ChargerControl
			mov		Rtos,&chargerVoltMax		; Set the maximum charger voltage
			tst		Rtos
			_IF		_Z							; If the maximum is zero
				bic.b	#bChargerControl,&monFlags	; Clear the bChargerControl bit in monFlags
			_ELSE
				bis.b	#bChargerControl,&monFlags	; Set the bChargerControl bit in monFlags
				mov		Rsec,&chargerVoltMin		; Set the minimum charger voltage
			_ENDIF
			ret
#endif // MASTERLESS_CHARGING

; Rx state ( -- )
			xCODE	'R'|'x' <<8,RxState,_RxState ; 'Rx' collides with 'Rp' 'R0' 'Jx' 'Jp' 'J0'
			mov		#'R'|'x'<<8,Rthd		; Type is Rx state
			mov.b	&ticksSinceLastRx,Rsec	; Result in ticks
;			mov		#3,Rtos					; Print 3 digits
			br		#_prettyPrint3			; Tail-call pretty-print of 3 digits and return

; Comms error ( -- )						; Report temporary master's ID
_commsError	; No command character since it never needs to be interpreted and 'c' is used for Charging
			mov		#'c',Rthd				; Type is comms error
			mov		#0,Rsec					; Zero value (so no minus sign)
			mov		#0,Rtos					; Send no digits of value (will get '$' if hex)
			br		#_prettyPrint			; Tail-call pretty-print and return

; Stress ( -- )								; Report local stress
			xCODE	'j',Stress,_Stress		; 'j' for just local stress (not the full status)
			mov		#'j',Rthd				; Type is stress
			mov.b	&localStatus,Rsec		; Get local status
			and.b	#STRESS,Rsec			; Extract stress level, 0 to 15
;			mov		#3,Rtos					; Print 3 digits
			br		#_prettyPrint3			; Tail-call pretty-print of 3 digits and return

; Status ( -- )								; Report global status if a BMU, else local status
			xCODE	'p',Status,_Status		; 'p' for pain since we've already used 's' for select
			push.b	&interpFlags			; Save present number base
			bis.b	#bHexOutput,&interpFlags ; Set to hexadecimal output
			mov		#'p',Rthd				; Type is stress
			cmp.b	#255,&ID
			_IF		_EQ						; If BMU
				mov.b	&globalStatus,Rsec		; Get global status
			_ELSE
				mov.b	&localStatus,Rsec		; Get local status
			_ENDIF
			and.b	#$7F,Rsec				; Clear the high bit
;			mov		#3,Rtos					; Print 3 digits
			call	#_prettyPrint3			; Tail-call pretty-print of 3 digits and return
			popBits_B #bHexOutput,&interpFlags ; Restore number base
			ret

; Query worst stress ( minStressToShow -- )
			xCODE	'q',queryWorstStress,_queryWorstStress
			cmp.b	Rtos,&worstStress
			_IF		_LO
				ret
			_ENDIF
			push.b	&interpFlags				; Save present number base
			bic.b	#bHexOutput,&interpFlags	; Set to decimal output

			DELAY_IF_NEEDED					; Allow time for CR to be echoed upstream if needed
			mov		#EXIT,R8				; Send initial slosh (EXIT command or comment character)
			call	#TxByteCk				; which stops rest of packet being interpreted

			mov.b	&ID,Rsec				; Emit the ID
			call	#_emitNum3				; as 3 digits

			mov		#ColonQspace,R10
			call	#TxStringCk

		;	mov		#':',R8					; Colon separator
		;	call	#TxByteCk
		;	mov		#'q',R8					; 'q' as type of result
		;	call	#TxByteCk
		;	mov		#' ',R8					; Space separator
		;	call	#TxByteCk

			mov.b	&worstStress,Rsec		; Emit worstStress
			mov		#2,Rtos					; as 2 digits
			call	#_emitNum
			mov		#' ',R8					; Space separator
			call	#TxByteCk

			ClearWatchdog

			; Now send the index of the following measurement that caused the worst stress
			mov.b	&worstStressType,Rsec	; Send index of following measurement that caused worst stress
			mov		#1,Rtos					; as 1 digit
			call	#_emitNum
			mov		#' ',R8					; Transmit a space
			call	#TxByteCk

			; Now send the worst over-voltage
			mov		&worstOV,Rsec			; Send worst over-voltage
			call	#_emitNum4				; as 4 digits
			mov		#' ',R8					; Transmit a space
			call	#TxByteCk

			ClearWatchdog

			; Now send the worst under-voltage
			mov		&worstUV,Rsec			; Send worst under-voltage
			call	#_emitNum4				; as 4 digits
			mov		#' ',R8					; Transmit a space
			call	#TxByteCk

			; Now send the worst over-temperature
			mov		&worstOT,Rsec			; Send worst over-temperature
			mov		#2,Rtos					; as 2 digits
			call	#_emitNum
			mov		#' ',R8					; Transmit a space
			call	#TxByteCk

			ClearWatchdog

			; Now send the worst under-temperature
			mov		&worstUT,Rsec			; Send worst under-temperature
			mov		#2,Rtos					; as 2 digits
			call	#_emitNum
			mov		#' ',R8					; Transmit a space
			call	#TxByteCk

			; Now send the worst absolute link voltage
			mov		&worstAL,Rsec			; Send worst absolute link voltage
			call	#_emitNum4				; as 4 digits
			mov		#' ',R8					; Transmit a space
			call	#TxByteCk

			call	#TxEndOfPacket

			popBits_B #bHexOutput,&interpFlags ; Restore number base
			ret
ColonQspace	DB		3, ':q '				; First byte is length of following string
			ALIGN	1

; Reset worst stress ( -- )
			xCODE	'{',resetWorstStress,_resetWorstStress ; Frowny mouth :-{ because irreversible
			clr.b	&worstStress
			clr.b	&worstStressType
			clr		&worstOV
			mov		#9999,&worstUV
			mov		#-99,&worstOT
			mov		#99,&worstUT
			clr		&worstAL
			ret

; Min  ( id type value -- ) ; Gives the minimum voltage or temperature and the ID of the cell
		xCODE	'<',min,_min
			NO_ECHO_CMD	doMin0,doMin			; Use the no-echo wrapper macro
doMin0:
		mov		#0,Rthd				; Default ID
		mov		Rtos,Rsec			; Type
		mov		#$7FFF,Rtos			; Default value infinity
doMin:	; Emit another Min command with its last parameter min-ed with the
		; relevant local value. The second parameter tells which type of local value, voltage or temp.
		; The first parameter gives the ID of the cell having the max value.
 		_CASE
			_OF #'v',Rsec
				call	#CellV			; Get cell voltage in millivolts in R10
				push	#4				; Save the field width, 4 digits
			_ENDOF
			_OF #'t',Rsec
				call	#Temp			; Get temperature in degrees Celsius in R10
				push	#2				; Save the field width, 2 digits
			_ENDOF
			_OF #'p',Rsec
				mov.b	&localStatus,R10 ; Get stress level in R10
				and.b	#$0F,R10
				push	#2				; Save the field width, 2 digits
			_ENDOF
			_OF #'q',Rsec
				mov.b	&worstStress,R10 ; Get stress level in R10
				push	#2				; Save the field width, 2 digits
			_ENDOF
		mov		#$7FFF,R10			; Default case, unknown type, set R10 to infinity
		push	#1					; Save the field width, 1 digit
		_ENDCASE

		cmp		Rtos,R10			; Find min of parameter and local value
		_IF		_L
			mov		R10,Rtos
			mov.b	&ID,Rthd			; If new min, update ID
		_ENDIF

		push	Rtos				; Save value
		push	Rsec				; Save type

		mov		Rthd,Rsec			; Put ID into Rsec
;		mov		#3,Rtos				; Use a 3 digit field width
		call	#_emitNum3			; Transmit the ID as text in the present number base

		mov		#':',R8				; Transmit a colon, an alias for tick
		call	#TxByteCk

		pop		R8					; Pop and transmit the type, 'v' or 't'
		call	#TxByteCk

		mov		#' ',R8				; Transmit a space
		call	#TxByteCk

		pop		Rsec				; Pop the min value
		pop		Rtos				; Pop the field width
		call	#_emitNum			; Transmit the value as text in the present number base

		mov		#'<',R8				; Transmit a "<"
		call	#TxByteCk

		br		#TxEndOfPacket		; Tail-call TxEndOfPacket and return
;		ret

; Max  ( id type value -- ) ; Gives the maximum voltage or temperature and the ID of the cell
		xCODE	'>',max,_max
			NO_ECHO_CMD	doMax0,doMax	; Use the no-echo wrapper macro
doMax0:
		mov		#0,Rthd				; Default ID
		mov		Rtos,Rsec			; Type
		mov		#$8000,Rtos			; Default value neg infinity
doMax:	; Emit another Max command with its last parameter max-ed with the
		; relevant local value. The second parameter tells which type of local value, voltage or temp.
		; The first parameter gives the ID of the cell having the max value.
 		_CASE
			_OF #'v',Rsec
				call	#CellV			; Get cell voltage in millivolts in R10
				push	#4				; Save the field width, 4 digits
			_ENDOF
			_OF #'t',Rsec
				call	#Temp			; Get temperature in degrees Celsius in R10
				push	#2				; Save the field width, 2 digits
			_ENDOF
			_OF #'p',Rsec
				mov.b	&localStatus,R10 ; Get stress level in R10
				and.b	#$0F,R10
				push	#2				; Save the field width, 2 digits
			_ENDOF
			_OF #'q',Rsec
				mov.b	&worstStress,R10 ; Get stress level in R10
				push	#2				; Save the field width, 2 digits
			_ENDOF
		mov		#$8000,R10			; Default case, unknown type, set R10 to neg infinity
		push	#1					; Save the field width, 1 digit
		_ENDCASE

		cmp		R10,Rtos			; Find max of parameter and local value
		_IF		_L
			mov		R10,Rtos
			mov.b	&ID,Rthd			; If new max, update ID
		_ENDIF

		push	Rtos				; Save value
		push	Rsec				; Save type

		mov		Rthd,Rsec			; Put ID into Rsec
		call	#_emitNum3			; Transmit the ID as text in the present number base

		mov		#':',R8				; Transmit a colon, an alias for tick
		call	#TxByteCk

		pop		R8					; Pop and transmit the type, 'v' or 't'
		call	#TxByteCk

		mov		#' ',R8				; Transmit a space
		call	#TxByteCk

		pop		Rsec				; Pop the max value
		pop		Rtos				; Pop the field width
		call	#_emitNum			; Transmit the value as text in the present number base

		mov		#'>',R8				; Transmit a ">"
		call	#TxByteCk

		br		#TxEndOfPacket		; Tail-call TxEndOfPacket and return
;		ret


; Current (tenths-of-an-amp -- ) // Sent by BMU to CMUs
		xCODE	'i',Current,_Current
		cmp.b	#255,&ID
		_IF	_NE							; If we're not a BMU
			mov		Rtos,&current			; Set the current
		_ENDIF
		ret

; Store discharge counter high word (dischargeHi -- )
		; Sent periodically by BMU to CMU 1, and sent by CMU 1 to BMU on receiving a 'G' command.
		; The BMU uses the CMU as battery-backed-up RAM to store the approximate depth of discharge so
		; it can restore it after the monolith has been shut down and hence BMU has been powered down.
		xCODE	'Z',ZtoreDischarge,_ZtoreDischarge
		mov		Rtos,&discharge+2		; Set the discharge counter high word to the received value
		ret

; Get discharge counter high word ( -- )
		; Sent by BMU to CMU 1 when BMU is reset. Sends a 'Z' command back to the BMU with the
		; high byte of the discharge counter.
		xCODE	'G',GetDischarge,_GetDischarge
		mov		#SelectBMU,R10			; Transmit "255s" to select the BMU only
		call	#TxStringCk
		ClearWatchdog

		mov		&discharge+2,Rsec
		mov		#5,Rtos					; 5 digit field width
		push.b	&interpFlags			; Save number base
		bis.b	#bHexOutput,&interpFlags; Set to hexadecimal output
		call	#_emitNum				; Transmit the number
		popBits_B #bHexOutput,&interpFlags ; Restore number base
		ClearWatchdog

		mov		#'Z',R8					; Transmit a "Z" for ZtoreDischarge
		call	#TxByteCk
		br		#TxEndOfPacket			; Tail-call TxEndOfPacket and return
;		ret

SelectBMU	DB	4, '255s'				; First byte is length of following string
			ALIGN	1


		xCODE	'a',getSmoothAvgCellVolt,_getSmoothAvgCellVolt
		mov		&avgCellVoltX256+2,R9; Get upper word 0H
		swpb	R9					; Move to upper byte of R9; R9 = H0
		mov.b	&avgCellVoltX256+1,R8; Upper byte of lower word  R8 = 0M
		bis		R9, R8				; R8 has old value = HM = 0HML >> 8
		mov		R8, Rsec
		mov		#'a',Rthd			; Command being responded to is 'a'
		mov		#4,Rtos				; Use 4 digits
		call	#_prettyPrint		; Call pretty-print
		ret

; Send PIP command ( c-addr u u2 -- )
		; BMU only.
		; Send the string given by pointer c-addr and length u, out of one or both of the Chg ports,
		; as specified by u2 values of 1 = Chg1 only, 2 = Chg2 only, 3 = both.
		xCODE	'P'|'p' <<8,PipCommmand,_PipCommand ; 'Pp' collides with 'Ph' 'Px' 'Xh' 'Xp' 'Xx'
		cmp.b	#255,&ID
		_IF	_EQ							; If I'm a BMU
			; Temporarily disable the timer functions of all Chg pins
			bic.b	#TxMiChg|TxMiChg2|RxChg|RxChg2,&ChgPortSEL
			bit		#2,Rtos
			_IF		_NZ
				; Enable the timer function of the TxChg2 and RxChg2 pins
				bis.b	#TxMiChg2|RxChg2,&ChgPortSEL
				bis		#CCIS0,&ChgCCTLr		; Select input B for charger capture compare register
			_ENDIF
			bit		#1,Rtos
			_IF		_NZ
				; Enable the timer function of the TxChg and RxChg pins
				; This comes last so if sending to both ports, we receive from RxChg, not RxCgh2
				bis.b	#TxMiChg|RxChg,&ChgPortSEL
				bic		#CCIS0,&ChgCCTLr		; Select input A for charger capture compare register
			_ENDIF

			push		&TxBytePtr			; Save the present Tx pointer
			mov			#ChgTxByte,&TxBytePtr ; Point the Tx pointer at the charge ports
			mov			Rthd,R10
			mov			Rsec,R11
			call		#TxStringCrcS		; Send string pointed to by R10, len R11. Trashes R8 thru R11
			call		#TxCrc				; Send the two bytes of CRC and clear it
			mov.b		#$0D,R8
			call		#TxByte				; Send the carriage return without accumulating CRC
			pop			&TxBytePtr			; Set the Tx pointer back to what it was
		_ENDIF
		ret


; Send a PIP command with no CRC, e.g. "PFTY5200"1Pw  ( c-addr u u2 -- )
		; BMU only.
		; Send the string given by pointer c-addr and length u, out of one or both of the Chg ports,
		; as specified by u2 values of 1 = Chg1 only, 2 = Chg2 only, 3 = both.
		xCODE	'P'|'w' <<8,PipCmdNC,_PipCmdNC ; 'Pw' collides with 'Po' 'Pg' 'Xw' 'Xo' 'Xg'
		cmp.b	#255,&ID
		_IF	_EQ							; If I'm a BMU
			; Temporarily disable the timer functions of all Chg pins
			bic.b	#TxMiChg|TxMiChg2|RxChg|RxChg2,&ChgPortSEL
			bit		#2,Rtos
			_IF		_NZ
				; Enable the timer function of the TxChg2 and RxChg2 pins
				bis.b	#TxMiChg2|RxChg2,&ChgPortSEL
				bis		#CCIS0,&ChgCCTLr		; Select input B for charger capture compare register
			_ENDIF
			bit		#1,Rtos
			_IF		_NZ
				; Enable the timer function of the TxChg and RxChg pins
				; This comes last so if sending to both ports, we receive from RxChg, not RxCgh2
				bis.b	#TxMiChg|RxChg,&ChgPortSEL
				bic		#CCIS0,&ChgCCTLr		; Select input A for charger capture compare register
			_ENDIF

			push		&TxBytePtr			; Save the present Tx pointer
			mov			#ChgTxByte,&TxBytePtr ; Point the Tx pointer at the charge ports
			mov			Rthd,R10
			mov			Rsec,R11
			call		#TxBytes			; Send string pointed to by R10, len R11. Trashes R8-R11
											; No calculation or sending of CRC
			mov.b		#$0D,R8
			call		#TxByte				; Send the carriage return without accumulating CRC
			pop			&TxBytePtr			; Set the Tx pointer back to what it was
		_ENDIF
		ret

;
; Write calibration value ( n ch --- )
;
; n is value to write. ch is calibration type (e.g. 'v for cell Voltage).
;
; Note: The 'fw command can affect the CPU clock in such a way that the processor
; is no longer capable of receiving commands, and needs physical access to recover.
; So take great care. If the worst happens, use a JTAG programmer to load a version of TestICal
; having an INIT_CMD_STRING that sets a typical frequency calibration value, such as '$AD90\'fw'.
;
; Note: For the 'rw command, a ballpark estimate of LiFePO4 resistance in microohms would be 144000
; divided by the capacity in amp hours.
; Alternatively cell resistance can be measured as the change in battery voltage
; divided by the step change in current that caused it, divided by the number of cells.
; To obtain "HiTempCellRes", the measured cell resistance should be divided by
; 1 + 2^(1-T/10) where T is the cell temperature at which the measurement was made.
; e.g. at 20 degC, divide the measurement by 1.5 to obtain HiTempCellRes.
; e.g. at 25 degC, divide the measurement by 1.35 to obtain HiTempCellRes.
; e.g. at 30 degC, divide the measurement by 1.25 to obtain HiTempCellRes.

			xCODE	'w',writeCalValue,_writeCalValue
			call 	#TranslateToCalAddr
			mov.b	Rtos,R10					; Convert to RAM address in R9
			bic.b	#$80,R10
			bis		#infoDataStart&$FF00,R10	; Set high bits
			cmp		#infoCapacity,R10			; Check for battery capacity
			_IF		_EQ							; If so
				rla		Rsec						; Multiply given value by 10
				mov		Rsec,R9						; to bring to tenths of an Ah
				rla2	Rsec						; *8
				add		R9,Rsec						; *10
			_ENDIF
			tst.b	Rtos
			_IF		_NZ						; If not zero for "unrecognised"
				_IF		_NN						; If high bit set
					mov		#1,R9					; Indicate byte size
				_ELSE							; Else high bit clear so
					mov.w	#0,R9					; Indicate word sized cal value
				_ENDIF							; Endif high bit
				mov		Rsec,R8					; Data to be written
#if 0
				; If 'fw, also make the new value live
				cmp	#info8MHzCalD,R10
				_IF		_EQ
					mov.b	Rsec,&DCOCTL
					swpb	Rsec
					mov.b	Rsec,&BCSCTL1
				_ENDIF
#endif
				call	#MonoUpdFlash			; Write new value to flash
			_ELSE 							; Else is zero for "unrecognised"
emitQmark
				mov		#1+1+1,R11
				mov		#sQuestion,R10
				br		#TxBytes			; Print \? <ret> and exit
			_ENDIF							; Endif unrecognised
			ret

sQuestion	DB			'\\?\r'				; Use quote so downstream CMUs will ignore

; Some characters need to be translated into RAM adresses of calibration values
		ALIGN	1
calAddressTable
		DB		'I' , infoBoltMiCal	& $7F | $80
		DB		's' , infoTempSlope	& $7F | $80
		DB		'O' , infoBoltPlOff	& $7F | $00
		DB		'o' , infoCellOff	& $7F | $00
		DB		'c' , infoCapacity	& $7F | $80
		DB		'r' , infoCellRes	& $7F | $80
		DB		'V' , infoBoltPlCal	& $7F | $80
		DB		'v' , infoCellCal	& $7F | $80	; High bit set to indicate word quantity,
		DB		't' , infoTempOff	& $7F | $00	; clear for byte quantity
		DB		'n' , infoBoltMiOff	& $7F | $00
;		DB		'f' , info8MHzCalD	& $7F | $80
		DB		'i' , infoID		& $7F | $00
		DB		'a' , infoAdcTimIdx & $7F | $00
; Zero must not appear in the table as it is used to represent "unrecognised".
sizeCalAddressTable	EQU	$-calAddressTable

;
; TranslateToCalAddr ( ch -- addr )
;
TranslateToCalAddr:
		; Do the calibration address translations using the table above
		mov		#sizeCalAddressTable,R9 ; Initialise the loop counter and table index
		_BEGIN				; Begin loop
			mov.w	calAddressTable-2(R9),R10 ; Get two bytes from the table
			cmp.b	R10,Rtos	; Compare the address character with the low byte from the table
			_WHILE	_NE			; While no match [ _WHILE xx = _IF xx  _CS_SWAP ]
				decd	R9			; Decrement loop-counter/table-index by 2
		_UNTIL	_Z			; Until loop counter is zero
		clr		Rtos		; Finished loop with no match so set result to zero for "unrecognised"
			_ELSE				; Else there is a match so
				swpb	R10			; Get the high byte from the table
				mov.b	R10,Rtos	; Substitute it for the address character
			_ENDIF				; Endif match
		ret

;
; Read calibration value ( ch --- )
; Calibration type (e.g. 'v' for cell Voltage) in ch
			xCODE	'r',readCalValue,_readCalValue ; Note: 'r' prints Rx state in monitor
			call 	#TranslateToCalAddr
			mov.b	Rtos,Rsec				; Convert to info flash address in Rsec
			bic.b	#$80,Rsec
			bis		#infoDataStart&$FF00,Rsec
			tst.b	Rtos
			_IF		_NZ						; If not zero (zero means "unrecognised")
;				push.b	&interpFlags
				_IF		_NN						; If high bit set
					mov		#3,Rtos					; Display 3 digits
					mov.b	@Rsec,Rsec				; Get byte sized cal value
				_ELSE							; Else high bit clear so
					mov		#5,Rtos					; Display 5 digits
					cmp		#infoCapacity,Rsec		; Test for battery capacity
					mov.w	@Rsec,Rsec				; Get word sized cal value
;					bis.b	#bHexOutput,&interpFlags ; Display words in hex
					_IF		_EQ
						mov		Rsec,R9
						clr		R10
						mov		#10,R8				; Divide by 10 to bring to whole Ah
						call	#UMSlashMod			; R10:R9 / R8 -> R9
						mov		R9,Rsec
					_ENDIF
				_ENDIF							; Endif high bit
			_ELSE 							; Else is zero for "unrecognised"
				jmp		emitQmark
			_ENDIF							; Endif unrecognised
			mov.b		#' ',Rthd			; Trailing char (space)
			call	 	#_prettyPrint
;			popBits_B	#bHexOutput,&interpFlags ; Restore output number base
			ret

