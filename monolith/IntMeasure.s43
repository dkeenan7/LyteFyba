; Suitable usage at appropriate part of assembly file: #include IntMeasure.s43

; MeasureIsr - measurement interrupt service routine.
; Called as a timer compare-register interrupt.
; CMU: TA0CCR2 (ScuRx on BMU), BMU: TA1CCR0 (was SocPWM).
; Perform an analogue measurement 1600 times a second.

; If we need to do an analog SoC meter in future, we can do it at 16 Hz with a resolution of 100
; in this interrupt routine.

MeasureCmuIsr:				; ScuCCRr = TA0CCR2
			push	R8						; (3)
			mov		&ScuTAIV, R8			; (3) Access interrupt sub-vector to clear interrupt flag
											;     Don't use cmp or tst as this will clear 2 int flags
			add		#(TAfreq+800)/1600, &ScuCCRr ; (5) Ensure we are called at 1600 Hz
			_IF		NEVER					; (2)
MeasureBmuIsr:				; MeasCCR = TA1CCR0
				push	R8						; (3)
				add		#(TAfreq+800)/1600, &MeasCCR ; (5) Ensure we are called at 1600 Hz
			_ENDIF
			; Read and accumulate the result from the previous conversion
			add		&ADC10MEM, &partialSum	; (6) Add the conversion result to the partial sum
			mov.b	&sampIndex, R8			; (3) Increment the sample index modulo 16
			inc		R8						; (1)
			and		#$F, R8					; (2)
			mov.b	R8, &sampIndex			; (4)
			_IF		Z						; (2) If the sample index is now zero
				mov.b	&chanIndex, R8			; (3)
				mov		&partialSum, rawMeasures(R8) ; (6) Save the sum as the channel's raw measurement
				clr		&partialSum				; (4) Clear for next set of 16 conversions
				incd	R8						; (1) Increment the channel index modulo 4 words
				and		#$7, R8					; (2)
				mov.b	R8, &chanIndex			; (4)
				bic		#ENC,&ADC10CTL0 		; (4) Must turn off ENC before ctl bits can be changed
												;	This used to be outside the conditional clause,
												;	meaning that the whole ADC system, possibly
												;	including the voltage ref, were turned off every
												;	measurement. This resulted in a 6-10 mV difference
												;	between TestICal and monolith.
				mov		chanList(R8), &ADC10CTL1 ; (6) Set the ADC channel number and clock
			_ENDIF

			; Initiate the next conversion
			bis		#ENC|ADC10SC,&ADC10CTL0	; (4) Start conversion. ADC10SC is reset automatically
			pop		R8						; (2)

			reti							; (11 for call and return) Max total 76 cycles (3.2% of CPU)


; The following table has the important timing bits for ADC10CTL1. It happens that they are
; all in the lower 8 bits, so this is a table of bytes.
			; ADC10DIV_1 = divide input clock by 2 for ADC10CLK
			; ADC10DIV_2 = divide input clock by 3 for ADC10CLK
            ; ADC10DIV_7 = divide input clock by 8 for ADC10CLK
			; ADC10SSEL_0 = choose internal ADC RC oscillator (3 to 6 MHz) as input to ADC10CLK divider
			; ADC10SSEL_2 = choose MCLK (3.6864 MHz) as input to ADC10CLK divider
			; CONSEQ_0	= single channel single conversion

			; We found years ago that ADC10OSC/3 distributes noise particularly from SMCLK better,
			; for more consistent ADC readings. But now they seem more noisy, especially for the
			; Bolt+ reading. ADC10CLK should not be faster than 1.67 MHz or slower than 0.15 MHz.
DFLT_ADC_TIMING	equ	ADC10DIV_4|ADC10SSEL_2|CONSEQ_0	; Best for Monolith is usually MCLK/5 (index 11)
AdcTimingTbl DB		DFLT_ADC_TIMING					; 0 = default, lowest worst-case noise
			DB		ADC10DIV_1|ADC10SSEL_2|CONSEQ_0	; 1 = MCLK/2	 (may be too fast)
			DB		ADC10DIV_1|ADC10SSEL_0|CONSEQ_0	; 2 = ADC10OSC/2 (may be too fast)
			DB		ADC10DIV_2|ADC10SSEL_0|CONSEQ_0	; 3 = ADC10OSC/3 (may be too fast)
			DB		ADC10DIV_3|ADC10SSEL_0|CONSEQ_0	; 4 = ADC10OSC/4
			DB		ADC10DIV_4|ADC10SSEL_0|CONSEQ_0	; 5 = ADC10OSC/5
			DB		ADC10DIV_5|ADC10SSEL_0|CONSEQ_0	; 6 = ADC10OSC/6
			DB		ADC10DIV_6|ADC10SSEL_0|CONSEQ_0	; 7 = ADC10OSC/7
			DB		ADC10DIV_7|ADC10SSEL_0|CONSEQ_0	; 8 = ADC10OSC/8
			DB		ADC10DIV_2|ADC10SSEL_2|CONSEQ_0	; 9 = MCLK/3
			DB		ADC10DIV_3|ADC10SSEL_2|CONSEQ_0	; 10 = MCLK/4
			DB		ADC10DIV_4|ADC10SSEL_2|CONSEQ_0	; 11 = MCLK/5
			DB		ADC10DIV_5|ADC10SSEL_2|CONSEQ_0	; 12 = MCLK/6
			DB		ADC10DIV_6|ADC10SSEL_2|CONSEQ_0	; 13 = MCLK/7
			DB		ADC10DIV_7|ADC10SSEL_2|CONSEQ_0	; 14 = MCLK/8
			align	1

;
; Scale R8 by 17/16 if we're not a BMU
; Trashes R9
;
Mul17Div16Cmu:
		cmp.b	#255,&ID
		_IF		NE			; If not a BMU then
			; Multiply by 17/16 to change full-scale from 4092 mV to 4348 mV
			mov		R8,R9		; Copy the value
			add		#8,R9		; Add half the divisor for rounding
			rra4	R9			; Divide by 16
			add		R9,R8		; Add back to the original
		_ENDIF
		ret

ApplyTempCo:	; Make voltage readings more accurate when CMU is hot from bypassing
				; by correcting for tempco of ADC voltage ref.
				; Based on observations by Matthew James
		mov.b	&cmuTemperature,R9
		sxt		R9						; Sign extend byte to word
		sub		#25,R9					; Subtract 25 degC
		rra2	R9						; Divide by 4
		adc		R9						; Round
		sub		R9,R10					; Subtract the temperature correction
		ret								; Finished


; Measure and Correct routines
; Output: R10 = 12-bit measurement result with scale and offset calibration applied.
; Trashes: R8, R9, R11
;
; Correct the value for scale by multiplying the sum-of-samples by the voltage calibration scale factor
; in info flash, and correct it for offset by adding another value from info flash.
; The sum-of-samples, when considered as a single oversampled-and-decimated reading,
; is an unsigned 12.2 bit fixed-point number of millivolts.
; The calibration scale factor is an unsigned 1.15 bit fixed-point number.
; We want a 12 bit integer result in millivolts.
; That means we have to shift the product 17 bits to the right, which is equivalent to
; throwing away the lo word and shifting the high word one bit to the right.
;
; Used for battery voltage measurement in a BMU
MeasAndCorrCell:
			mov			&cellVRaw, R8			; 12.2 fixed-point result in R8
			call		#Mul17Div16Cmu			; Scale by 17/16 if we're not a BMU
MeasAndCorr:                                    ; Possible future entry point for TouchV and Vcc
			mov.w		&CellCal,R9				; Get cell voltage calibration word as multiplicand in R9
												; Multiplier is sum-of-samples, already in R8
			call		#UMStar					; Gives unsigned product in R10 (hi word) and R9 (lo)
			inc			R10						; For correct rounding
			rra			R10						; Shift product hi word right one bit
			mov.b		&CellOff,R9				; Get the cell voltage offset as signed byte
			sxt			R9						; Convert to signed word
			add			R9,R10					; Add the offset calibration value
			call		#ApplyTempCo			; Apply the temperature correction
			ret									; Finished

; As above, using the separate bolt calibration factor and offset
; Used for PV array voltage measurement, or Capacitor measurement during precharge, in a BMU
; Trashes R8-11
MeasAndCorrBoltPl:
			mov			&boltVPlRaw, R8			; 12.2 fixed-point result in R8
			call		#Mul17Div16Cmu			; Scale by 17/16 if we're not a BMU
			mov.w		&BoltPlCal,R9			; Get bolt+ voltage scale factor as multiplicand in R9
			cmp.w		#$FFFF,R9				; Check if it doesn't exist, i.e. just erased flash
			_IF			EQ						; If it doesn't exist
				mov.w		&CellCal,R9				; Use the cell voltage scale factor instead
			_ENDIF								; Endif
												; Multiplier is sum-of-samples, already in R8
			call		#UMStar					; Gives unsigned product in R10 (hi word) and R9 (lo)
			inc			R10						; For correct rounding
			rra			R10						; Shift product hi word right one bit
			mov.b		&BoltPlOff,R9			; Get the bolt+ voltage offset as signed byte
			sxt			R9						; Convert to signed word
			add			R9,R10					; Add the offset calibration value
			call		#ApplyTempCo			; Apply the temperature correction
			ret									; Finished

; As above, using the separate bolt calibration factor and offset
; Used for current measurements in a BMU
MeasAndCorrBoltMi:
			mov			&boltVMiRaw, R8			; 12.2 fixed-point result in R8
			mov.w		&BoltMiCal,R9			; Get bolt- voltage scale factor as multiplicand in R9
			cmp.w		#$FFFF,R9				; Check if it doesn't exist, i.e. just erased flash
			_IF			EQ						; If it doesn't exist
				mov.w		&CellCal,R9				; Use the cell voltage scale factor instead
			_ENDIF								; Endif
												; Multiplier is sum-of-samples, already in R8
			call		#UMStar					; Gives unsigned product in R10 (hi word) and R9 (lo)
			inc			R10						; For correct rounding
			rra			R10						; Shift product hi word right one bit
			mov.b		&BoltMiOff,R9			; Get the bolt-/current voltage offset as signed byte
			sxt			R9						; Convert to signed word
			add			R9,R10					; Add the offset calibration value
			ret									; Finished

GetBatV:
GetCellV:
; Trashes: R8, R9, R11
; Output: R10 = calibrated in millivolts, approx range 0 to 4348
			call	#MeasAndCorrCell
			ret


GetCapV:	; When used by (w)monolith to check precharge
GetArrayV:
GetBoltPlV:
; Trashes: R8, R9, R11
; Output: R10 = calibrated in millivolts, approx range 0 to 4348
			call	#MeasAndCorrBoltPl
			ret


GetTemp:
; Output: R10 = calibrated temperature in correctly rounded degrees Celsius, approx range -50..100
; Also R9 = calibrated temperature in correctly rounded half degrees.
; Trashes: R8, R11
			mov		&temperatureRaw, R8		; 12.2 significant fixed-point result in R8, in 14.2
											; This is 4 bits shifted compared to a single measurement,
											; as stored in CAL30
			add		#2,R8					; For rounding
			rra2	R8						; Now 12.2 in 14.2 fixed point, still 2 bits shifted left
			; Want (meas-CAL30) * SLOPE + 30 (see Family User Guide 24.2.2.1)
			mov		&CALADC_15T30,R9		; CAL30 10.0 significant in 16.0 fixed point
			rla2	R9						; CAL30 10.0 significant in 14.2 fixed point
			sub		R9,R8					; R8 has (meas-CAL30); could be negative
			mov		&TempSlope,R9			; R9 has slope in 0.16 fixed point
			call	#MMStar					; R10:R9 := R8 * R9, R8 allowed to be negative
											; R10:R9 is 14.2:16 (quarter degrees)
			add		#30<<2,R10				; Add 30 degC in quarter degrees as part of the formula
			mov.b	&TempOff,R8				; Our offset calibration, in half degrees
			sxt		R8						; NOTE: prior to data version 7, this was in whole degrees
											; and was subtracted
			rla		R8						; Turn it into quarter degrees
			add		R8,R10					; Add our offset
			mov		R10,R9					; Keep a copy of pre (shifted and rounded) value
			add		#2,R10					; Add half divisor for full degree rounding
			rra2	R10						; Shift (divide by 4) to get 14.0 fixed point in R10
											; R10 now has temperature in whole degrees Celsius
			add		#1,R9					; Rounding for divide by 2
			rra		R9						; R9 has temperature in half degrees
			mov.b	R10,&cmuTemperature		; Save temperature for use in correcting for ADC Vref tempco
			ret

GetBoltMiV:
; Output: R10 = bolt- voltage or shunt voltage x20 calibrated in millivolts, approx range -1500 to +1500
; 9999 means bolt- voltage or current not valid, ignore.
; Corresponds to fifths of an amp with a 200 A 50 mV shunt.
; Trashes: R8, R9, R11
			mov.b		&BoltMiOff,R8	; Bolt- / current shunt offset calibration
			cmp.b		#$80,R8			; $80 is a special value representing "calibration failure"
			_IF			EQ				; If BoltMi offset calibration value is $80
				mov		#9999,R10			; then use special value
			_ELSE
				call		#MeasAndCorrBoltMi	; Measure and correct using BoltMi corrections
				; Bolt- voltage measurement in mV
				; Circuit has 2:1 voltage divider with Vref at the bottom.
				; So measure M = 1.5 - (1.5 - Vin)/2 = 0.75 + Vin/2.
				; Reading = 2046 + (Vin/2)(4092/1.5)
				; R = 2046 + Vin * 1364 (Vin in volts)
				; R = 2046 + Vin * 1.364 (Vin in mV)
				; Vin = (R - 2046)/1.364 mV
				; To divide by 1.364, multiply by 65536/1.364 = 48047 and keep the top half
				sub			#2046,R10		; A corrected reading of 2046 represents zero
				mov			R10,R8
				mov			#48047,R9
				call		#MMStar			; Signed R10:R9 = signed R8 * unsigned R9
				add			#$8000,R9		; Do rounding
				adc			R10
				; Result is in R10
			_ENDIF
			ret

#if INSULATION_MONITORING
GetTouchV:			; This can't work because TouchVChan is not included in the interrupt measurements
; Trashes: R8, R9, R11
; Output: R10 = uncalibrated reading (affected by optocoupler CTR), approx range 0 to 4092
			mov		#TouchVChan<<12,R8					; Need to call
			jmp		MeasAndCorr							; Tail-call MeasAndCorr and return
#endif // INSULATION_MONITORING

